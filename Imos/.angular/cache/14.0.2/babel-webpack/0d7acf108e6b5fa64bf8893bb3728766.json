{"ast":null,"code":"import { CdkTextareaAutosize, AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport { Directive, Input, InjectionToken, ElementRef, Optional, Self, Inject, NgZone, HostListener, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { NgControl, NgForm, FormGroupDirective } from '@angular/forms';\nimport { mixinErrorState, ErrorStateMatcher, MatCommonModule } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormField, MAT_FORM_FIELD, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/forms';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/text-field';\nimport * as ɵngcc5 from '@angular/material/form-field';\n\nclass MatTextareaAutosize extends CdkTextareaAutosize {\n  get matAutosizeMinRows() {\n    return this.minRows;\n  }\n\n  set matAutosizeMinRows(value) {\n    this.minRows = value;\n  }\n\n  get matAutosizeMaxRows() {\n    return this.maxRows;\n  }\n\n  set matAutosizeMaxRows(value) {\n    this.maxRows = value;\n  }\n\n  get matAutosize() {\n    return this.enabled;\n  }\n\n  set matAutosize(value) {\n    this.enabled = value;\n  }\n\n  get matTextareaAutosize() {\n    return this.enabled;\n  }\n\n  set matTextareaAutosize(value) {\n    this.enabled = value;\n  }\n\n}\n\nMatTextareaAutosize.ɵfac = /*@__PURE__*/function () {\n  let ɵMatTextareaAutosize_BaseFactory;\n  return function MatTextareaAutosize_Factory(t) {\n    return (ɵMatTextareaAutosize_BaseFactory || (ɵMatTextareaAutosize_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTextareaAutosize)))(t || MatTextareaAutosize);\n  };\n}();\n\nMatTextareaAutosize.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTextareaAutosize,\n  selectors: [[\"textarea\", \"mat-autosize\", \"\"], [\"textarea\", \"matTextareaAutosize\", \"\"]],\n  hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\", \"mat-autosize\"],\n  inputs: {\n    cdkAutosizeMinRows: \"cdkAutosizeMinRows\",\n    cdkAutosizeMaxRows: \"cdkAutosizeMaxRows\",\n    matAutosizeMinRows: \"matAutosizeMinRows\",\n    matAutosizeMaxRows: \"matAutosizeMaxRows\",\n    matAutosize: [\"mat-autosize\", \"matAutosize\"],\n    matTextareaAutosize: \"matTextareaAutosize\"\n  },\n  exportAs: [\"matTextareaAutosize\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMatTextareaAutosize.propDecorators = {\n  matAutosizeMinRows: [{\n    type: Input\n  }],\n  matAutosizeMaxRows: [{\n    type: Input\n  }],\n  matAutosize: [{\n    type: Input,\n    args: ['mat-autosize']\n  }],\n  matTextareaAutosize: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTextareaAutosize, [{\n    type: Directive,\n    args: [{\n      selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n      exportAs: 'matTextareaAutosize',\n      inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n      host: {\n        'class': 'cdk-textarea-autosize mat-autosize',\n        // Textarea elements that have the directive applied should have a single row by default.\n        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n        'rows': '1'\n      }\n    }]\n  }], null, {\n    matAutosizeMinRows: [{\n      type: Input\n    }],\n    matAutosizeMaxRows: [{\n      type: Input\n    }],\n    matAutosize: [{\n      type: Input,\n      args: ['mat-autosize']\n    }],\n    matTextareaAutosize: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\n\n\nfunction getMatInputUnsupportedTypeError(type) {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\n\n\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\n\nconst MAT_INPUT_INVALID_TYPES = ['button', 'checkbox', 'file', 'hidden', 'image', 'radio', 'range', 'reset', 'submit'];\nlet nextUniqueId = 0; // Boilerplate for applying mixins to MatInput.\n\n/** @docs-private */\n\nconst _MatInputBase = mixinErrorState(class {\n  constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup,\n  /** @docs-private */\n  ngControl) {\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n\n});\n/** Directive that allows a native input to work inside a `MatFormField`. */\n\n\nclass MatInput extends _MatInputBase {\n  constructor(_elementRef, _platform, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone, // TODO: Remove this once the legacy appearance has been removed. We only need\n  // to inject the form-field for determining whether the placeholder has been promoted.\n  _formField) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this._elementRef = _elementRef;\n    this._platform = _platform;\n    this._autofillMonitor = _autofillMonitor;\n    this._formField = _formField;\n    this._uid = `mat-input-${nextUniqueId++}`;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n    this.focused = false;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n    this.stateChanges = new Subject();\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n    this.controlType = 'mat-input';\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n    this.autofilled = false;\n    this._disabled = false;\n    this._required = false;\n    this._type = 'text';\n    this._readonly = false;\n    this._neverEmptyInputTypes = ['date', 'datetime', 'datetime-local', 'month', 'time', 'week'].filter(t => getSupportedInputTypes().has(t));\n    const element = this._elementRef.nativeElement;\n    const nodeName = element.nodeName.toLowerCase(); // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n\n    this._inputValueAccessor = inputValueAccessor || element;\n    this._previousNativeValue = this.value; // Force setter to be called in case id was not specified.\n\n    this.id = this.id; // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', event => {\n          const el = event.target; // Note: We specifically check for 0, rather than `!el.selectionStart`, because the two\n          // indicate different things. If the value is 0, it means that the caret is at the start\n          // of the input, whereas a value of `null` means that the input doesn't support\n          // manipulating the selection range. Inputs that don't support setting the selection range\n          // will throw an error so we want to avoid calling `setSelectionRange` on them. See:\n          // https://html.spec.whatwg.org/multipage/input.html#do-not-apply\n\n          if (!el.value && el.selectionStart === 0 && el.selectionEnd === 0) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = nodeName === 'select';\n    this._isTextarea = nodeName === 'textarea';\n    this._isInFormField = !!_formField;\n\n    if (this._isNativeSelect) {\n      this.controlType = element.multiple ? 'mat-native-select-multiple' : 'mat-native-select';\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get disabled() {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value); // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get id() {\n    return this._id;\n  }\n\n  set id(value) {\n    this._id = value || this._uid;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get required() {\n    return this._required;\n  }\n\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n  }\n  /** Input type of the element. */\n\n\n  get type() {\n    return this._type;\n  }\n\n  set type(value) {\n    this._type = value || 'text';\n\n    this._validateType(); // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n\n\n    if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get value() {\n    return this._inputValueAccessor.value;\n  }\n\n  set value(value) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n  /** Whether the element is readonly. */\n\n\n  get readonly() {\n    return this._readonly;\n  }\n\n  set readonly(value) {\n    this._readonly = coerceBooleanProperty(value);\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    } // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n\n\n    this._dirtyCheckNativeValue(); // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n    // present or not depends on a query which is prone to \"changed after checked\" errors.\n\n\n    this._dirtyCheckPlaceholder();\n  }\n  /** Focuses the input. */\n\n\n  focus(options) {\n    this._elementRef.nativeElement.focus(options);\n  } // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n\n  /** Callback for the cases where the focused state of the input changes. */\n  // tslint:disable:no-host-decorator-in-concrete\n  // tslint:enable:no-host-decorator-in-concrete\n\n\n  _focusChanged(isFocused) {\n    if (isFocused !== this.focused) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  } // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n\n\n  _onInput() {// This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n  /** Does some manual dirty checking on the native input `placeholder` attribute. */\n\n\n  _dirtyCheckPlaceholder() {\n    var _a, _b; // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n    // screen readers will read it out twice: once from the label and once from the attribute.\n    // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n    // the only one that supports promoting the placeholder to a label.\n\n\n    const placeholder = ((_b = (_a = this._formField) === null || _a === void 0 ? void 0 : _a._hideControlPlaceholder) === null || _b === void 0 ? void 0 : _b.call(_a)) ? null : this.placeholder;\n\n    if (placeholder !== this._previousPlaceholder) {\n      const element = this._elementRef.nativeElement;\n      this._previousPlaceholder = placeholder;\n      placeholder ? element.setAttribute('placeholder', placeholder) : element.removeAttribute('placeholder');\n    }\n  }\n  /** Does some manual dirty checking on the native input `value` property. */\n\n\n  _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n  /** Make sure the input is a supported type. */\n\n\n  _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n  /** Checks whether the input type is one of the types that are never empty. */\n\n\n  _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n  /** Checks whether the input is invalid based on the native validation. */\n\n\n  _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = this._elementRef.nativeElement.validity;\n    return validity && validity.badInput;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get empty() {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() && !this.autofilled;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get shouldLabelFloat() {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement;\n      const firstOption = selectElement.options[0]; // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n\n      return this.focused || selectElement.multiple || !this.empty || !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  setDescribedByIds(ids) {\n    if (ids.length) {\n      this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n    } else {\n      this._elementRef.nativeElement.removeAttribute('aria-describedby');\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n  /** Whether the form control is a native select that is displayed inline. */\n\n\n  _isInlineSelect() {\n    const element = this._elementRef.nativeElement;\n    return this._isNativeSelect && (element.multiple || element.size > 1);\n  }\n\n}\n\nMatInput.ɵfac = function MatInput_Factory(t) {\n  return new (t || MatInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(MAT_INPUT_VALUE_ACCESSOR, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AutofillMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8));\n};\n\nMatInput.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatInput,\n  selectors: [[\"input\", \"matInput\", \"\"], [\"textarea\", \"matInput\", \"\"], [\"select\", \"matNativeControl\", \"\"], [\"input\", \"matNativeControl\", \"\"], [\"textarea\", \"matNativeControl\", \"\"]],\n  hostAttrs: [1, \"mat-input-element\", \"mat-form-field-autofill-control\"],\n  hostVars: 11,\n  hostBindings: function MatInput_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focus\", function MatInput_focus_HostBindingHandler() {\n        return ctx._focusChanged(true);\n      })(\"blur\", function MatInput_blur_HostBindingHandler() {\n        return ctx._focusChanged(false);\n      })(\"input\", function MatInput_input_HostBindingHandler() {\n        return ctx._onInput();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled)(\"required\", ctx.required);\n      ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"data-placeholder\", ctx.placeholder)(\"readonly\", ctx.readonly && !ctx._isNativeSelect || null)(\"aria-invalid\", ctx.empty && ctx.required ? null : ctx.errorState)(\"aria-required\", ctx.required);\n      ɵngcc0.ɵɵclassProp(\"mat-input-server\", ctx._isServer)(\"mat-native-select-inline\", ctx._isInlineSelect());\n    }\n  },\n  inputs: {\n    id: \"id\",\n    disabled: \"disabled\",\n    required: \"required\",\n    type: \"type\",\n    value: \"value\",\n    readonly: \"readonly\",\n    placeholder: \"placeholder\",\n    errorStateMatcher: \"errorStateMatcher\",\n    userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"]\n  },\n  exportAs: [\"matInput\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: MatInput\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nMatInput.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Platform\n}, {\n  type: NgControl,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Self\n  }]\n}, {\n  type: NgForm,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: FormGroupDirective,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: ErrorStateMatcher\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Self\n  }, {\n    type: Inject,\n    args: [MAT_INPUT_VALUE_ACCESSOR]\n  }]\n}, {\n  type: AutofillMonitor\n}, {\n  type: NgZone\n}, {\n  type: MatFormField,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_FORM_FIELD]\n  }]\n}];\n\nMatInput.propDecorators = {\n  disabled: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  type: [{\n    type: Input\n  }],\n  errorStateMatcher: [{\n    type: Input\n  }],\n  userAriaDescribedBy: [{\n    type: Input,\n    args: ['aria-describedby']\n  }],\n  value: [{\n    type: Input\n  }],\n  readonly: [{\n    type: Input\n  }],\n  _focusChanged: [{\n    type: HostListener,\n    args: ['focus', ['true']]\n  }, {\n    type: HostListener,\n    args: ['blur', ['false']]\n  }],\n  _onInput: [{\n    type: HostListener,\n    args: ['input']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatInput, [{\n    type: Directive,\n    args: [{\n      selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n      exportAs: 'matInput',\n      host: {\n        /**\n         * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n         */\n        'class': 'mat-input-element mat-form-field-autofill-control',\n        '[class.mat-input-server]': '_isServer',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        // At the time of writing, we have a lot of customer tests that look up the input based on its\n        // placeholder. Since we sometimes omit the placeholder attribute from the DOM to prevent screen\n        // readers from reading it twice, we have to keep it somewhere in the DOM for the lookup.\n        '[attr.data-placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n        '[class.mat-native-select-inline]': '_isInlineSelect()',\n        // Only mark the input as invalid for assistive technology if it has a value since the\n        // state usually overlaps with `aria-required` when the input is empty and can be redundant.\n        '[attr.aria-invalid]': '(empty && required) ? null : errorState',\n        '[attr.aria-required]': 'required'\n      },\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatInput\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: ɵngcc2.NgControl,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }, {\n      type: ɵngcc2.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc2.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc3.ErrorStateMatcher\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }, {\n        type: Inject,\n        args: [MAT_INPUT_VALUE_ACCESSOR]\n      }]\n    }, {\n      type: ɵngcc4.AutofillMonitor\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc5.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_FORM_FIELD]\n      }]\n    }];\n  }, {\n    id: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    readonly: [{\n      type: Input\n    }],\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n\n    /** Callback for the cases where the focused state of the input changes. */\n    // tslint:disable:no-host-decorator-in-concrete\n    // tslint:enable:no-host-decorator-in-concrete\n    _focusChanged: [{\n      type: HostListener,\n      args: ['focus', ['true']]\n    }, {\n      type: HostListener,\n      args: ['blur', ['false']]\n    }],\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _onInput: [{\n      type: HostListener,\n      args: ['input']\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    userAriaDescribedBy: [{\n      type: Input,\n      args: ['aria-describedby']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatInputModule {}\n\nMatInputModule.ɵfac = function MatInputModule_Factory(t) {\n  return new (t || MatInputModule)();\n};\n\nMatInputModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatInputModule\n});\nMatInputModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [ErrorStateMatcher],\n  imports: [TextFieldModule, MatFormFieldModule, MatCommonModule, TextFieldModule, // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n  // be used together with `MatFormField`.\n  MatFormFieldModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatInputModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [MatInput, MatTextareaAutosize],\n      imports: [TextFieldModule, MatFormFieldModule, MatCommonModule],\n      exports: [TextFieldModule, // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n      // be used together with `MatFormField`.\n      MatFormFieldModule, MatInput, MatTextareaAutosize],\n      providers: [ErrorStateMatcher]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatInputModule, {\n    declarations: function () {\n      return [MatInput, MatTextareaAutosize];\n    },\n    imports: function () {\n      return [TextFieldModule, MatFormFieldModule, MatCommonModule];\n    },\n    exports: function () {\n      return [TextFieldModule, // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n      // be used together with `MatFormField`.\n      MatFormFieldModule, MatInput, MatTextareaAutosize];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, MatTextareaAutosize, getMatInputUnsupportedTypeError };","map":{"version":3,"names":["CdkTextareaAutosize","AutofillMonitor","TextFieldModule","Directive","Input","InjectionToken","ElementRef","Optional","Self","Inject","NgZone","HostListener","NgModule","coerceBooleanProperty","getSupportedInputTypes","Platform","NgControl","NgForm","FormGroupDirective","mixinErrorState","ErrorStateMatcher","MatCommonModule","MatFormFieldControl","MatFormField","MAT_FORM_FIELD","MatFormFieldModule","Subject","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","MatTextareaAutosize","matAutosizeMinRows","minRows","value","matAutosizeMaxRows","maxRows","matAutosize","enabled","matTextareaAutosize","ɵfac","ɵMatTextareaAutosize_BaseFactory","MatTextareaAutosize_Factory","t","ɵɵgetInheritedFactory","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","inputs","cdkAutosizeMinRows","cdkAutosizeMaxRows","exportAs","features","ɵɵInheritDefinitionFeature","propDecorators","args","ngDevMode","ɵsetClassMetadata","selector","host","getMatInputUnsupportedTypeError","Error","MAT_INPUT_VALUE_ACCESSOR","MAT_INPUT_INVALID_TYPES","nextUniqueId","_MatInputBase","constructor","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","MatInput","_elementRef","_platform","inputValueAccessor","_autofillMonitor","ngZone","_formField","_uid","focused","stateChanges","controlType","autofilled","_disabled","_required","_type","_readonly","_neverEmptyInputTypes","filter","has","element","nativeElement","nodeName","toLowerCase","_inputValueAccessor","_previousNativeValue","id","IOS","runOutsideAngular","addEventListener","event","el","target","selectionStart","selectionEnd","setSelectionRange","_isServer","isBrowser","_isNativeSelect","_isTextarea","_isInFormField","multiple","disabled","next","_id","required","_validateType","readonly","ngAfterViewInit","monitor","subscribe","isAutofilled","ngOnChanges","ngOnDestroy","complete","stopMonitoring","ngDoCheck","updateErrorState","_dirtyCheckNativeValue","_dirtyCheckPlaceholder","focus","options","_focusChanged","isFocused","_onInput","_a","_b","placeholder","_hideControlPlaceholder","call","_previousPlaceholder","setAttribute","removeAttribute","newValue","indexOf","_isNeverEmpty","_isBadInput","validity","badInput","empty","shouldLabelFloat","selectElement","firstOption","selectedIndex","label","setDescribedByIds","ids","length","join","onContainerClick","_isInlineSelect","size","MatInput_Factory","ɵɵdirectiveInject","hostVars","hostBindings","MatInput_HostBindings","rf","ctx","ɵɵlistener","MatInput_focus_HostBindingHandler","MatInput_blur_HostBindingHandler","MatInput_input_HostBindingHandler","ɵɵhostProperty","ɵɵattribute","errorState","ɵɵclassProp","errorStateMatcher","userAriaDescribedBy","ɵɵProvidersFeature","provide","useExisting","ɵɵNgOnChangesFeature","ctorParameters","decorators","undefined","providers","MatInputModule","MatInputModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports","ngJitMode","ɵɵsetNgModuleScope"],"sources":["C:/Team-43-IMOS/Team-43-IMOS/Imos/node_modules/@angular/material/__ivy_ngcc__/fesm2015/input.js"],"sourcesContent":["import { CdkTextareaAutosize, AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport { Directive, Input, InjectionToken, ElementRef, Optional, Self, Inject, NgZone, HostListener, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { NgControl, NgForm, FormGroupDirective } from '@angular/forms';\nimport { mixinErrorState, ErrorStateMatcher, MatCommonModule } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormField, MAT_FORM_FIELD, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/forms';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/text-field';\nimport * as ɵngcc5 from '@angular/material/form-field';\nclass MatTextareaAutosize extends CdkTextareaAutosize {\n    get matAutosizeMinRows() { return this.minRows; }\n    set matAutosizeMinRows(value) { this.minRows = value; }\n    get matAutosizeMaxRows() { return this.maxRows; }\n    set matAutosizeMaxRows(value) { this.maxRows = value; }\n    get matAutosize() { return this.enabled; }\n    set matAutosize(value) { this.enabled = value; }\n    get matTextareaAutosize() { return this.enabled; }\n    set matTextareaAutosize(value) { this.enabled = value; }\n}\nMatTextareaAutosize.ɵfac = /*@__PURE__*/ function () { let ɵMatTextareaAutosize_BaseFactory; return function MatTextareaAutosize_Factory(t) { return (ɵMatTextareaAutosize_BaseFactory || (ɵMatTextareaAutosize_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTextareaAutosize)))(t || MatTextareaAutosize); }; }();\nMatTextareaAutosize.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTextareaAutosize, selectors: [[\"textarea\", \"mat-autosize\", \"\"], [\"textarea\", \"matTextareaAutosize\", \"\"]], hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\", \"mat-autosize\"], inputs: { cdkAutosizeMinRows: \"cdkAutosizeMinRows\", cdkAutosizeMaxRows: \"cdkAutosizeMaxRows\", matAutosizeMinRows: \"matAutosizeMinRows\", matAutosizeMaxRows: \"matAutosizeMaxRows\", matAutosize: [\"mat-autosize\", \"matAutosize\"], matTextareaAutosize: \"matTextareaAutosize\" }, exportAs: [\"matTextareaAutosize\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTextareaAutosize.propDecorators = {\n    matAutosizeMinRows: [{ type: Input }],\n    matAutosizeMaxRows: [{ type: Input }],\n    matAutosize: [{ type: Input, args: ['mat-autosize',] }],\n    matTextareaAutosize: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTextareaAutosize, [{\n        type: Directive,\n        args: [{\n                selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n                exportAs: 'matTextareaAutosize',\n                inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n                host: {\n                    'class': 'cdk-textarea-autosize mat-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1'\n                }\n            }]\n    }], null, { matAutosizeMinRows: [{\n            type: Input\n        }], matAutosizeMaxRows: [{\n            type: Input\n        }], matAutosize: [{\n            type: Input,\n            args: ['mat-autosize']\n        }], matTextareaAutosize: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\nlet nextUniqueId = 0;\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nconst _MatInputBase = mixinErrorState(class {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n});\n/** Directive that allows a native input to work inside a `MatFormField`. */\nclass MatInput extends _MatInputBase {\n    constructor(_elementRef, _platform, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone, \n    // TODO: Remove this once the legacy appearance has been removed. We only need\n    // to inject the form-field for determining whether the placeholder has been promoted.\n    _formField) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._autofillMonitor = _autofillMonitor;\n        this._formField = _formField;\n        this._uid = `mat-input-${nextUniqueId++}`;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.autofilled = false;\n        this._disabled = false;\n        this._required = false;\n        this._type = 'text';\n        this._readonly = false;\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week'\n        ].filter(t => getSupportedInputTypes().has(t));\n        const element = this._elementRef.nativeElement;\n        const nodeName = element.nodeName.toLowerCase();\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || element;\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            ngZone.runOutsideAngular(() => {\n                _elementRef.nativeElement.addEventListener('keyup', (event) => {\n                    const el = event.target;\n                    // Note: We specifically check for 0, rather than `!el.selectionStart`, because the two\n                    // indicate different things. If the value is 0, it means that the caret is at the start\n                    // of the input, whereas a value of `null` means that the input doesn't support\n                    // manipulating the selection range. Inputs that don't support setting the selection range\n                    // will throw an error so we want to avoid calling `setSelectionRange` on them. See:\n                    // https://html.spec.whatwg.org/multipage/input.html#do-not-apply\n                    if (!el.value && el.selectionStart === 0 && el.selectionEnd === 0) {\n                        // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                        // `1, 1` fixes it for the first time that you type text and\n                        // then hold delete. Toggling to `1, 1` and then back to\n                        // `0, 0` seems to completely fix it.\n                        el.setSelectionRange(1, 1);\n                        el.setSelectionRange(0, 0);\n                    }\n                });\n            });\n        }\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = nodeName === 'select';\n        this._isTextarea = nodeName === 'textarea';\n        this._isInFormField = !!_formField;\n        if (this._isNativeSelect) {\n            this.controlType = element.multiple ? 'mat-native-select-multiple' :\n                'mat-native-select';\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() { return this._id; }\n    set id(value) { this._id = value || this._uid; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() { return this._required; }\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /** Input type of the element. */\n    get type() { return this._type; }\n    set type(value) {\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() { return this._inputValueAccessor.value; }\n    set value(value) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n    /** Whether the element is readonly. */\n    get readonly() { return this._readonly; }\n    set readonly(value) { this._readonly = coerceBooleanProperty(value); }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            });\n        }\n    }\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n        // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n        // present or not depends on a query which is prone to \"changed after checked\" errors.\n        this._dirtyCheckPlaceholder();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    /** Callback for the cases where the focused state of the input changes. */\n    // tslint:disable:no-host-decorator-in-concrete\n    // tslint:enable:no-host-decorator-in-concrete\n    _focusChanged(isFocused) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n    _dirtyCheckPlaceholder() {\n        var _a, _b;\n        // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n        // screen readers will read it out twice: once from the label and once from the attribute.\n        // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n        // the only one that supports promoting the placeholder to a label.\n        const placeholder = ((_b = (_a = this._formField) === null || _a === void 0 ? void 0 : _a._hideControlPlaceholder) === null || _b === void 0 ? void 0 : _b.call(_a)) ? null : this.placeholder;\n        if (placeholder !== this._previousPlaceholder) {\n            const element = this._elementRef.nativeElement;\n            this._previousPlaceholder = placeholder;\n            placeholder ?\n                element.setAttribute('placeholder', placeholder) : element.removeAttribute('placeholder');\n        }\n    }\n    /** Does some manual dirty checking on the native input `value` property. */\n    _dirtyCheckNativeValue() {\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /** Make sure the input is a supported type. */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /** Checks whether the input type is one of the types that are never empty. */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /** Checks whether the input is invalid based on the native validation. */\n    _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        let validity = this._elementRef.nativeElement.validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n            !this.autofilled;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            // For a single-selection `<select>`, the label should float when the selected option has\n            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n            // overlapping the label with the options.\n            const selectElement = this._elementRef.nativeElement;\n            const firstOption = selectElement.options[0];\n            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n            return this.focused || selectElement.multiple || !this.empty ||\n                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n        }\n        else {\n            return this.focused || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n    /** Whether the form control is a native select that is displayed inline. */\n    _isInlineSelect() {\n        const element = this._elementRef.nativeElement;\n        return this._isNativeSelect && (element.multiple || element.size > 1);\n    }\n}\nMatInput.ɵfac = function MatInput_Factory(t) { return new (t || MatInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(MAT_INPUT_VALUE_ACCESSOR, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AutofillMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8)); };\nMatInput.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatInput, selectors: [[\"input\", \"matInput\", \"\"], [\"textarea\", \"matInput\", \"\"], [\"select\", \"matNativeControl\", \"\"], [\"input\", \"matNativeControl\", \"\"], [\"textarea\", \"matNativeControl\", \"\"]], hostAttrs: [1, \"mat-input-element\", \"mat-form-field-autofill-control\"], hostVars: 11, hostBindings: function MatInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatInput_focus_HostBindingHandler() { return ctx._focusChanged(true); })(\"blur\", function MatInput_blur_HostBindingHandler() { return ctx._focusChanged(false); })(\"input\", function MatInput_input_HostBindingHandler() { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"data-placeholder\", ctx.placeholder)(\"readonly\", ctx.readonly && !ctx._isNativeSelect || null)(\"aria-invalid\", ctx.empty && ctx.required ? null : ctx.errorState)(\"aria-required\", ctx.required);\n        ɵngcc0.ɵɵclassProp(\"mat-input-server\", ctx._isServer)(\"mat-native-select-inline\", ctx._isInlineSelect());\n    } }, inputs: { id: \"id\", disabled: \"disabled\", required: \"required\", type: \"type\", value: \"value\", readonly: \"readonly\", placeholder: \"placeholder\", errorStateMatcher: \"errorStateMatcher\", userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"] }, exportAs: [\"matInput\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatInput }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nMatInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [MAT_INPUT_VALUE_ACCESSOR,] }] },\n    { type: AutofillMonitor },\n    { type: NgZone },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }] }\n];\nMatInput.propDecorators = {\n    disabled: [{ type: Input }],\n    id: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    type: [{ type: Input }],\n    errorStateMatcher: [{ type: Input }],\n    userAriaDescribedBy: [{ type: Input, args: ['aria-describedby',] }],\n    value: [{ type: Input }],\n    readonly: [{ type: Input }],\n    _focusChanged: [{ type: HostListener, args: ['focus', ['true'],] }, { type: HostListener, args: ['blur', ['false'],] }],\n    _onInput: [{ type: HostListener, args: ['input',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatInput, [{\n        type: Directive,\n        args: [{\n                selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                exportAs: 'matInput',\n                host: {\n                    /**\n                     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n                     */\n                    'class': 'mat-input-element mat-form-field-autofill-control',\n                    '[class.mat-input-server]': '_isServer',\n                    // Native input properties that are overwritten by Angular inputs need to be synced with\n                    // the native input element. Otherwise property bindings for those don't work.\n                    '[attr.id]': 'id',\n                    // At the time of writing, we have a lot of customer tests that look up the input based on its\n                    // placeholder. Since we sometimes omit the placeholder attribute from the DOM to prevent screen\n                    // readers from reading it twice, we have to keep it somewhere in the DOM for the lookup.\n                    '[attr.data-placeholder]': 'placeholder',\n                    '[disabled]': 'disabled',\n                    '[required]': 'required',\n                    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                    '[class.mat-native-select-inline]': '_isInlineSelect()',\n                    // Only mark the input as invalid for assistive technology if it has a value since the\n                    // state usually overlaps with `aria-required` when the input is empty and can be redundant.\n                    '[attr.aria-invalid]': '(empty && required) ? null : errorState',\n                    '[attr.aria-required]': 'required'\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatInput }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc2.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }, { type: ɵngcc2.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.ErrorStateMatcher }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [MAT_INPUT_VALUE_ACCESSOR]\n            }] }, { type: ɵngcc4.AutofillMonitor }, { type: ɵngcc0.NgZone }, { type: ɵngcc5.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }] }]; }, { id: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], type: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], readonly: [{\n            type: Input\n        }], \n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    /** Callback for the cases where the focused state of the input changes. */\n    // tslint:disable:no-host-decorator-in-concrete\n    // tslint:enable:no-host-decorator-in-concrete\n    _focusChanged: [{\n            type: HostListener,\n            args: ['focus', ['true']]\n        }, {\n            type: HostListener,\n            args: ['blur', ['false']]\n        }], \n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _onInput: [{\n            type: HostListener,\n            args: ['input']\n        }], placeholder: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }], userAriaDescribedBy: [{\n            type: Input,\n            args: ['aria-describedby']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatInputModule {\n}\nMatInputModule.ɵfac = function MatInputModule_Factory(t) { return new (t || MatInputModule)(); };\nMatInputModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatInputModule });\nMatInputModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [ErrorStateMatcher], imports: [TextFieldModule,\n        MatFormFieldModule,\n        MatCommonModule, TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatInputModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [MatInput, MatTextareaAutosize],\n                imports: [\n                    TextFieldModule,\n                    MatFormFieldModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    TextFieldModule,\n                    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n                    // be used together with `MatFormField`.\n                    MatFormFieldModule,\n                    MatInput,\n                    MatTextareaAutosize,\n                ],\n                providers: [ErrorStateMatcher]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatInputModule, { declarations: function () { return [MatInput, MatTextareaAutosize]; }, imports: function () { return [TextFieldModule,\n        MatFormFieldModule,\n        MatCommonModule]; }, exports: function () { return [TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule, MatInput, MatTextareaAutosize]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, MatTextareaAutosize, getMatInputUnsupportedTypeError };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}