{"ast":null,"code":"import { coerceNumberProperty, coerceElement, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, forwardRef, Input, Injectable, NgZone, Optional, Inject, ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, Output, ViewChild, ViewContainerRef, TemplateRef, IterableDiffers, SkipSelf, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\nimport { Platform, getRtlScrollAxisType, supportsScrollBehavior, PlatformModule } from '@angular/cdk/platform';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { isDataSource, ArrayDataSource, _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy } from '@angular/cdk/collections';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The injection token used to specify the virtual scrolling strategy. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/cdk/collections';\nconst _c0 = [\"contentWrapper\"];\nconst _c1 = [\"*\"];\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Virtual scrolling strategy for lists with items of known fixed size. */\n\nclass FixedSizeVirtualScrollStrategy {\n  /**\n   * @param itemSize The size of the items in the virtually scrolling list.\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  constructor(itemSize, minBufferPx, maxBufferPx) {\n    this._scrolledIndexChange = new Subject();\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n\n    this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n    /** The attached viewport. */\n\n    this._viewport = null;\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n  }\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param viewport The viewport to attach this strategy to.\n   */\n\n\n  attach(viewport) {\n    this._viewport = viewport;\n\n    this._updateTotalContentSize();\n\n    this._updateRenderedRange();\n  }\n  /** Detaches this scroll strategy from the currently attached viewport. */\n\n\n  detach() {\n    this._scrolledIndexChange.complete();\n\n    this._viewport = null;\n  }\n  /**\n   * Update the item size and buffer size.\n   * @param itemSize The size of the items in the virtually scrolling list.\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n\n\n  updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n    if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n    }\n\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n\n    this._updateTotalContentSize();\n\n    this._updateRenderedRange();\n  }\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n\n\n  onContentScrolled() {\n    this._updateRenderedRange();\n  }\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n\n\n  onDataLengthChanged() {\n    this._updateTotalContentSize();\n\n    this._updateRenderedRange();\n  }\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n\n\n  onContentRendered() {}\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n\n\n  onRenderedOffsetChanged() {}\n  /**\n   * Scroll to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling.\n   */\n\n\n  scrollToIndex(index, behavior) {\n    if (this._viewport) {\n      this._viewport.scrollToOffset(index * this._itemSize, behavior);\n    }\n  }\n  /** Update the viewport's total content size. */\n\n\n  _updateTotalContentSize() {\n    if (!this._viewport) {\n      return;\n    }\n\n    this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n  }\n  /** Update the viewport's rendered range. */\n\n\n  _updateRenderedRange() {\n    if (!this._viewport) {\n      return;\n    }\n\n    const renderedRange = this._viewport.getRenderedRange();\n\n    const newRange = {\n      start: renderedRange.start,\n      end: renderedRange.end\n    };\n\n    const viewportSize = this._viewport.getViewportSize();\n\n    const dataLength = this._viewport.getDataLength();\n\n    let scrollOffset = this._viewport.measureScrollOffset(); // Prevent NaN as result when dividing by zero.\n\n\n    let firstVisibleIndex = this._itemSize > 0 ? scrollOffset / this._itemSize : 0; // If user scrolls to the bottom of the list and data changes to a smaller list\n\n    if (newRange.end > dataLength) {\n      // We have to recalculate the first visible index based on new data length and viewport size.\n      const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n      const newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems)); // If first visible index changed we must update scroll offset to handle start/end buffers\n      // Current range must also be adjusted to cover the new position (bottom of new list).\n\n      if (firstVisibleIndex != newVisibleIndex) {\n        firstVisibleIndex = newVisibleIndex;\n        scrollOffset = newVisibleIndex * this._itemSize;\n        newRange.start = Math.floor(firstVisibleIndex);\n      }\n\n      newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n    }\n\n    const startBuffer = scrollOffset - newRange.start * this._itemSize;\n\n    if (startBuffer < this._minBufferPx && newRange.start != 0) {\n      const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n      newRange.start = Math.max(0, newRange.start - expandStart);\n      newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n    } else {\n      const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n\n      if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n        const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n\n        if (expandEnd > 0) {\n          newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n          newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n        }\n      }\n    }\n\n    this._viewport.setRenderedRange(newRange);\n\n    this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n\n    this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n  }\n\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\n\n\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n  return fixedSizeDir._scrollStrategy;\n}\n/** A virtual scroll strategy that supports fixed-size items. */\n\n\nclass CdkFixedSizeVirtualScroll {\n  constructor() {\n    this._itemSize = 20;\n    this._minBufferPx = 100;\n    this._maxBufferPx = 200;\n    /** The scroll strategy used by this directive. */\n\n    this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n  }\n  /** The size of the items in the list (in pixels). */\n\n\n  get itemSize() {\n    return this._itemSize;\n  }\n\n  set itemSize(value) {\n    this._itemSize = coerceNumberProperty(value);\n  }\n  /**\n   * The minimum amount of buffer rendered beyond the viewport (in pixels).\n   * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n   */\n\n\n  get minBufferPx() {\n    return this._minBufferPx;\n  }\n\n  set minBufferPx(value) {\n    this._minBufferPx = coerceNumberProperty(value);\n  }\n  /**\n   * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n   */\n\n\n  get maxBufferPx() {\n    return this._maxBufferPx;\n  }\n\n  set maxBufferPx(value) {\n    this._maxBufferPx = coerceNumberProperty(value);\n  }\n\n  ngOnChanges() {\n    this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n  }\n\n}\n\nCdkFixedSizeVirtualScroll.ɵfac = function CdkFixedSizeVirtualScroll_Factory(t) {\n  return new (t || CdkFixedSizeVirtualScroll)();\n};\n\nCdkFixedSizeVirtualScroll.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkFixedSizeVirtualScroll,\n  selectors: [[\"cdk-virtual-scroll-viewport\", \"itemSize\", \"\"]],\n  inputs: {\n    itemSize: \"itemSize\",\n    minBufferPx: \"minBufferPx\",\n    maxBufferPx: \"maxBufferPx\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: VIRTUAL_SCROLL_STRATEGY,\n    useFactory: _fixedSizeVirtualScrollStrategyFactory,\n    deps: [forwardRef(() => CdkFixedSizeVirtualScroll)]\n  }]), ɵngcc0.ɵɵNgOnChangesFeature]\n});\nCdkFixedSizeVirtualScroll.propDecorators = {\n  itemSize: [{\n    type: Input\n  }],\n  minBufferPx: [{\n    type: Input\n  }],\n  maxBufferPx: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFixedSizeVirtualScroll, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-virtual-scroll-viewport[itemSize]',\n      providers: [{\n        provide: VIRTUAL_SCROLL_STRATEGY,\n        useFactory: _fixedSizeVirtualScrollStrategyFactory,\n        deps: [forwardRef(() => CdkFixedSizeVirtualScroll)]\n      }]\n    }]\n  }], function () {\n    return [];\n  }, {\n    itemSize: [{\n      type: Input\n    }],\n    minBufferPx: [{\n      type: Input\n    }],\n    maxBufferPx: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Time in ms to throttle the scrolling events by default. */\n\n\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\n\nclass ScrollDispatcher {\n  constructor(_ngZone, _platform, document) {\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n\n    this._scrolled = new Subject();\n    /** Keeps track of the global `scroll` and `resize` subscriptions. */\n\n    this._globalSubscription = null;\n    /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n\n    this._scrolledCount = 0;\n    /**\n     * Map of all the scrollable references that are registered with the service and their\n     * scroll event subscriptions.\n     */\n\n    this.scrollContainers = new Map();\n    this._document = document;\n  }\n  /**\n   * Registers a scrollable instance with the service and listens for its scrolled events. When the\n   * scrollable is scrolled, the service emits the event to its scrolled observable.\n   * @param scrollable Scrollable instance to be registered.\n   */\n\n\n  register(scrollable) {\n    if (!this.scrollContainers.has(scrollable)) {\n      this.scrollContainers.set(scrollable, scrollable.elementScrolled().subscribe(() => this._scrolled.next(scrollable)));\n    }\n  }\n  /**\n   * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n   * @param scrollable Scrollable instance to be deregistered.\n   */\n\n\n  deregister(scrollable) {\n    const scrollableReference = this.scrollContainers.get(scrollable);\n\n    if (scrollableReference) {\n      scrollableReference.unsubscribe();\n      this.scrollContainers.delete(scrollable);\n    }\n  }\n  /**\n   * Returns an observable that emits an event whenever any of the registered Scrollable\n   * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n   * to override the default \"throttle\" time.\n   *\n   * **Note:** in order to avoid hitting change detection for every scroll event,\n   * all of the events emitted from this stream will be run outside the Angular zone.\n   * If you need to update any data bindings as a result of a scroll event, you have\n   * to run the callback using `NgZone.run`.\n   */\n\n\n  scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n    if (!this._platform.isBrowser) {\n      return of();\n    }\n\n    return new Observable(observer => {\n      if (!this._globalSubscription) {\n        this._addGlobalListener();\n      } // In the case of a 0ms delay, use an observable without auditTime\n      // since it does add a perceptible delay in processing overhead.\n\n\n      const subscription = auditTimeInMs > 0 ? this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) : this._scrolled.subscribe(observer);\n      this._scrolledCount++;\n      return () => {\n        subscription.unsubscribe();\n        this._scrolledCount--;\n\n        if (!this._scrolledCount) {\n          this._removeGlobalListener();\n        }\n      };\n    });\n  }\n\n  ngOnDestroy() {\n    this._removeGlobalListener();\n\n    this.scrollContainers.forEach((_, container) => this.deregister(container));\n\n    this._scrolled.complete();\n  }\n  /**\n   * Returns an observable that emits whenever any of the\n   * scrollable ancestors of an element are scrolled.\n   * @param elementOrElementRef Element whose ancestors to listen for.\n   * @param auditTimeInMs Time to throttle the scroll events.\n   */\n\n\n  ancestorScrolled(elementOrElementRef, auditTimeInMs) {\n    const ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n    return this.scrolled(auditTimeInMs).pipe(filter(target => {\n      return !target || ancestors.indexOf(target) > -1;\n    }));\n  }\n  /** Returns all registered Scrollables that contain the provided element. */\n\n\n  getAncestorScrollContainers(elementOrElementRef) {\n    const scrollingContainers = [];\n    this.scrollContainers.forEach((_subscription, scrollable) => {\n      if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {\n        scrollingContainers.push(scrollable);\n      }\n    });\n    return scrollingContainers;\n  }\n  /** Use defaultView of injected document if available or fallback to global window reference */\n\n\n  _getWindow() {\n    return this._document.defaultView || window;\n  }\n  /** Returns true if the element is contained within the provided Scrollable. */\n\n\n  _scrollableContainsElement(scrollable, elementOrElementRef) {\n    let element = coerceElement(elementOrElementRef);\n    let scrollableElement = scrollable.getElementRef().nativeElement; // Traverse through the element parents until we reach null, checking if any of the elements\n    // are the scrollable's element.\n\n    do {\n      if (element == scrollableElement) {\n        return true;\n      }\n    } while (element = element.parentElement);\n\n    return false;\n  }\n  /** Sets up the global scroll listeners. */\n\n\n  _addGlobalListener() {\n    this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n      const window = this._getWindow();\n\n      return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n    });\n  }\n  /** Cleans up the global scroll listener. */\n\n\n  _removeGlobalListener() {\n    if (this._globalSubscription) {\n      this._globalSubscription.unsubscribe();\n\n      this._globalSubscription = null;\n    }\n  }\n\n}\n\nScrollDispatcher.ɵfac = function ScrollDispatcher_Factory(t) {\n  return new (t || ScrollDispatcher)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(DOCUMENT, 8));\n};\n\nScrollDispatcher.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function ScrollDispatcher_Factory() {\n    return new ScrollDispatcher(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i2.DOCUMENT, 8));\n  },\n  token: ScrollDispatcher,\n  providedIn: \"root\"\n});\n\nScrollDispatcher.ctorParameters = () => [{\n  type: NgZone\n}, {\n  type: Platform\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\n\n\nclass CdkScrollable {\n  constructor(elementRef, scrollDispatcher, ngZone, dir) {\n    this.elementRef = elementRef;\n    this.scrollDispatcher = scrollDispatcher;\n    this.ngZone = ngZone;\n    this.dir = dir;\n    this._destroyed = new Subject();\n    this._elementScrolled = new Observable(observer => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this._destroyed)).subscribe(observer)));\n  }\n\n  ngOnInit() {\n    this.scrollDispatcher.register(this);\n  }\n\n  ngOnDestroy() {\n    this.scrollDispatcher.deregister(this);\n\n    this._destroyed.next();\n\n    this._destroyed.complete();\n  }\n  /** Returns observable that emits when a scroll event is fired on the host element. */\n\n\n  elementScrolled() {\n    return this._elementScrolled;\n  }\n  /** Gets the ElementRef for the viewport. */\n\n\n  getElementRef() {\n    return this.elementRef;\n  }\n  /**\n   * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n   * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n   * left and right always refer to the left and right side of the scrolling container irrespective\n   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n   * in an RTL context.\n   * @param options specified the offsets to scroll to.\n   */\n\n\n  scrollTo(options) {\n    const el = this.elementRef.nativeElement;\n    const isRtl = this.dir && this.dir.value == 'rtl'; // Rewrite start & end offsets as right or left offsets.\n\n    if (options.left == null) {\n      options.left = isRtl ? options.end : options.start;\n    }\n\n    if (options.right == null) {\n      options.right = isRtl ? options.start : options.end;\n    } // Rewrite the bottom offset as a top offset.\n\n\n    if (options.bottom != null) {\n      options.top = el.scrollHeight - el.clientHeight - options.bottom;\n    } // Rewrite the right offset as a left offset.\n\n\n    if (isRtl && getRtlScrollAxisType() != 0\n    /* NORMAL */\n    ) {\n      if (options.left != null) {\n        options.right = el.scrollWidth - el.clientWidth - options.left;\n      }\n\n      if (getRtlScrollAxisType() == 2\n      /* INVERTED */\n      ) {\n        options.left = options.right;\n      } else if (getRtlScrollAxisType() == 1\n      /* NEGATED */\n      ) {\n        options.left = options.right ? -options.right : options.right;\n      }\n    } else {\n      if (options.right != null) {\n        options.left = el.scrollWidth - el.clientWidth - options.right;\n      }\n    }\n\n    this._applyScrollToOptions(options);\n  }\n\n  _applyScrollToOptions(options) {\n    const el = this.elementRef.nativeElement;\n\n    if (supportsScrollBehavior()) {\n      el.scrollTo(options);\n    } else {\n      if (options.top != null) {\n        el.scrollTop = options.top;\n      }\n\n      if (options.left != null) {\n        el.scrollLeft = options.left;\n      }\n    }\n  }\n  /**\n   * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n   * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n   * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n   * left and right always refer to the left and right side of the scrolling container irrespective\n   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n   * in an RTL context.\n   * @param from The edge to measure from.\n   */\n\n\n  measureScrollOffset(from) {\n    const LEFT = 'left';\n    const RIGHT = 'right';\n    const el = this.elementRef.nativeElement;\n\n    if (from == 'top') {\n      return el.scrollTop;\n    }\n\n    if (from == 'bottom') {\n      return el.scrollHeight - el.clientHeight - el.scrollTop;\n    } // Rewrite start & end as left or right offsets.\n\n\n    const isRtl = this.dir && this.dir.value == 'rtl';\n\n    if (from == 'start') {\n      from = isRtl ? RIGHT : LEFT;\n    } else if (from == 'end') {\n      from = isRtl ? LEFT : RIGHT;\n    }\n\n    if (isRtl && getRtlScrollAxisType() == 2\n    /* INVERTED */\n    ) {\n      // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n      // 0 when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollWidth - el.clientWidth - el.scrollLeft;\n      } else {\n        return el.scrollLeft;\n      }\n    } else if (isRtl && getRtlScrollAxisType() == 1\n    /* NEGATED */\n    ) {\n      // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n      // 0 when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollLeft + el.scrollWidth - el.clientWidth;\n      } else {\n        return -el.scrollLeft;\n      }\n    } else {\n      // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n      // (scrollWidth - clientWidth) when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollLeft;\n      } else {\n        return el.scrollWidth - el.clientWidth - el.scrollLeft;\n      }\n    }\n  }\n\n}\n\nCdkScrollable.ɵfac = function CdkScrollable_Factory(t) {\n  return new (t || CdkScrollable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8));\n};\n\nCdkScrollable.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkScrollable,\n  selectors: [[\"\", \"cdk-scrollable\", \"\"], [\"\", \"cdkScrollable\", \"\"]]\n});\n\nCdkScrollable.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: ScrollDispatcher\n}, {\n  type: NgZone\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkScrollable, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-scrollable], [cdkScrollable]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ScrollDispatcher\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Time in ms to throttle the resize events by default. */\n\n\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\n\nclass ViewportRuler {\n  constructor(_platform, ngZone, document) {\n    this._platform = _platform;\n    /** Stream of viewport change events. */\n\n    this._change = new Subject();\n    /** Event listener that will be used to handle the viewport change events. */\n\n    this._changeListener = event => {\n      this._change.next(event);\n    };\n\n    this._document = document;\n    ngZone.runOutsideAngular(() => {\n      if (_platform.isBrowser) {\n        const window = this._getWindow(); // Note that bind the events ourselves, rather than going through something like RxJS's\n        // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n\n\n        window.addEventListener('resize', this._changeListener);\n        window.addEventListener('orientationchange', this._changeListener);\n      } // Clear the cached position so that the viewport is re-measured next time it is required.\n      // We don't need to keep track of the subscription, because it is completed on destroy.\n\n\n      this.change().subscribe(() => this._viewportSize = null);\n    });\n  }\n\n  ngOnDestroy() {\n    if (this._platform.isBrowser) {\n      const window = this._getWindow();\n\n      window.removeEventListener('resize', this._changeListener);\n      window.removeEventListener('orientationchange', this._changeListener);\n    }\n\n    this._change.complete();\n  }\n  /** Returns the viewport's width and height. */\n\n\n  getViewportSize() {\n    if (!this._viewportSize) {\n      this._updateViewportSize();\n    }\n\n    const output = {\n      width: this._viewportSize.width,\n      height: this._viewportSize.height\n    }; // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n\n    if (!this._platform.isBrowser) {\n      this._viewportSize = null;\n    }\n\n    return output;\n  }\n  /** Gets a ClientRect for the viewport's bounds. */\n\n\n  getViewportRect() {\n    // Use the document element's bounding rect rather than the window scroll properties\n    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n    // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n    // can disagree when the page is pinch-zoomed (on devices that support touch).\n    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n    // We use the documentElement instead of the body because, by default (without a css reset)\n    // browsers typically give the document body an 8px margin, which is not included in\n    // getBoundingClientRect().\n    const scrollPosition = this.getViewportScrollPosition();\n    const {\n      width,\n      height\n    } = this.getViewportSize();\n    return {\n      top: scrollPosition.top,\n      left: scrollPosition.left,\n      bottom: scrollPosition.top + height,\n      right: scrollPosition.left + width,\n      height,\n      width\n    };\n  }\n  /** Gets the (top, left) scroll position of the viewport. */\n\n\n  getViewportScrollPosition() {\n    // While we can get a reference to the fake document\n    // during SSR, it doesn't have getBoundingClientRect.\n    if (!this._platform.isBrowser) {\n      return {\n        top: 0,\n        left: 0\n      };\n    } // The top-left-corner of the viewport is determined by the scroll position of the document\n    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n    // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n    // `document.documentElement` works consistently, where the `top` and `left` values will\n    // equal negative the scroll position.\n\n\n    const document = this._document;\n\n    const window = this._getWindow();\n\n    const documentElement = document.documentElement;\n    const documentRect = documentElement.getBoundingClientRect();\n    const top = -documentRect.top || document.body.scrollTop || window.scrollY || documentElement.scrollTop || 0;\n    const left = -documentRect.left || document.body.scrollLeft || window.scrollX || documentElement.scrollLeft || 0;\n    return {\n      top,\n      left\n    };\n  }\n  /**\n   * Returns a stream that emits whenever the size of the viewport changes.\n   * This stream emits outside of the Angular zone.\n   * @param throttleTime Time in milliseconds to throttle the stream.\n   */\n\n\n  change(throttleTime = DEFAULT_RESIZE_TIME) {\n    return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n  }\n  /** Use defaultView of injected document if available or fallback to global window reference */\n\n\n  _getWindow() {\n    return this._document.defaultView || window;\n  }\n  /** Updates the cached viewport size. */\n\n\n  _updateViewportSize() {\n    const window = this._getWindow();\n\n    this._viewportSize = this._platform.isBrowser ? {\n      width: window.innerWidth,\n      height: window.innerHeight\n    } : {\n      width: 0,\n      height: 0\n    };\n  }\n\n}\n\nViewportRuler.ɵfac = function ViewportRuler_Factory(t) {\n  return new (t || ViewportRuler)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT, 8));\n};\n\nViewportRuler.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function ViewportRuler_Factory() {\n    return new ViewportRuler(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.DOCUMENT, 8));\n  },\n  token: ViewportRuler,\n  providedIn: \"root\"\n});\n\nViewportRuler.ctorParameters = () => [{\n  type: Platform\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ViewportRuler, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Platform\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Checks if the given ranges are equal. */\n\n\nfunction rangesEqual(r1, r2) {\n  return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\n\n\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\n\nclass CdkVirtualScrollViewport extends CdkScrollable {\n  constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, viewportRuler) {\n    super(elementRef, scrollDispatcher, ngZone, dir);\n    this.elementRef = elementRef;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._scrollStrategy = _scrollStrategy;\n    /** Emits when the viewport is detached from a CdkVirtualForOf. */\n\n    this._detachedSubject = new Subject();\n    /** Emits when the rendered range changes. */\n\n    this._renderedRangeSubject = new Subject();\n    this._orientation = 'vertical';\n    this._appendOnly = false; // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n    // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n    // depending on how the strategy calculates the scrolled index, it may come at a cost to\n    // performance.\n\n    /** Emits when the index of the first element visible in the viewport changes. */\n\n    this.scrolledIndexChange = new Observable(observer => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n    /** A stream that emits whenever the rendered range changes. */\n\n    this.renderedRangeStream = this._renderedRangeSubject;\n    /**\n     * The total size of all content (in pixels), including content that is not currently rendered.\n     */\n\n    this._totalContentSize = 0;\n    /** A string representing the `style.width` property value to be used for the spacer element. */\n\n    this._totalContentWidth = '';\n    /** A string representing the `style.height` property value to be used for the spacer element. */\n\n    this._totalContentHeight = '';\n    /** The currently rendered range of indices. */\n\n    this._renderedRange = {\n      start: 0,\n      end: 0\n    };\n    /** The length of the data bound to this viewport (in number of items). */\n\n    this._dataLength = 0;\n    /** The size of the viewport (in pixels). */\n\n    this._viewportSize = 0;\n    /** The last rendered content offset that was set. */\n\n    this._renderedContentOffset = 0;\n    /**\n     * Whether the last rendered content offset was to the end of the content (and therefore needs to\n     * be rewritten as an offset to the start of the content).\n     */\n\n    this._renderedContentOffsetNeedsRewrite = false;\n    /** Whether there is a pending change detection cycle. */\n\n    this._isChangeDetectionPending = false;\n    /** A list of functions to run after the next change detection cycle. */\n\n    this._runAfterChangeDetection = [];\n    /** Subscription to changes in the viewport size. */\n\n    this._viewportChanges = Subscription.EMPTY;\n\n    if (!_scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n    }\n\n    this._viewportChanges = viewportRuler.change().subscribe(() => {\n      this.checkViewportSize();\n    });\n  }\n  /** The direction the viewport scrolls. */\n\n\n  get orientation() {\n    return this._orientation;\n  }\n\n  set orientation(orientation) {\n    if (this._orientation !== orientation) {\n      this._orientation = orientation;\n\n      this._calculateSpacerSize();\n    }\n  }\n  /**\n   * Whether rendered items should persist in the DOM after scrolling out of view. By default, items\n   * will be removed.\n   */\n\n\n  get appendOnly() {\n    return this._appendOnly;\n  }\n\n  set appendOnly(value) {\n    this._appendOnly = coerceBooleanProperty(value);\n  }\n\n  ngOnInit() {\n    super.ngOnInit(); // It's still too early to measure the viewport at this point. Deferring with a promise allows\n    // the Viewport to be rendered with the correct size before we measure. We run this outside the\n    // zone to avoid causing more change detection cycles. We handle the change detection loop\n    // ourselves instead.\n\n    this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n      this._measureViewportSize();\n\n      this._scrollStrategy.attach(this);\n\n      this.elementScrolled().pipe( // Start off with a fake scroll event so we properly detect our initial position.\n      startWith(null), // Collect multiple events into one until the next animation frame. This way if\n      // there are multiple scroll events in the same frame we only need to recheck\n      // our layout once.\n      auditTime(0, SCROLL_SCHEDULER)).subscribe(() => this._scrollStrategy.onContentScrolled());\n\n      this._markChangeDetectionNeeded();\n    }));\n  }\n\n  ngOnDestroy() {\n    this.detach();\n\n    this._scrollStrategy.detach(); // Complete all subjects\n\n\n    this._renderedRangeSubject.complete();\n\n    this._detachedSubject.complete();\n\n    this._viewportChanges.unsubscribe();\n\n    super.ngOnDestroy();\n  }\n  /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n\n\n  attach(forOf) {\n    if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('CdkVirtualScrollViewport is already attached.');\n    } // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n    // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n    // change detection loop ourselves.\n\n\n    this.ngZone.runOutsideAngular(() => {\n      this._forOf = forOf;\n\n      this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n        const newLength = data.length;\n\n        if (newLength !== this._dataLength) {\n          this._dataLength = newLength;\n\n          this._scrollStrategy.onDataLengthChanged();\n        }\n\n        this._doChangeDetection();\n      });\n    });\n  }\n  /** Detaches the current `CdkVirtualForOf`. */\n\n\n  detach() {\n    this._forOf = null;\n\n    this._detachedSubject.next();\n  }\n  /** Gets the length of the data bound to this viewport (in number of items). */\n\n\n  getDataLength() {\n    return this._dataLength;\n  }\n  /** Gets the size of the viewport (in pixels). */\n\n\n  getViewportSize() {\n    return this._viewportSize;\n  } // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n  // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n  // setting it to something else, but its error prone and should probably be split into\n  // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n\n  /** Get the current rendered range of items. */\n\n\n  getRenderedRange() {\n    return this._renderedRange;\n  }\n  /**\n   * Sets the total size of all content (in pixels), including content that is not currently\n   * rendered.\n   */\n\n\n  setTotalContentSize(size) {\n    if (this._totalContentSize !== size) {\n      this._totalContentSize = size;\n\n      this._calculateSpacerSize();\n\n      this._markChangeDetectionNeeded();\n    }\n  }\n  /** Sets the currently rendered range of indices. */\n\n\n  setRenderedRange(range) {\n    if (!rangesEqual(this._renderedRange, range)) {\n      if (this.appendOnly) {\n        range = {\n          start: 0,\n          end: Math.max(this._renderedRange.end, range.end)\n        };\n      }\n\n      this._renderedRangeSubject.next(this._renderedRange = range);\n\n      this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n    }\n  }\n  /**\n   * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n   */\n\n\n  getOffsetToRenderedContentStart() {\n    return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n  }\n  /**\n   * Sets the offset from the start of the viewport to either the start or end of the rendered data\n   * (in pixels).\n   */\n\n\n  setRenderedContentOffset(offset, to = 'to-start') {\n    // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n    // in the negative direction.\n    const isRtl = this.dir && this.dir.value == 'rtl';\n    const isHorizontal = this.orientation == 'horizontal';\n    const axis = isHorizontal ? 'X' : 'Y';\n    const axisDirection = isHorizontal && isRtl ? -1 : 1;\n    let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n    this._renderedContentOffset = offset;\n\n    if (to === 'to-end') {\n      transform += ` translate${axis}(-100%)`; // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n      // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n      // expand upward).\n\n      this._renderedContentOffsetNeedsRewrite = true;\n    }\n\n    if (this._renderedContentTransform != transform) {\n      // We know this value is safe because we parse `offset` with `Number()` before passing it\n      // into the string.\n      this._renderedContentTransform = transform;\n\n      this._markChangeDetectionNeeded(() => {\n        if (this._renderedContentOffsetNeedsRewrite) {\n          this._renderedContentOffset -= this.measureRenderedContentSize();\n          this._renderedContentOffsetNeedsRewrite = false;\n          this.setRenderedContentOffset(this._renderedContentOffset);\n        } else {\n          this._scrollStrategy.onRenderedOffsetChanged();\n        }\n      });\n    }\n  }\n  /**\n   * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n   * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n   * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n   * @param offset The offset to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n   */\n\n\n  scrollToOffset(offset, behavior = 'auto') {\n    const options = {\n      behavior\n    };\n\n    if (this.orientation === 'horizontal') {\n      options.start = offset;\n    } else {\n      options.top = offset;\n    }\n\n    this.scrollTo(options);\n  }\n  /**\n   * Scrolls to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n   */\n\n\n  scrollToIndex(index, behavior = 'auto') {\n    this._scrollStrategy.scrollToIndex(index, behavior);\n  }\n  /**\n   * Gets the current scroll offset from the start of the viewport (in pixels).\n   * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n   *     in horizontal mode.\n   */\n\n\n  measureScrollOffset(from) {\n    return from ? super.measureScrollOffset(from) : super.measureScrollOffset(this.orientation === 'horizontal' ? 'start' : 'top');\n  }\n  /** Measure the combined size of all of the rendered items. */\n\n\n  measureRenderedContentSize() {\n    const contentEl = this._contentWrapper.nativeElement;\n    return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n  }\n  /**\n   * Measure the total combined size of the given range. Throws if the range includes items that are\n   * not rendered.\n   */\n\n\n  measureRangeSize(range) {\n    if (!this._forOf) {\n      return 0;\n    }\n\n    return this._forOf.measureRangeSize(range, this.orientation);\n  }\n  /** Update the viewport dimensions and re-render. */\n\n\n  checkViewportSize() {\n    // TODO: Cleanup later when add logic for handling content resize\n    this._measureViewportSize();\n\n    this._scrollStrategy.onDataLengthChanged();\n  }\n  /** Measure the viewport size. */\n\n\n  _measureViewportSize() {\n    const viewportEl = this.elementRef.nativeElement;\n    this._viewportSize = this.orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n  }\n  /** Queue up change detection to run. */\n\n\n  _markChangeDetectionNeeded(runAfter) {\n    if (runAfter) {\n      this._runAfterChangeDetection.push(runAfter);\n    } // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n    // properties sequentially we only have to run `_doChangeDetection` once at the end.\n\n\n    if (!this._isChangeDetectionPending) {\n      this._isChangeDetectionPending = true;\n      this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n        this._doChangeDetection();\n      }));\n    }\n  }\n  /** Run change detection. */\n\n\n  _doChangeDetection() {\n    this._isChangeDetectionPending = false; // Apply the content transform. The transform can't be set via an Angular binding because\n    // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n    // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n    // the `Number` function first to coerce it to a numeric value.\n\n    this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform; // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n    // from the root, since the repeated items are content projected in. Calling `detectChanges`\n    // instead does not properly check the projected content.\n\n    this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n    const runAfterChangeDetection = this._runAfterChangeDetection;\n    this._runAfterChangeDetection = [];\n\n    for (const fn of runAfterChangeDetection) {\n      fn();\n    }\n  }\n  /** Calculates the `style.width` and `style.height` for the spacer element. */\n\n\n  _calculateSpacerSize() {\n    this._totalContentHeight = this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n    this._totalContentWidth = this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n  }\n\n}\n\nCdkVirtualScrollViewport.ɵfac = function CdkVirtualScrollViewport_Factory(t) {\n  return new (t || CdkVirtualScrollViewport)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(VIRTUAL_SCROLL_STRATEGY, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ViewportRuler));\n};\n\nCdkVirtualScrollViewport.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: CdkVirtualScrollViewport,\n  selectors: [[\"cdk-virtual-scroll-viewport\"]],\n  viewQuery: function CdkVirtualScrollViewport_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentWrapper = _t.first);\n    }\n  },\n  hostAttrs: [1, \"cdk-virtual-scroll-viewport\"],\n  hostVars: 4,\n  hostBindings: function CdkVirtualScrollViewport_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"cdk-virtual-scroll-orientation-horizontal\", ctx.orientation === \"horizontal\")(\"cdk-virtual-scroll-orientation-vertical\", ctx.orientation !== \"horizontal\");\n    }\n  },\n  inputs: {\n    orientation: \"orientation\",\n    appendOnly: \"appendOnly\"\n  },\n  outputs: {\n    scrolledIndexChange: \"scrolledIndexChange\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkScrollable,\n    useExisting: CdkVirtualScrollViewport\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 4,\n  vars: 4,\n  consts: [[1, \"cdk-virtual-scroll-content-wrapper\"], [\"contentWrapper\", \"\"], [1, \"cdk-virtual-scroll-spacer\"]],\n  template: function CdkVirtualScrollViewport_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n      ɵngcc0.ɵɵprojection(2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelement(3, \"div\", 2);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵstyleProp(\"width\", ctx._totalContentWidth)(\"height\", ctx._totalContentHeight);\n    }\n  },\n  styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nCdkVirtualScrollViewport.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [VIRTUAL_SCROLL_STRATEGY]\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: ScrollDispatcher\n}, {\n  type: ViewportRuler\n}];\n\nCdkVirtualScrollViewport.propDecorators = {\n  orientation: [{\n    type: Input\n  }],\n  appendOnly: [{\n    type: Input\n  }],\n  scrolledIndexChange: [{\n    type: Output\n  }],\n  _contentWrapper: [{\n    type: ViewChild,\n    args: ['contentWrapper', {\n      static: true\n    }]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkVirtualScrollViewport, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-virtual-scroll-viewport',\n      template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\",\n      host: {\n        'class': 'cdk-virtual-scroll-viewport',\n        '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n        '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [{\n        provide: CdkScrollable,\n        useExisting: CdkVirtualScrollViewport\n      }],\n      styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [VIRTUAL_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ScrollDispatcher\n    }, {\n      type: ViewportRuler\n    }];\n  }, {\n    scrolledIndexChange: [{\n      type: Output\n    }],\n    orientation: [{\n      type: Input\n    }],\n    appendOnly: [{\n      type: Input\n    }],\n    _contentWrapper: [{\n      type: ViewChild,\n      args: ['contentWrapper', {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Helper to extract the offset of a DOM Node in a certain direction. */\n\n\nfunction getOffset(orientation, direction, node) {\n  const el = node;\n\n  if (!el.getBoundingClientRect) {\n    return 0;\n  }\n\n  const rect = el.getBoundingClientRect();\n\n  if (orientation === 'horizontal') {\n    return direction === 'start' ? rect.left : rect.right;\n  }\n\n  return direction === 'start' ? rect.top : rect.bottom;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\n\n\nclass CdkVirtualForOf {\n  constructor(\n  /** The view container to add items to. */\n  _viewContainerRef,\n  /** The template to use when stamping out new items. */\n  _template,\n  /** The set of available differs. */\n  _differs,\n  /** The strategy used to render items in the virtual scroll viewport. */\n  _viewRepeater,\n  /** The virtual scrolling viewport that these items are being rendered in. */\n  _viewport, ngZone) {\n    this._viewContainerRef = _viewContainerRef;\n    this._template = _template;\n    this._differs = _differs;\n    this._viewRepeater = _viewRepeater;\n    this._viewport = _viewport;\n    /** Emits when the rendered view of the data changes. */\n\n    this.viewChange = new Subject();\n    /** Subject that emits when a new DataSource instance is given. */\n\n    this._dataSourceChanges = new Subject();\n    /** Emits whenever the data in the current DataSource changes. */\n\n    this.dataStream = this._dataSourceChanges.pipe( // Start off with null `DataSource`.\n    startWith(null), // Bundle up the previous and current data sources so we can work with both.\n    pairwise(), // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n    // new one, passing back a stream of data changes which we run through `switchMap` to give\n    // us a data stream that emits the latest data from whatever the current `DataSource` is.\n    switchMap(([prev, cur]) => this._changeDataSource(prev, cur)), // Replay the last emitted data when someone subscribes.\n    shareReplay(1));\n    /** The differ used to calculate changes to the data. */\n\n    this._differ = null;\n    /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n\n    this._needsUpdate = false;\n    this._destroyed = new Subject();\n    this.dataStream.subscribe(data => {\n      this._data = data;\n\n      this._onRenderedDataChange();\n    });\n\n    this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n      this._renderedRange = range;\n      ngZone.run(() => this.viewChange.next(this._renderedRange));\n\n      this._onRenderedDataChange();\n    });\n\n    this._viewport.attach(this);\n  }\n  /** The DataSource to display. */\n\n\n  get cdkVirtualForOf() {\n    return this._cdkVirtualForOf;\n  }\n\n  set cdkVirtualForOf(value) {\n    this._cdkVirtualForOf = value;\n\n    if (isDataSource(value)) {\n      this._dataSourceChanges.next(value);\n    } else {\n      // If value is an an NgIterable, convert it to an array.\n      this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.from(value || [])));\n    }\n  }\n  /**\n   * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n   * the item and produces a value to be used as the item's identity when tracking changes.\n   */\n\n\n  get cdkVirtualForTrackBy() {\n    return this._cdkVirtualForTrackBy;\n  }\n\n  set cdkVirtualForTrackBy(fn) {\n    this._needsUpdate = true;\n    this._cdkVirtualForTrackBy = fn ? (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) : undefined;\n  }\n  /** The template used to stamp out new elements. */\n\n\n  set cdkVirtualForTemplate(value) {\n    if (value) {\n      this._needsUpdate = true;\n      this._template = value;\n    }\n  }\n  /**\n   * The size of the cache used to store templates that are not being used for re-use later.\n   * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n   */\n\n\n  get cdkVirtualForTemplateCacheSize() {\n    return this._viewRepeater.viewCacheSize;\n  }\n\n  set cdkVirtualForTemplateCacheSize(size) {\n    this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n  }\n  /**\n   * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n   * in the specified range. Throws an error if the range includes items that are not currently\n   * rendered.\n   */\n\n\n  measureRangeSize(range, orientation) {\n    if (range.start >= range.end) {\n      return 0;\n    }\n\n    if ((range.start < this._renderedRange.start || range.end > this._renderedRange.end) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`Error: attempted to measure an item that isn't rendered.`);\n    } // The index into the list of rendered views for the first item in the range.\n\n\n    const renderedStartIndex = range.start - this._renderedRange.start; // The length of the range we're measuring.\n\n    const rangeLen = range.end - range.start; // Loop over all the views, find the first and land node and compute the size by subtracting\n    // the top of the first node from the bottom of the last one.\n\n    let firstNode;\n    let lastNode; // Find the first node by starting from the beginning and going forwards.\n\n    for (let i = 0; i < rangeLen; i++) {\n      const view = this._viewContainerRef.get(i + renderedStartIndex);\n\n      if (view && view.rootNodes.length) {\n        firstNode = lastNode = view.rootNodes[0];\n        break;\n      }\n    } // Find the last node by starting from the end and going backwards.\n\n\n    for (let i = rangeLen - 1; i > -1; i--) {\n      const view = this._viewContainerRef.get(i + renderedStartIndex);\n\n      if (view && view.rootNodes.length) {\n        lastNode = view.rootNodes[view.rootNodes.length - 1];\n        break;\n      }\n    }\n\n    return firstNode && lastNode ? getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode) : 0;\n  }\n\n  ngDoCheck() {\n    if (this._differ && this._needsUpdate) {\n      // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n      // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n      // changing (need to do this diff).\n      const changes = this._differ.diff(this._renderedItems);\n\n      if (!changes) {\n        this._updateContext();\n      } else {\n        this._applyChanges(changes);\n      }\n\n      this._needsUpdate = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._viewport.detach();\n\n    this._dataSourceChanges.next(undefined);\n\n    this._dataSourceChanges.complete();\n\n    this.viewChange.complete();\n\n    this._destroyed.next();\n\n    this._destroyed.complete();\n\n    this._viewRepeater.detach();\n  }\n  /** React to scroll state changes in the viewport. */\n\n\n  _onRenderedDataChange() {\n    if (!this._renderedRange) {\n      return;\n    }\n\n    this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n\n    if (!this._differ) {\n      // Use a wrapper function for the `trackBy` so any new values are\n      // picked up automatically without having to recreate the differ.\n      this._differ = this._differs.find(this._renderedItems).create((index, item) => {\n        return this.cdkVirtualForTrackBy ? this.cdkVirtualForTrackBy(index, item) : item;\n      });\n    }\n\n    this._needsUpdate = true;\n  }\n  /** Swap out one `DataSource` for another. */\n\n\n  _changeDataSource(oldDs, newDs) {\n    if (oldDs) {\n      oldDs.disconnect(this);\n    }\n\n    this._needsUpdate = true;\n    return newDs ? newDs.connect(this) : of();\n  }\n  /** Update the `CdkVirtualForOfContext` for all views. */\n\n\n  _updateContext() {\n    const count = this._data.length;\n    let i = this._viewContainerRef.length;\n\n    while (i--) {\n      const view = this._viewContainerRef.get(i);\n\n      view.context.index = this._renderedRange.start + i;\n      view.context.count = count;\n\n      this._updateComputedContextProperties(view.context);\n\n      view.detectChanges();\n    }\n  }\n  /** Apply changes to the DOM. */\n\n\n  _applyChanges(changes) {\n    this._viewRepeater.applyChanges(changes, this._viewContainerRef, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record, currentIndex), record => record.item); // Update $implicit for any items that had an identity change.\n\n\n    changes.forEachIdentityChange(record => {\n      const view = this._viewContainerRef.get(record.currentIndex);\n\n      view.context.$implicit = record.item;\n    }); // Update the context variables on all items.\n\n    const count = this._data.length;\n    let i = this._viewContainerRef.length;\n\n    while (i--) {\n      const view = this._viewContainerRef.get(i);\n\n      view.context.index = this._renderedRange.start + i;\n      view.context.count = count;\n\n      this._updateComputedContextProperties(view.context);\n    }\n  }\n  /** Update the computed properties on the `CdkVirtualForOfContext`. */\n\n\n  _updateComputedContextProperties(context) {\n    context.first = context.index === 0;\n    context.last = context.index === context.count - 1;\n    context.even = context.index % 2 === 0;\n    context.odd = !context.even;\n  }\n\n  _getEmbeddedViewArgs(record, index) {\n    // Note that it's important that we insert the item directly at the proper index,\n    // rather than inserting it and the moving it in place, because if there's a directive\n    // on the same node that injects the `ViewContainerRef`, Angular will insert another\n    // comment node which can throw off the move when it's being repeated for all items.\n    return {\n      templateRef: this._template,\n      context: {\n        $implicit: record.item,\n        // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n        // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n        cdkVirtualForOf: this._cdkVirtualForOf,\n        index: -1,\n        count: -1,\n        first: false,\n        last: false,\n        odd: false,\n        even: false\n      },\n      index\n    };\n  }\n\n}\n\nCdkVirtualForOf.ɵfac = function CdkVirtualForOf_Factory(t) {\n  return new (t || CdkVirtualForOf)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(_VIEW_REPEATER_STRATEGY), ɵngcc0.ɵɵdirectiveInject(CdkVirtualScrollViewport, 4), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nCdkVirtualForOf.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkVirtualForOf,\n  selectors: [[\"\", \"cdkVirtualFor\", \"\", \"cdkVirtualForOf\", \"\"]],\n  inputs: {\n    cdkVirtualForOf: \"cdkVirtualForOf\",\n    cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\",\n    cdkVirtualForTemplate: \"cdkVirtualForTemplate\",\n    cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: _VIEW_REPEATER_STRATEGY,\n    useClass: _RecycleViewRepeaterStrategy\n  }])]\n});\n\nCdkVirtualForOf.ctorParameters = () => [{\n  type: ViewContainerRef\n}, {\n  type: TemplateRef\n}, {\n  type: IterableDiffers\n}, {\n  type: _RecycleViewRepeaterStrategy,\n  decorators: [{\n    type: Inject,\n    args: [_VIEW_REPEATER_STRATEGY]\n  }]\n}, {\n  type: CdkVirtualScrollViewport,\n  decorators: [{\n    type: SkipSelf\n  }]\n}, {\n  type: NgZone\n}];\n\nCdkVirtualForOf.propDecorators = {\n  cdkVirtualForOf: [{\n    type: Input\n  }],\n  cdkVirtualForTrackBy: [{\n    type: Input\n  }],\n  cdkVirtualForTemplate: [{\n    type: Input\n  }],\n  cdkVirtualForTemplateCacheSize: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkVirtualForOf, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkVirtualFor][cdkVirtualForOf]',\n      providers: [{\n        provide: _VIEW_REPEATER_STRATEGY,\n        useClass: _RecycleViewRepeaterStrategy\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: ɵngcc3._RecycleViewRepeaterStrategy,\n      decorators: [{\n        type: Inject,\n        args: [_VIEW_REPEATER_STRATEGY]\n      }]\n    }, {\n      type: CdkVirtualScrollViewport,\n      decorators: [{\n        type: SkipSelf\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    cdkVirtualForOf: [{\n      type: Input\n    }],\n    cdkVirtualForTrackBy: [{\n      type: Input\n    }],\n    cdkVirtualForTemplate: [{\n      type: Input\n    }],\n    cdkVirtualForTemplateCacheSize: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass CdkScrollableModule {}\n\nCdkScrollableModule.ɵfac = function CdkScrollableModule_Factory(t) {\n  return new (t || CdkScrollableModule)();\n};\n\nCdkScrollableModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: CdkScrollableModule\n});\nCdkScrollableModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkScrollableModule, [{\n    type: NgModule,\n    args: [{\n      exports: [CdkScrollable],\n      declarations: [CdkScrollable]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkScrollableModule, {\n    declarations: [CdkScrollable],\n    exports: [CdkScrollable]\n  });\n})();\n/**\n * @docs-primary-export\n */\n\n\nclass ScrollingModule {}\n\nScrollingModule.ɵfac = function ScrollingModule_Factory(t) {\n  return new (t || ScrollingModule)();\n};\n\nScrollingModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: ScrollingModule\n});\nScrollingModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [BidiModule, PlatformModule, CdkScrollableModule, BidiModule, CdkScrollableModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollingModule, [{\n    type: NgModule,\n    args: [{\n      imports: [BidiModule, PlatformModule, CdkScrollableModule],\n      exports: [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport],\n      declarations: [CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ScrollingModule, {\n    declarations: function () {\n      return [CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport];\n    },\n    imports: function () {\n      return [BidiModule, PlatformModule, CdkScrollableModule];\n    },\n    exports: function () {\n      return [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };","map":{"version":3,"names":["coerceNumberProperty","coerceElement","coerceBooleanProperty","i0","InjectionToken","Directive","forwardRef","Input","Injectable","NgZone","Optional","Inject","ElementRef","Component","ViewEncapsulation","ChangeDetectionStrategy","ChangeDetectorRef","Output","ViewChild","ViewContainerRef","TemplateRef","IterableDiffers","SkipSelf","NgModule","Subject","of","Observable","fromEvent","animationFrameScheduler","asapScheduler","Subscription","isObservable","distinctUntilChanged","auditTime","filter","takeUntil","startWith","pairwise","switchMap","shareReplay","i1","Platform","getRtlScrollAxisType","supportsScrollBehavior","PlatformModule","i2","DOCUMENT","Directionality","BidiModule","isDataSource","ArrayDataSource","_VIEW_REPEATER_STRATEGY","_RecycleViewRepeaterStrategy","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","_c0","_c1","VIRTUAL_SCROLL_STRATEGY","FixedSizeVirtualScrollStrategy","constructor","itemSize","minBufferPx","maxBufferPx","_scrolledIndexChange","scrolledIndexChange","pipe","_viewport","_itemSize","_minBufferPx","_maxBufferPx","attach","viewport","_updateTotalContentSize","_updateRenderedRange","detach","complete","updateItemAndBufferSize","ngDevMode","Error","onContentScrolled","onDataLengthChanged","onContentRendered","onRenderedOffsetChanged","scrollToIndex","index","behavior","scrollToOffset","setTotalContentSize","getDataLength","renderedRange","getRenderedRange","newRange","start","end","viewportSize","getViewportSize","dataLength","scrollOffset","measureScrollOffset","firstVisibleIndex","maxVisibleItems","Math","ceil","newVisibleIndex","max","min","floor","startBuffer","expandStart","endBuffer","expandEnd","setRenderedRange","setRenderedContentOffset","next","_fixedSizeVirtualScrollStrategyFactory","fixedSizeDir","_scrollStrategy","CdkFixedSizeVirtualScroll","value","ngOnChanges","ɵfac","CdkFixedSizeVirtualScroll_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","inputs","features","ɵɵProvidersFeature","provide","useFactory","deps","ɵɵNgOnChangesFeature","propDecorators","ɵsetClassMetadata","args","selector","providers","DEFAULT_SCROLL_TIME","ScrollDispatcher","_ngZone","_platform","document","_scrolled","_globalSubscription","_scrolledCount","scrollContainers","Map","_document","register","scrollable","has","set","elementScrolled","subscribe","deregister","scrollableReference","get","unsubscribe","delete","scrolled","auditTimeInMs","isBrowser","observer","_addGlobalListener","subscription","_removeGlobalListener","ngOnDestroy","forEach","_","container","ancestorScrolled","elementOrElementRef","ancestors","getAncestorScrollContainers","target","indexOf","scrollingContainers","_subscription","_scrollableContainsElement","push","_getWindow","defaultView","window","element","scrollableElement","getElementRef","nativeElement","parentElement","runOutsideAngular","ScrollDispatcher_Factory","ɵɵinject","ɵprov","ɵɵdefineInjectable","factory","token","providedIn","ctorParameters","undefined","decorators","CdkScrollable","elementRef","scrollDispatcher","ngZone","dir","_destroyed","_elementScrolled","ngOnInit","scrollTo","options","el","isRtl","left","right","bottom","top","scrollHeight","clientHeight","scrollWidth","clientWidth","_applyScrollToOptions","scrollTop","scrollLeft","from","LEFT","RIGHT","CdkScrollable_Factory","ɵɵdirectiveInject","DEFAULT_RESIZE_TIME","ViewportRuler","_change","_changeListener","event","addEventListener","change","_viewportSize","removeEventListener","_updateViewportSize","output","width","height","getViewportRect","scrollPosition","getViewportScrollPosition","documentElement","documentRect","getBoundingClientRect","body","scrollY","scrollX","throttleTime","innerWidth","innerHeight","ViewportRuler_Factory","rangesEqual","r1","r2","SCROLL_SCHEDULER","requestAnimationFrame","CdkVirtualScrollViewport","_changeDetectorRef","viewportRuler","_detachedSubject","_renderedRangeSubject","_orientation","_appendOnly","Promise","resolve","then","run","renderedRangeStream","_totalContentSize","_totalContentWidth","_totalContentHeight","_renderedRange","_dataLength","_renderedContentOffset","_renderedContentOffsetNeedsRewrite","_isChangeDetectionPending","_runAfterChangeDetection","_viewportChanges","EMPTY","checkViewportSize","orientation","_calculateSpacerSize","appendOnly","_measureViewportSize","_markChangeDetectionNeeded","forOf","_forOf","dataStream","data","newLength","length","_doChangeDetection","size","range","getOffsetToRenderedContentStart","offset","to","isHorizontal","axis","axisDirection","transform","Number","_renderedContentTransform","measureRenderedContentSize","contentEl","_contentWrapper","offsetWidth","offsetHeight","measureRangeSize","viewportEl","runAfter","style","markForCheck","runAfterChangeDetection","fn","CdkVirtualScrollViewport_Factory","ɵcmp","ɵɵdefineComponent","viewQuery","CdkVirtualScrollViewport_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostAttrs","hostVars","hostBindings","CdkVirtualScrollViewport_HostBindings","ɵɵclassProp","outputs","useExisting","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","consts","template","CdkVirtualScrollViewport_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵstyleProp","styles","encapsulation","changeDetection","static","host","None","OnPush","getOffset","direction","node","rect","CdkVirtualForOf","_viewContainerRef","_template","_differs","_viewRepeater","viewChange","_dataSourceChanges","prev","cur","_changeDataSource","_differ","_needsUpdate","_data","_onRenderedDataChange","cdkVirtualForOf","_cdkVirtualForOf","Array","cdkVirtualForTrackBy","_cdkVirtualForTrackBy","item","cdkVirtualForTemplate","cdkVirtualForTemplateCacheSize","viewCacheSize","renderedStartIndex","rangeLen","firstNode","lastNode","i","view","rootNodes","ngDoCheck","changes","diff","_renderedItems","_updateContext","_applyChanges","slice","find","create","oldDs","newDs","disconnect","connect","count","context","_updateComputedContextProperties","detectChanges","applyChanges","record","_adjustedPreviousIndex","currentIndex","_getEmbeddedViewArgs","forEachIdentityChange","$implicit","last","even","odd","templateRef","CdkVirtualForOf_Factory","useClass","CdkScrollableModule","CdkScrollableModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","exports","declarations","ngJitMode","ɵɵsetNgModuleScope","ScrollingModule","ScrollingModule_Factory","imports"],"sources":["C:/Team-43-IMOS/Team-43-IMOS/Imos/node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/scrolling.js"],"sourcesContent":["import { coerceNumberProperty, coerceElement, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, forwardRef, Input, Injectable, NgZone, Optional, Inject, ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, Output, ViewChild, ViewContainerRef, TemplateRef, IterableDiffers, SkipSelf, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\nimport { Platform, getRtlScrollAxisType, supportsScrollBehavior, PlatformModule } from '@angular/cdk/platform';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { isDataSource, ArrayDataSource, _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy } from '@angular/cdk/collections';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the virtual scrolling strategy. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/cdk/collections';\n\nconst _c0 = [\"contentWrapper\"];\nconst _c1 = [\"*\"];\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nclass FixedSizeVirtualScrollStrategy {\n    /**\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject();\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n        /** The attached viewport. */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param viewport The viewport to attach this strategy to.\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** Detaches this scroll strategy from the currently attached viewport. */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentRendered() { }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onRenderedOffsetChanged() { }\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /** Update the viewport's total content size. */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /** Update the viewport's rendered range. */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        const renderedRange = this._viewport.getRenderedRange();\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        const viewportSize = this._viewport.getViewportSize();\n        const dataLength = this._viewport.getDataLength();\n        let scrollOffset = this._viewport.measureScrollOffset();\n        // Prevent NaN as result when dividing by zero.\n        let firstVisibleIndex = (this._itemSize > 0) ? scrollOffset / this._itemSize : 0;\n        // If user scrolls to the bottom of the list and data changes to a smaller list\n        if (newRange.end > dataLength) {\n            // We have to recalculate the first visible index based on new data length and viewport size.\n            const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n            const newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems));\n            // If first visible index changed we must update scroll offset to handle start/end buffers\n            // Current range must also be adjusted to cover the new position (bottom of new list).\n            if (firstVisibleIndex != newVisibleIndex) {\n                firstVisibleIndex = newVisibleIndex;\n                scrollOffset = newVisibleIndex * this._itemSize;\n                newRange.start = Math.floor(firstVisibleIndex);\n            }\n            newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n        }\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/** A virtual scroll strategy that supports fixed-size items. */\nclass CdkFixedSizeVirtualScroll {\n    constructor() {\n        this._itemSize = 20;\n        this._minBufferPx = 100;\n        this._maxBufferPx = 200;\n        /** The scroll strategy used by this directive. */\n        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /** The size of the items in the list (in pixels). */\n    get itemSize() { return this._itemSize; }\n    set itemSize(value) { this._itemSize = coerceNumberProperty(value); }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     */\n    get minBufferPx() { return this._minBufferPx; }\n    set minBufferPx(value) { this._minBufferPx = coerceNumberProperty(value); }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     */\n    get maxBufferPx() { return this._maxBufferPx; }\n    set maxBufferPx(value) { this._maxBufferPx = coerceNumberProperty(value); }\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n}\nCdkFixedSizeVirtualScroll.ɵfac = function CdkFixedSizeVirtualScroll_Factory(t) { return new (t || CdkFixedSizeVirtualScroll)(); };\nCdkFixedSizeVirtualScroll.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkFixedSizeVirtualScroll, selectors: [[\"cdk-virtual-scroll-viewport\", \"itemSize\", \"\"]], inputs: { itemSize: \"itemSize\", minBufferPx: \"minBufferPx\", maxBufferPx: \"maxBufferPx\" }, features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: VIRTUAL_SCROLL_STRATEGY,\n                useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                deps: [forwardRef(() => CdkFixedSizeVirtualScroll)]\n            }]), ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkFixedSizeVirtualScroll.propDecorators = {\n    itemSize: [{ type: Input }],\n    minBufferPx: [{ type: Input }],\n    maxBufferPx: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFixedSizeVirtualScroll, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                providers: [{\n                        provide: VIRTUAL_SCROLL_STRATEGY,\n                        useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                        deps: [forwardRef(() => CdkFixedSizeVirtualScroll)]\n                    }]\n            }]\n    }], function () { return []; }, { itemSize: [{\n            type: Input\n        }], minBufferPx: [{\n            type: Input\n        }], maxBufferPx: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time in ms to throttle the scrolling events by default. */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    constructor(_ngZone, _platform, document) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n        this._scrolled = new Subject();\n        /** Keeps track of the global `scroll` and `resize` subscriptions. */\n        this._globalSubscription = null;\n        /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n        this._document = document;\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n    register(scrollable) {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled()\n                .subscribe(() => this._scrolled.next(scrollable)));\n        }\n    }\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n    deregister(scrollable) {\n        const scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        if (!this._platform.isBrowser) {\n            return of();\n        }\n        return new Observable((observer) => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            const subscription = auditTimeInMs > 0 ?\n                this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\n                this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            };\n        });\n    }\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((_, container) => this.deregister(container));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementOrElementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n    ancestorScrolled(elementOrElementRef, auditTimeInMs) {\n        const ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter(target => {\n            return !target || ancestors.indexOf(target) > -1;\n        }));\n    }\n    /** Returns all registered Scrollables that contain the provided element. */\n    getAncestorScrollContainers(elementOrElementRef) {\n        const scrollingContainers = [];\n        this.scrollContainers.forEach((_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n        return scrollingContainers;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Returns true if the element is contained within the provided Scrollable. */\n    _scrollableContainsElement(scrollable, elementOrElementRef) {\n        let element = coerceElement(elementOrElementRef);\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while (element = element.parentElement);\n        return false;\n    }\n    /** Sets up the global scroll listeners. */\n    _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n            const window = this._getWindow();\n            return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n        });\n    }\n    /** Cleans up the global scroll listener. */\n    _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n}\nScrollDispatcher.ɵfac = function ScrollDispatcher_Factory(t) { return new (t || ScrollDispatcher)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(DOCUMENT, 8)); };\nScrollDispatcher.ɵprov = i0.ɵɵdefineInjectable({ factory: function ScrollDispatcher_Factory() { return new ScrollDispatcher(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i2.DOCUMENT, 8)); }, token: ScrollDispatcher, providedIn: \"root\" });\nScrollDispatcher.ctorParameters = () => [\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        this.elementRef = elementRef;\n        this.scrollDispatcher = scrollDispatcher;\n        this.ngZone = ngZone;\n        this.dir = dir;\n        this._destroyed = new Subject();\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this._destroyed))\n            .subscribe(observer)));\n    }\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n    elementScrolled() {\n        return this._elementScrolled;\n    }\n    /** Gets the ElementRef for the viewport. */\n    getElementRef() {\n        return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n    scrollTo(options) {\n        const el = this.elementRef.nativeElement;\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        if (options.left == null) {\n            options.left = isRtl ? options.end : options.start;\n        }\n        if (options.right == null) {\n            options.right = isRtl ? options.start : options.end;\n        }\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            options.top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != 0 /* NORMAL */) {\n            if (options.left != null) {\n                options.right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (getRtlScrollAxisType() == 2 /* INVERTED */) {\n                options.left = options.right;\n            }\n            else if (getRtlScrollAxisType() == 1 /* NEGATED */) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                options.left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    }\n    _applyScrollToOptions(options) {\n        const el = this.elementRef.nativeElement;\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n    measureScrollOffset(from) {\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        // Rewrite start & end as left or right offsets.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && getRtlScrollAxisType() == 2 /* INVERTED */) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && getRtlScrollAxisType() == 1 /* NEGATED */) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n}\nCdkScrollable.ɵfac = function CdkScrollable_Factory(t) { return new (t || CdkScrollable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8)); };\nCdkScrollable.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkScrollable, selectors: [[\"\", \"cdk-scrollable\", \"\"], [\"\", \"cdkScrollable\", \"\"]] });\nCdkScrollable.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: NgZone },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkScrollable, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-scrollable], [cdkScrollable]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ScrollDispatcher }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time in ms to throttle the resize events by default. */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\nclass ViewportRuler {\n    constructor(_platform, ngZone, document) {\n        this._platform = _platform;\n        /** Stream of viewport change events. */\n        this._change = new Subject();\n        /** Event listener that will be used to handle the viewport change events. */\n        this._changeListener = (event) => {\n            this._change.next(event);\n        };\n        this._document = document;\n        ngZone.runOutsideAngular(() => {\n            if (_platform.isBrowser) {\n                const window = this._getWindow();\n                // Note that bind the events ourselves, rather than going through something like RxJS's\n                // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n                window.addEventListener('resize', this._changeListener);\n                window.addEventListener('orientationchange', this._changeListener);\n            }\n            // Clear the cached position so that the viewport is re-measured next time it is required.\n            // We don't need to keep track of the subscription, because it is completed on destroy.\n            this.change().subscribe(() => this._viewportSize = null);\n        });\n    }\n    ngOnDestroy() {\n        if (this._platform.isBrowser) {\n            const window = this._getWindow();\n            window.removeEventListener('resize', this._changeListener);\n            window.removeEventListener('orientationchange', this._changeListener);\n        }\n        this._change.complete();\n    }\n    /** Returns the viewport's width and height. */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = null;\n        }\n        return output;\n    }\n    /** Gets a ClientRect for the viewport's bounds. */\n    getViewportRect() {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /** Gets the (top, left) scroll position of the viewport. */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        const document = this._document;\n        const window = this._getWindow();\n        const documentElement = document.documentElement;\n        const documentRect = documentElement.getBoundingClientRect();\n        const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n            documentElement.scrollTop || 0;\n        const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n            documentElement.scrollLeft || 0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * This stream emits outside of the Angular zone.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Updates the cached viewport size. */\n    _updateViewportSize() {\n        const window = this._getWindow();\n        this._viewportSize = this._platform.isBrowser ?\n            { width: window.innerWidth, height: window.innerHeight } :\n            { width: 0, height: 0 };\n    }\n}\nViewportRuler.ɵfac = function ViewportRuler_Factory(t) { return new (t || ViewportRuler)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT, 8)); };\nViewportRuler.ɵprov = i0.ɵɵdefineInjectable({ factory: function ViewportRuler_Factory() { return new ViewportRuler(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.DOCUMENT, 8)); }, token: ViewportRuler, providedIn: \"root\" });\nViewportRuler.ctorParameters = () => [\n    { type: Platform },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ViewportRuler, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\nclass CdkVirtualScrollViewport extends CdkScrollable {\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, viewportRuler) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n        this.elementRef = elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollStrategy = _scrollStrategy;\n        /** Emits when the viewport is detached from a CdkVirtualForOf. */\n        this._detachedSubject = new Subject();\n        /** Emits when the rendered range changes. */\n        this._renderedRangeSubject = new Subject();\n        this._orientation = 'vertical';\n        this._appendOnly = false;\n        // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n        // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n        // depending on how the strategy calculates the scrolled index, it may come at a cost to\n        // performance.\n        /** Emits when the index of the first element visible in the viewport changes. */\n        this.scrolledIndexChange = new Observable((observer) => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n        /** A stream that emits whenever the rendered range changes. */\n        this.renderedRangeStream = this._renderedRangeSubject;\n        /**\n         * The total size of all content (in pixels), including content that is not currently rendered.\n         */\n        this._totalContentSize = 0;\n        /** A string representing the `style.width` property value to be used for the spacer element. */\n        this._totalContentWidth = '';\n        /** A string representing the `style.height` property value to be used for the spacer element. */\n        this._totalContentHeight = '';\n        /** The currently rendered range of indices. */\n        this._renderedRange = { start: 0, end: 0 };\n        /** The length of the data bound to this viewport (in number of items). */\n        this._dataLength = 0;\n        /** The size of the viewport (in pixels). */\n        this._viewportSize = 0;\n        /** The last rendered content offset that was set. */\n        this._renderedContentOffset = 0;\n        /**\n         * Whether the last rendered content offset was to the end of the content (and therefore needs to\n         * be rewritten as an offset to the start of the content).\n         */\n        this._renderedContentOffsetNeedsRewrite = false;\n        /** Whether there is a pending change detection cycle. */\n        this._isChangeDetectionPending = false;\n        /** A list of functions to run after the next change detection cycle. */\n        this._runAfterChangeDetection = [];\n        /** Subscription to changes in the viewport size. */\n        this._viewportChanges = Subscription.EMPTY;\n        if (!_scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n        this._viewportChanges = viewportRuler.change().subscribe(() => {\n            this.checkViewportSize();\n        });\n    }\n    /** The direction the viewport scrolls. */\n    get orientation() {\n        return this._orientation;\n    }\n    set orientation(orientation) {\n        if (this._orientation !== orientation) {\n            this._orientation = orientation;\n            this._calculateSpacerSize();\n        }\n    }\n    /**\n     * Whether rendered items should persist in the DOM after scrolling out of view. By default, items\n     * will be removed.\n     */\n    get appendOnly() {\n        return this._appendOnly;\n    }\n    set appendOnly(value) {\n        this._appendOnly = coerceBooleanProperty(value);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n            this.elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith(null), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER))\n                .subscribe(() => this._scrollStrategy.onContentScrolled());\n            this._markChangeDetectionNeeded();\n        }));\n    }\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        this._viewportChanges.unsubscribe();\n        super.ngOnDestroy();\n    }\n    /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n    attach(forOf) {\n        if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular(() => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            });\n        });\n    }\n    /** Detaches the current `CdkVirtualForOf`. */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n    /** Gets the length of the data bound to this viewport (in number of items). */\n    getDataLength() {\n        return this._dataLength;\n    }\n    /** Gets the size of the viewport (in pixels). */\n    getViewportSize() {\n        return this._viewportSize;\n    }\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /** Get the current rendered range of items. */\n    getRenderedRange() {\n        return this._renderedRange;\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     */\n    setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            this._calculateSpacerSize();\n            this._markChangeDetectionNeeded();\n        }\n    }\n    /** Sets the currently rendered range of indices. */\n    setRenderedRange(range) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            if (this.appendOnly) {\n                range = { start: 0, end: Math.max(this._renderedRange.end, range.end) };\n            }\n            this._renderedRangeSubject.next(this._renderedRange = range);\n            this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n        }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     */\n    getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        const isHorizontal = this.orientation == 'horizontal';\n        const axis = isHorizontal ? 'X' : 'Y';\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded(() => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                }\n                else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            });\n        }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param offset The offset to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n        const options = { behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToIndex(index, behavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the viewport (in pixels).\n     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     */\n    measureScrollOffset(from) {\n        return from ?\n            super.measureScrollOffset(from) :\n            super.measureScrollOffset(this.orientation === 'horizontal' ? 'start' : 'top');\n    }\n    /** Measure the combined size of all of the rendered items. */\n    measureRenderedContentSize() {\n        const contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     */\n    measureRangeSize(range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /** Update the viewport dimensions and re-render. */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n    /** Measure the viewport size. */\n    _measureViewportSize() {\n        const viewportEl = this.elementRef.nativeElement;\n        this._viewportSize = this.orientation === 'horizontal' ?\n            viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    /** Queue up change detection to run. */\n    _markChangeDetectionNeeded(runAfter) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n                this._doChangeDetection();\n            }));\n        }\n    }\n    /** Run change detection. */\n    _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n    /** Calculates the `style.width` and `style.height` for the spacer element. */\n    _calculateSpacerSize() {\n        this._totalContentHeight =\n            this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n        this._totalContentWidth =\n            this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n    }\n}\nCdkVirtualScrollViewport.ɵfac = function CdkVirtualScrollViewport_Factory(t) { return new (t || CdkVirtualScrollViewport)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(VIRTUAL_SCROLL_STRATEGY, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ViewportRuler)); };\nCdkVirtualScrollViewport.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkVirtualScrollViewport, selectors: [[\"cdk-virtual-scroll-viewport\"]], viewQuery: function CdkVirtualScrollViewport_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentWrapper = _t.first);\n    } }, hostAttrs: [1, \"cdk-virtual-scroll-viewport\"], hostVars: 4, hostBindings: function CdkVirtualScrollViewport_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-virtual-scroll-orientation-horizontal\", ctx.orientation === \"horizontal\")(\"cdk-virtual-scroll-orientation-vertical\", ctx.orientation !== \"horizontal\");\n    } }, inputs: { orientation: \"orientation\", appendOnly: \"appendOnly\" }, outputs: { scrolledIndexChange: \"scrolledIndexChange\" }, features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkScrollable,\n                useExisting: CdkVirtualScrollViewport\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 4, vars: 4, consts: [[1, \"cdk-virtual-scroll-content-wrapper\"], [\"contentWrapper\", \"\"], [1, \"cdk-virtual-scroll-spacer\"]], template: function CdkVirtualScrollViewport_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(3, \"div\", 2);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx._totalContentWidth)(\"height\", ctx._totalContentHeight);\n    } }, styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"], encapsulation: 2, changeDetection: 0 });\nCdkVirtualScrollViewport.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [VIRTUAL_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ScrollDispatcher },\n    { type: ViewportRuler }\n];\nCdkVirtualScrollViewport.propDecorators = {\n    orientation: [{ type: Input }],\n    appendOnly: [{ type: Input }],\n    scrolledIndexChange: [{ type: Output }],\n    _contentWrapper: [{ type: ViewChild, args: ['contentWrapper', { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkVirtualScrollViewport, [{\n        type: Component,\n        args: [{ selector: 'cdk-virtual-scroll-viewport', template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\", host: {\n                    'class': 'cdk-virtual-scroll-viewport',\n                    '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                    '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"'\n                }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, providers: [{\n                        provide: CdkScrollable,\n                        useExisting: CdkVirtualScrollViewport\n                    }], styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"] }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [VIRTUAL_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ScrollDispatcher }, { type: ViewportRuler }]; }, { scrolledIndexChange: [{\n            type: Output\n        }], orientation: [{\n            type: Input\n        }], appendOnly: [{\n            type: Input\n        }], _contentWrapper: [{\n            type: ViewChild,\n            args: ['contentWrapper', { static: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Helper to extract the offset of a DOM Node in a certain direction. */\nfunction getOffset(orientation, direction, node) {\n    const el = node;\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    const rect = el.getBoundingClientRect();\n    if (orientation === 'horizontal') {\n        return direction === 'start' ? rect.left : rect.right;\n    }\n    return direction === 'start' ? rect.top : rect.bottom;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\nclass CdkVirtualForOf {\n    constructor(\n    /** The view container to add items to. */\n    _viewContainerRef, \n    /** The template to use when stamping out new items. */\n    _template, \n    /** The set of available differs. */\n    _differs, \n    /** The strategy used to render items in the virtual scroll viewport. */\n    _viewRepeater, \n    /** The virtual scrolling viewport that these items are being rendered in. */\n    _viewport, ngZone) {\n        this._viewContainerRef = _viewContainerRef;\n        this._template = _template;\n        this._differs = _differs;\n        this._viewRepeater = _viewRepeater;\n        this._viewport = _viewport;\n        /** Emits when the rendered view of the data changes. */\n        this.viewChange = new Subject();\n        /** Subject that emits when a new DataSource instance is given. */\n        this._dataSourceChanges = new Subject();\n        /** Emits whenever the data in the current DataSource changes. */\n        this.dataStream = this._dataSourceChanges\n            .pipe(\n        // Start off with null `DataSource`.\n        startWith(null), \n        // Bundle up the previous and current data sources so we can work with both.\n        pairwise(), \n        // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n        // new one, passing back a stream of data changes which we run through `switchMap` to give\n        // us a data stream that emits the latest data from whatever the current `DataSource` is.\n        switchMap(([prev, cur]) => this._changeDataSource(prev, cur)), \n        // Replay the last emitted data when someone subscribes.\n        shareReplay(1));\n        /** The differ used to calculate changes to the data. */\n        this._differ = null;\n        /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n        this._needsUpdate = false;\n        this._destroyed = new Subject();\n        this.dataStream.subscribe(data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        });\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n            this._renderedRange = range;\n            ngZone.run(() => this.viewChange.next(this._renderedRange));\n            this._onRenderedDataChange();\n        });\n        this._viewport.attach(this);\n    }\n    /** The DataSource to display. */\n    get cdkVirtualForOf() {\n        return this._cdkVirtualForOf;\n    }\n    set cdkVirtualForOf(value) {\n        this._cdkVirtualForOf = value;\n        if (isDataSource(value)) {\n            this._dataSourceChanges.next(value);\n        }\n        else {\n            // If value is an an NgIterable, convert it to an array.\n            this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.from(value || [])));\n        }\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     */\n    get cdkVirtualForTrackBy() {\n        return this._cdkVirtualForTrackBy;\n    }\n    set cdkVirtualForTrackBy(fn) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn ?\n            (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) :\n            undefined;\n    }\n    /** The template used to stamp out new elements. */\n    set cdkVirtualForTemplate(value) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n    get cdkVirtualForTemplateCacheSize() {\n        return this._viewRepeater.viewCacheSize;\n    }\n    set cdkVirtualForTemplateCacheSize(size) {\n        this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n    measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if ((range.start < this._renderedRange.start || range.end > this._renderedRange.end) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n        // The index into the list of rendered views for the first item in the range.\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        const rangeLen = range.end - range.start;\n        // Loop over all the views, find the first and land node and compute the size by subtracting\n        // the top of the first node from the bottom of the last one.\n        let firstNode;\n        let lastNode;\n        // Find the first node by starting from the beginning and going forwards.\n        for (let i = 0; i < rangeLen; i++) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                firstNode = lastNode = view.rootNodes[0];\n                break;\n            }\n        }\n        // Find the last node by starting from the end and going backwards.\n        for (let i = rangeLen - 1; i > -1; i--) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                lastNode = view.rootNodes[view.rootNodes.length - 1];\n                break;\n            }\n        }\n        return firstNode && lastNode ?\n            getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode) : 0;\n    }\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n    ngOnDestroy() {\n        this._viewport.detach();\n        this._dataSourceChanges.next(undefined);\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._viewRepeater.detach();\n    }\n    /** React to scroll state changes in the viewport. */\n    _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            // Use a wrapper function for the `trackBy` so any new values are\n            // picked up automatically without having to recreate the differ.\n            this._differ = this._differs.find(this._renderedItems).create((index, item) => {\n                return this.cdkVirtualForTrackBy ? this.cdkVirtualForTrackBy(index, item) : item;\n            });\n        }\n        this._needsUpdate = true;\n    }\n    /** Swap out one `DataSource` for another. */\n    _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs ? newDs.connect(this) : of();\n    }\n    /** Update the `CdkVirtualForOfContext` for all views. */\n    _updateContext() {\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n    /** Apply changes to the DOM. */\n    _applyChanges(changes) {\n        this._viewRepeater.applyChanges(changes, this._viewContainerRef, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record, currentIndex), (record) => record.item);\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((record) => {\n            const view = this._viewContainerRef.get(record.currentIndex);\n            view.context.$implicit = record.item;\n        });\n        // Update the context variables on all items.\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n    _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n    _getEmbeddedViewArgs(record, index) {\n        // Note that it's important that we insert the item directly at the proper index,\n        // rather than inserting it and the moving it in place, because if there's a directive\n        // on the same node that injects the `ViewContainerRef`, Angular will insert another\n        // comment node which can throw off the move when it's being repeated for all items.\n        return {\n            templateRef: this._template,\n            context: {\n                $implicit: record.item,\n                // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n                // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n                cdkVirtualForOf: this._cdkVirtualForOf,\n                index: -1,\n                count: -1,\n                first: false,\n                last: false,\n                odd: false,\n                even: false\n            },\n            index,\n        };\n    }\n}\nCdkVirtualForOf.ɵfac = function CdkVirtualForOf_Factory(t) { return new (t || CdkVirtualForOf)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(_VIEW_REPEATER_STRATEGY), ɵngcc0.ɵɵdirectiveInject(CdkVirtualScrollViewport, 4), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nCdkVirtualForOf.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkVirtualForOf, selectors: [[\"\", \"cdkVirtualFor\", \"\", \"cdkVirtualForOf\", \"\"]], inputs: { cdkVirtualForOf: \"cdkVirtualForOf\", cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\", cdkVirtualForTemplate: \"cdkVirtualForTemplate\", cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\" }, features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy },\n        ])] });\nCdkVirtualForOf.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: _RecycleViewRepeaterStrategy, decorators: [{ type: Inject, args: [_VIEW_REPEATER_STRATEGY,] }] },\n    { type: CdkVirtualScrollViewport, decorators: [{ type: SkipSelf }] },\n    { type: NgZone }\n];\nCdkVirtualForOf.propDecorators = {\n    cdkVirtualForOf: [{ type: Input }],\n    cdkVirtualForTrackBy: [{ type: Input }],\n    cdkVirtualForTemplate: [{ type: Input }],\n    cdkVirtualForTemplateCacheSize: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkVirtualForOf, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkVirtualFor][cdkVirtualForOf]',\n                providers: [\n                    { provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy },\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: ɵngcc3._RecycleViewRepeaterStrategy, decorators: [{\n                type: Inject,\n                args: [_VIEW_REPEATER_STRATEGY]\n            }] }, { type: CdkVirtualScrollViewport, decorators: [{\n                type: SkipSelf\n            }] }, { type: ɵngcc0.NgZone }]; }, { cdkVirtualForOf: [{\n            type: Input\n        }], cdkVirtualForTrackBy: [{\n            type: Input\n        }], cdkVirtualForTemplate: [{\n            type: Input\n        }], cdkVirtualForTemplateCacheSize: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass CdkScrollableModule {\n}\nCdkScrollableModule.ɵfac = function CdkScrollableModule_Factory(t) { return new (t || CdkScrollableModule)(); };\nCdkScrollableModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CdkScrollableModule });\nCdkScrollableModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkScrollableModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkScrollable],\n                declarations: [CdkScrollable]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkScrollableModule, { declarations: [CdkScrollable], exports: [CdkScrollable] }); })();\n/**\n * @docs-primary-export\n */\nclass ScrollingModule {\n}\nScrollingModule.ɵfac = function ScrollingModule_Factory(t) { return new (t || ScrollingModule)(); };\nScrollingModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ScrollingModule });\nScrollingModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [BidiModule,\n        PlatformModule,\n        CdkScrollableModule, BidiModule, CdkScrollableModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollingModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    BidiModule,\n                    PlatformModule,\n                    CdkScrollableModule\n                ],\n                exports: [\n                    BidiModule,\n                    CdkScrollableModule,\n                    CdkFixedSizeVirtualScroll,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ],\n                declarations: [\n                    CdkFixedSizeVirtualScroll,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ScrollingModule, { declarations: function () { return [CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport]; }, imports: function () { return [BidiModule,\n        PlatformModule, CdkScrollableModule]; }, exports: function () { return [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}