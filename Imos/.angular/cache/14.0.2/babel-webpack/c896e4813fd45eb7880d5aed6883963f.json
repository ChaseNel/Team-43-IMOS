{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Directive, Optional, Inject, Input, Output, Injectable, SkipSelf, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, NgModule } from '@angular/core';\nimport { FocusMonitor, AriaDescriber } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SPACE, ENTER } from '@angular/cdk/keycodes';\nimport { mixinInitialized, mixinDisabled, AnimationDurations, AnimationCurves, MatCommonModule } from '@angular/material/core';\nimport { Subject, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate, keyframes, query, animateChild } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/common';\nconst _c0 = [\"mat-sort-header\", \"\"];\n\nfunction MatSortHeader_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 3);\n    ɵngcc0.ɵɵlistener(\"@arrowPosition.start\", function MatSortHeader_div_3_Template_div_animation_arrowPosition_start_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      const ctx_r1 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r1._disableViewStateAnimation = true);\n    })(\"@arrowPosition.done\", function MatSortHeader_div_3_Template_div_animation_arrowPosition_done_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      const ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r3._disableViewStateAnimation = false);\n    });\n    ɵngcc0.ɵɵelement(1, \"div\", 4);\n    ɵngcc0.ɵɵelementStart(2, \"div\", 5);\n    ɵngcc0.ɵɵelement(3, \"div\", 6)(4, \"div\", 7)(5, \"div\", 8);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@arrowOpacity\", ctx_r0._getArrowViewState())(\"@arrowPosition\", ctx_r0._getArrowViewState())(\"@allowChildren\", ctx_r0._getArrowDirectionState());\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"@indicator\", ctx_r0._getArrowDirectionState());\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"@leftPointer\", ctx_r0._getArrowDirectionState());\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"@rightPointer\", ctx_r0._getArrowDirectionState());\n  }\n}\n\nconst _c1 = [\"*\"];\n\nfunction getSortDuplicateSortableIdError(id) {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n/** @docs-private */\n\n\nfunction getSortHeaderNotContainedWithinSortError() {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n/** @docs-private */\n\n\nfunction getSortHeaderMissingIdError() {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n/** @docs-private */\n\n\nfunction getSortInvalidDirectionError(direction) {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token to be used to override the default options for `mat-sort`. */\n\n\nconst MAT_SORT_DEFAULT_OPTIONS = new InjectionToken('MAT_SORT_DEFAULT_OPTIONS'); // Boilerplate for applying mixins to MatSort.\n\n/** @docs-private */\n\nconst _MatSortBase = mixinInitialized(mixinDisabled(class {}));\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n\n\nclass MatSort extends _MatSortBase {\n  constructor(_defaultOptions) {\n    super();\n    this._defaultOptions = _defaultOptions;\n    /** Collection of all registered sortables that this directive manages. */\n\n    this.sortables = new Map();\n    /** Used to notify any child components listening to state changes. */\n\n    this._stateChanges = new Subject();\n    /**\n     * The direction to set when an MatSortable is initially sorted.\n     * May be overriden by the MatSortable's sort start.\n     */\n\n    this.start = 'asc';\n    this._direction = '';\n    /** Event emitted when the user changes either the active sort or sort direction. */\n\n    this.sortChange = new EventEmitter();\n  }\n  /** The sort direction of the currently active MatSortable. */\n\n\n  get direction() {\n    return this._direction;\n  }\n\n  set direction(direction) {\n    if (direction && direction !== 'asc' && direction !== 'desc' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getSortInvalidDirectionError(direction);\n    }\n\n    this._direction = direction;\n  }\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n\n\n  get disableClear() {\n    return this._disableClear;\n  }\n\n  set disableClear(v) {\n    this._disableClear = coerceBooleanProperty(v);\n  }\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n\n\n  register(sortable) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!sortable.id) {\n        throw getSortHeaderMissingIdError();\n      }\n\n      if (this.sortables.has(sortable.id)) {\n        throw getSortDuplicateSortableIdError(sortable.id);\n      }\n    }\n\n    this.sortables.set(sortable.id, sortable);\n  }\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n\n\n  deregister(sortable) {\n    this.sortables.delete(sortable.id);\n  }\n  /** Sets the active sort id and determines the new sort direction. */\n\n\n  sort(sortable) {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({\n      active: this.active,\n      direction: this.direction\n    });\n  }\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n\n\n  getNextSortDirection(sortable) {\n    var _a, _b, _c;\n\n    if (!sortable) {\n      return '';\n    } // Get the sort direction cycle with the potential sortable overrides.\n\n\n    const disableClear = (_b = (_a = sortable === null || sortable === void 0 ? void 0 : sortable.disableClear) !== null && _a !== void 0 ? _a : this.disableClear) !== null && _b !== void 0 ? _b : !!((_c = this._defaultOptions) === null || _c === void 0 ? void 0 : _c.disableClear);\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear); // Get and return the next direction in the cycle\n\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n\n    if (nextDirectionIndex >= sortDirectionCycle.length) {\n      nextDirectionIndex = 0;\n    }\n\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n}\n\nMatSort.ɵfac = function MatSort_Factory(t) {\n  return new (t || MatSort)(ɵngcc0.ɵɵdirectiveInject(MAT_SORT_DEFAULT_OPTIONS, 8));\n};\n\nMatSort.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatSort,\n  selectors: [[\"\", \"matSort\", \"\"]],\n  hostAttrs: [1, \"mat-sort\"],\n  inputs: {\n    disabled: [\"matSortDisabled\", \"disabled\"],\n    start: [\"matSortStart\", \"start\"],\n    direction: [\"matSortDirection\", \"direction\"],\n    disableClear: [\"matSortDisableClear\", \"disableClear\"],\n    active: [\"matSortActive\", \"active\"]\n  },\n  outputs: {\n    sortChange: \"matSortChange\"\n  },\n  exportAs: [\"matSort\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nMatSort.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_SORT_DEFAULT_OPTIONS]\n  }]\n}];\n\nMatSort.propDecorators = {\n  active: [{\n    type: Input,\n    args: ['matSortActive']\n  }],\n  start: [{\n    type: Input,\n    args: ['matSortStart']\n  }],\n  direction: [{\n    type: Input,\n    args: ['matSortDirection']\n  }],\n  disableClear: [{\n    type: Input,\n    args: ['matSortDisableClear']\n  }],\n  sortChange: [{\n    type: Output,\n    args: ['matSortChange']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSort, [{\n    type: Directive,\n    args: [{\n      selector: '[matSort]',\n      exportAs: 'matSort',\n      host: {\n        'class': 'mat-sort'\n      },\n      inputs: ['disabled: matSortDisabled']\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_SORT_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    start: [{\n      type: Input,\n      args: ['matSortStart']\n    }],\n    sortChange: [{\n      type: Output,\n      args: ['matSortChange']\n    }],\n    direction: [{\n      type: Input,\n      args: ['matSortDirection']\n    }],\n    disableClear: [{\n      type: Input,\n      args: ['matSortDisableClear']\n    }],\n    active: [{\n      type: Input,\n      args: ['matSortActive']\n    }]\n  });\n})();\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\n\n\nfunction getSortDirectionCycle(start, disableClear) {\n  let sortOrder = ['asc', 'desc'];\n\n  if (start == 'desc') {\n    sortOrder.reverse();\n  }\n\n  if (!disableClear) {\n    sortOrder.push('');\n  }\n\n  return sortOrder;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' + AnimationCurves.STANDARD_CURVE;\n/**\n * Animations used by MatSort.\n * @docs-private\n */\n\nconst matSortAnimations = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [state('active-asc, asc', style({\n    transform: 'translateY(0px)'\n  })), // 10px is the height of the sort indicator, minus the width of the pointers\n  state('active-desc, desc', style({\n    transform: 'translateY(10px)'\n  })), transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [state('active-asc, asc', style({\n    transform: 'rotate(-45deg)'\n  })), state('active-desc, desc', style({\n    transform: 'rotate(45deg)'\n  })), transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [state('active-asc, asc', style({\n    transform: 'rotate(45deg)'\n  })), state('active-desc, desc', style({\n    transform: 'rotate(-45deg)'\n  })), transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [state('desc-to-active, asc-to-active, active', style({\n    opacity: 1\n  })), state('desc-to-hint, asc-to-hint, hint', style({\n    opacity: .54\n  })), state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', style({\n    opacity: 0\n  })), // Transition between all states except for immediate transitions\n  transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')), transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [// Hidden Above => Hint Center\n  transition('* => desc-to-hint, * => desc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([style({\n    transform: 'translateY(-25%)'\n  }), style({\n    transform: 'translateY(0)'\n  })]))), // Hint Center => Hidden Below\n  transition('* => hint-to-desc, * => active-to-desc', animate(SORT_ANIMATION_TRANSITION, keyframes([style({\n    transform: 'translateY(0)'\n  }), style({\n    transform: 'translateY(25%)'\n  })]))), // Hidden Below => Hint Center\n  transition('* => asc-to-hint, * => asc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([style({\n    transform: 'translateY(25%)'\n  }), style({\n    transform: 'translateY(0)'\n  })]))), // Hint Center => Hidden Above\n  transition('* => hint-to-asc, * => active-to-asc', animate(SORT_ANIMATION_TRANSITION, keyframes([style({\n    transform: 'translateY(0)'\n  }), style({\n    transform: 'translateY(-25%)'\n  })]))), state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', style({\n    transform: 'translateY(0)'\n  })), state('hint-to-desc, active-to-desc, desc', style({\n    transform: 'translateY(-25%)'\n  })), state('hint-to-asc, active-to-asc, asc', style({\n    transform: 'translateY(25%)'\n  }))]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [transition('* <=> *', [query('@*', animateChild(), {\n    optional: true\n  })])])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n\nclass MatSortHeaderIntl {\n  constructor() {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    this.changes = new Subject();\n  }\n\n}\n\nMatSortHeaderIntl.ɵfac = function MatSortHeaderIntl_Factory(t) {\n  return new (t || MatSortHeaderIntl)();\n};\n\nMatSortHeaderIntl.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function MatSortHeaderIntl_Factory() {\n    return new MatSortHeaderIntl();\n  },\n  token: MatSortHeaderIntl,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSortHeaderIntl, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/** @docs-private */\n\n\nfunction MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n/** @docs-private */\n\n\nconst MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to the sort header.\n\n/** @docs-private */\n\nconst _MatSortHeaderBase = mixinDisabled(class {});\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n\n\nclass MatSortHeader extends _MatSortHeaderBase {\n  constructor(\n  /**\n   * @deprecated `_intl` parameter isn't being used anymore and it'll be removed.\n   * @breaking-change 13.0.0\n   */\n  _intl, _changeDetectorRef, // `MatSort` is not optionally injected, but just asserted manually w/ better error.\n  // tslint:disable-next-line: lightweight-tokens\n  _sort, _columnDef, _focusMonitor, _elementRef,\n  /** @breaking-change 14.0.0 _ariaDescriber will be required. */\n  _ariaDescriber) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n    this._intl = _intl;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._sort = _sort;\n    this._columnDef = _columnDef;\n    this._focusMonitor = _focusMonitor;\n    this._elementRef = _elementRef;\n    this._ariaDescriber = _ariaDescriber;\n    /**\n     * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n     * provide an affordance that the header is sortable by showing on focus and hover.\n     */\n\n    this._showIndicatorHint = false;\n    /**\n     * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n     * position through the animation. If animations are currently disabled, the fromState is removed\n     * so that there is no animation displayed.\n     */\n\n    this._viewState = {};\n    /** The direction the arrow should be facing according to the current state. */\n\n    this._arrowDirection = '';\n    /**\n     * Whether the view state animation should show the transition between the `from` and `to` states.\n     */\n\n    this._disableViewStateAnimation = false;\n    /** Sets the position of the arrow that displays when sorted. */\n\n    this.arrowPosition = 'after'; // Default the action description to \"Sort\" because it's better than nothing.\n    // Without a description, the button's label comes from the sort header text content,\n    // which doesn't give any indication that it performs a sorting operation.\n\n    this._sortActionDescription = 'Sort';\n\n    if (!_sort && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._handleStateChanges();\n  }\n  /**\n   * Description applied to MatSortHeader's button element with aria-describedby. This text should\n   * describe the action that will occur when the user clicks the sort header.\n   */\n\n\n  get sortActionDescription() {\n    return this._sortActionDescription;\n  }\n\n  set sortActionDescription(value) {\n    this._updateSortActionDescription(value);\n  }\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n\n\n  get disableClear() {\n    return this._disableClear;\n  }\n\n  set disableClear(v) {\n    this._disableClear = coerceBooleanProperty(v);\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    } // Initialize the direction of the arrow and set the view state to be immediately that state.\n\n\n    this._updateArrowDirection();\n\n    this._setAnimationTransitionState({\n      toState: this._isSorted() ? 'active' : this._arrowDirection\n    });\n\n    this._sort.register(this);\n\n    this._sortButton = this._elementRef.nativeElement.querySelector('[role=\"button\"]');\n\n    this._updateSortActionDescription(this._sortActionDescription);\n  }\n\n  ngAfterViewInit() {\n    // We use the focus monitor because we also want to style\n    // things differently based on the focus origin.\n    this._focusMonitor.monitor(this._elementRef, true).subscribe(origin => {\n      const newState = !!origin;\n\n      if (newState !== this._showIndicatorHint) {\n        this._setIndicatorHintVisible(newState);\n\n        this._changeDetectorRef.markForCheck();\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    this._sort.deregister(this);\n\n    this._rerenderSubscription.unsubscribe();\n  }\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n\n\n  _setIndicatorHintVisible(visible) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) {\n      return;\n    }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({\n          fromState: this._arrowDirection,\n          toState: 'hint'\n        });\n      } else {\n        this._setAnimationTransitionState({\n          fromState: 'hint',\n          toState: this._arrowDirection\n        });\n      }\n    }\n  }\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n\n\n  _setAnimationTransitionState(viewState) {\n    this._viewState = viewState || {}; // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n\n    if (this._disableViewStateAnimation) {\n      this._viewState = {\n        toState: viewState.toState\n      };\n    }\n  }\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n\n\n  _toggleOnInteraction() {\n    this._sort.sort(this); // Do not show the animation if the header was already shown in the right position.\n\n\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n  }\n\n  _handleClick() {\n    if (!this._isDisabled()) {\n      this._sort.sort(this);\n    }\n  }\n\n  _handleKeydown(event) {\n    if (!this._isDisabled() && (event.keyCode === SPACE || event.keyCode === ENTER)) {\n      event.preventDefault();\n\n      this._toggleOnInteraction();\n    }\n  }\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n\n\n  _isSorted() {\n    return this._sort.active == this.id && (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n\n\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n  /** Returns the arrow position state (opacity, translation). */\n\n\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n\n\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ? this._sort.direction : this.start || this._sort.start;\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n\n\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) {\n      return 'none';\n    }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n  /** Whether the arrow inside the sort header should be rendered. */\n\n\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n\n  _updateSortActionDescription(newDescription) {\n    // We use AriaDescriber for the sort button instead of setting an `aria-label` because some\n    // screen readers (notably VoiceOver) will read both the column header *and* the button's label\n    // for every *cell* in the table, creating a lot of unnecessary noise.\n    var _a, _b; // If _sortButton is undefined, the component hasn't been initialized yet so there's\n    // nothing to update in the DOM.\n\n\n    if (this._sortButton) {\n      // removeDescription will no-op if there is no existing message.\n      // TODO(jelbourn): remove optional chaining when AriaDescriber is required.\n      (_a = this._ariaDescriber) === null || _a === void 0 ? void 0 : _a.removeDescription(this._sortButton, this._sortActionDescription);\n      (_b = this._ariaDescriber) === null || _b === void 0 ? void 0 : _b.describe(this._sortButton, newDescription);\n    }\n\n    this._sortActionDescription = newDescription;\n  }\n  /** Handles changes in the sorting state. */\n\n\n  _handleStateChanges() {\n    this._rerenderSubscription = merge(this._sort.sortChange, this._sort._stateChanges, this._intl.changes).subscribe(() => {\n      if (this._isSorted()) {\n        this._updateArrowDirection(); // Do not show the animation if the header was already shown in the right position.\n\n\n        if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n          this._disableViewStateAnimation = true;\n        }\n\n        this._setAnimationTransitionState({\n          fromState: this._arrowDirection,\n          toState: 'active'\n        });\n\n        this._showIndicatorHint = false;\n      } // If this header was recently active and now no longer sorted, animate away the arrow.\n\n\n      if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n        this._disableViewStateAnimation = false;\n\n        this._setAnimationTransitionState({\n          fromState: 'active',\n          toState: this._arrowDirection\n        });\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n}\n\nMatSortHeader.ɵfac = function MatSortHeader_Factory(t) {\n  return new (t || MatSortHeader)(ɵngcc0.ɵɵdirectiveInject(MatSortHeaderIntl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MatSort, 8), ɵngcc0.ɵɵdirectiveInject('MAT_SORT_HEADER_COLUMN_DEF', 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(AriaDescriber, 8));\n};\n\nMatSortHeader.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatSortHeader,\n  selectors: [[\"\", \"mat-sort-header\", \"\"]],\n  hostAttrs: [1, \"mat-sort-header\"],\n  hostVars: 3,\n  hostBindings: function MatSortHeader_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function MatSortHeader_click_HostBindingHandler() {\n        return ctx._handleClick();\n      })(\"keydown\", function MatSortHeader_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"mouseenter\", function MatSortHeader_mouseenter_HostBindingHandler() {\n        return ctx._setIndicatorHintVisible(true);\n      })(\"mouseleave\", function MatSortHeader_mouseleave_HostBindingHandler() {\n        return ctx._setIndicatorHintVisible(false);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-sort\", ctx._getAriaSortAttribute());\n      ɵngcc0.ɵɵclassProp(\"mat-sort-header-disabled\", ctx._isDisabled());\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    arrowPosition: \"arrowPosition\",\n    sortActionDescription: \"sortActionDescription\",\n    disableClear: \"disableClear\",\n    id: [\"mat-sort-header\", \"id\"],\n    start: \"start\"\n  },\n  exportAs: [\"matSortHeader\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  attrs: _c0,\n  ngContentSelectors: _c1,\n  decls: 4,\n  vars: 6,\n  consts: [[\"role\", \"button\", 1, \"mat-sort-header-container\", \"mat-focus-indicator\"], [1, \"mat-sort-header-content\"], [\"class\", \"mat-sort-header-arrow\", 4, \"ngIf\"], [1, \"mat-sort-header-arrow\"], [1, \"mat-sort-header-stem\"], [1, \"mat-sort-header-indicator\"], [1, \"mat-sort-header-pointer-left\"], [1, \"mat-sort-header-pointer-right\"], [1, \"mat-sort-header-pointer-middle\"]],\n  template: function MatSortHeader_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      ɵngcc0.ɵɵprojection(2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(3, MatSortHeader_div_3_Template, 6, 6, \"div\", 2);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-sort-header-sorted\", ctx._isSorted())(\"mat-sort-header-position-before\", ctx.arrowPosition == \"before\");\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx._isDisabled() ? null : 0);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx._renderArrow());\n    }\n  },\n  dependencies: [ɵngcc2.NgIf],\n  styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center;letter-spacing:normal;outline:0}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-container,[mat-sort-header].cdk-program-focused .mat-sort-header-container{border-bottom:solid 1px currentColor}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-content{text-align:center;display:flex;align-items:center}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matSortAnimations.indicator, matSortAnimations.leftPointer, matSortAnimations.rightPointer, matSortAnimations.arrowOpacity, matSortAnimations.arrowPosition, matSortAnimations.allowChildren]\n  },\n  changeDetection: 0\n});\n\nMatSortHeader.ctorParameters = () => [{\n  type: MatSortHeaderIntl\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: MatSort,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: ['MAT_SORT_HEADER_COLUMN_DEF']\n  }, {\n    type: Optional\n  }]\n}, {\n  type: FocusMonitor\n}, {\n  type: ElementRef\n}, {\n  type: AriaDescriber,\n  decorators: [{\n    type: Inject,\n    args: [AriaDescriber]\n  }, {\n    type: Optional\n  }]\n}];\n\nMatSortHeader.propDecorators = {\n  id: [{\n    type: Input,\n    args: ['mat-sort-header']\n  }],\n  arrowPosition: [{\n    type: Input\n  }],\n  start: [{\n    type: Input\n  }],\n  sortActionDescription: [{\n    type: Input\n  }],\n  disableClear: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSortHeader, [{\n    type: Component,\n    args: [{\n      selector: '[mat-sort-header]',\n      exportAs: 'matSortHeader',\n      template: \"<!--\\n  We set the `tabindex` on an element inside the table header, rather than the header itself,\\n  because of a bug in NVDA where having a `tabindex` on a `th` breaks keyboard navigation in the\\n  table (see https://github.com/nvaccess/nvda/issues/7718). This allows for the header to both\\n  be focusable, and have screen readers read out its `aria-sort` state. We prefer this approach\\n  over having a button with an `aria-label` inside the header, because the button's `aria-label`\\n  will be read out as the user is navigating the table's cell (see #13012).\\n\\n  The approach is based off of: https://dequeuniversity.com/library/aria/tables/sf-sortable-grid\\n-->\\n<div class=\\\"mat-sort-header-container mat-focus-indicator\\\"\\n     [class.mat-sort-header-sorted]=\\\"_isSorted()\\\"\\n     [class.mat-sort-header-position-before]=\\\"arrowPosition == 'before'\\\"\\n     [attr.tabindex]=\\\"_isDisabled() ? null : 0\\\"\\n     role=\\\"button\\\">\\n\\n  <!--\\n    TODO(crisbeto): this div isn't strictly necessary, but we have to keep it due to a large\\n    number of screenshot diff failures. It should be removed eventually. Note that the difference\\n    isn't visible with a shorter header, but once it breaks up into multiple lines, this element\\n    causes it to be center-aligned, whereas removing it will keep the text to the left.\\n  -->\\n  <div class=\\\"mat-sort-header-content\\\">\\n    <ng-content></ng-content>\\n  </div>\\n\\n  <!-- Disable animations while a current animation is running -->\\n  <div class=\\\"mat-sort-header-arrow\\\"\\n       *ngIf=\\\"_renderArrow()\\\"\\n       [@arrowOpacity]=\\\"_getArrowViewState()\\\"\\n       [@arrowPosition]=\\\"_getArrowViewState()\\\"\\n       [@allowChildren]=\\\"_getArrowDirectionState()\\\"\\n       (@arrowPosition.start)=\\\"_disableViewStateAnimation = true\\\"\\n       (@arrowPosition.done)=\\\"_disableViewStateAnimation = false\\\">\\n    <div class=\\\"mat-sort-header-stem\\\"></div>\\n    <div class=\\\"mat-sort-header-indicator\\\" [@indicator]=\\\"_getArrowDirectionState()\\\">\\n      <div class=\\\"mat-sort-header-pointer-left\\\" [@leftPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-right\\\" [@rightPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-middle\\\"></div>\\n    </div>\\n  </div>\\n</div>\\n\",\n      host: {\n        'class': 'mat-sort-header',\n        '(click)': '_handleClick()',\n        '(keydown)': '_handleKeydown($event)',\n        '(mouseenter)': '_setIndicatorHintVisible(true)',\n        '(mouseleave)': '_setIndicatorHintVisible(false)',\n        '[attr.aria-sort]': '_getAriaSortAttribute()',\n        '[class.mat-sort-header-disabled]': '_isDisabled()'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      inputs: ['disabled'],\n      animations: [matSortAnimations.indicator, matSortAnimations.leftPointer, matSortAnimations.rightPointer, matSortAnimations.arrowOpacity, matSortAnimations.arrowPosition, matSortAnimations.allowChildren],\n      styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center;letter-spacing:normal;outline:0}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-container,[mat-sort-header].cdk-program-focused .mat-sort-header-container{border-bottom:solid 1px currentColor}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-content{text-align:center;display:flex;align-items:center}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: MatSortHeaderIntl\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: MatSort,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: ['MAT_SORT_HEADER_COLUMN_DEF']\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.AriaDescriber,\n      decorators: [{\n        type: Inject,\n        args: [AriaDescriber]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    arrowPosition: [{\n      type: Input\n    }],\n    sortActionDescription: [{\n      type: Input\n    }],\n    disableClear: [{\n      type: Input\n    }],\n    id: [{\n      type: Input,\n      args: ['mat-sort-header']\n    }],\n    start: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatSortModule {}\n\nMatSortModule.ɵfac = function MatSortModule_Factory(t) {\n  return new (t || MatSortModule)();\n};\n\nMatSortModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatSortModule\n});\nMatSortModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER],\n  imports: [CommonModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSortModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatCommonModule],\n      exports: [MatSort, MatSortHeader],\n      declarations: [MatSort, MatSortHeader],\n      providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSortModule, {\n    declarations: function () {\n      return [MatSort, MatSortHeader];\n    },\n    imports: function () {\n      return [CommonModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatSort, MatSortHeader];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SORT_DEFAULT_OPTIONS, MAT_SORT_HEADER_INTL_PROVIDER, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MatSort, MatSortHeader, MatSortHeaderIntl, MatSortModule, matSortAnimations };","map":{"version":3,"names":["i0","InjectionToken","EventEmitter","Directive","Optional","Inject","Input","Output","Injectable","SkipSelf","Component","ViewEncapsulation","ChangeDetectionStrategy","ChangeDetectorRef","ElementRef","NgModule","FocusMonitor","AriaDescriber","coerceBooleanProperty","SPACE","ENTER","mixinInitialized","mixinDisabled","AnimationDurations","AnimationCurves","MatCommonModule","Subject","merge","trigger","state","style","transition","animate","keyframes","query","animateChild","CommonModule","ɵngcc0","ɵngcc1","ɵngcc2","_c0","MatSortHeader_div_3_Template","rf","ctx","_r2","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","MatSortHeader_div_3_Template_div_animation_arrowPosition_start_0_listener","ɵɵrestoreView","ctx_r1","ɵɵnextContext","ɵɵresetView","_disableViewStateAnimation","MatSortHeader_div_3_Template_div_animation_arrowPosition_done_0_listener","ctx_r3","ɵɵelement","ɵɵelementEnd","ctx_r0","ɵɵproperty","_getArrowViewState","_getArrowDirectionState","ɵɵadvance","_c1","getSortDuplicateSortableIdError","id","Error","getSortHeaderNotContainedWithinSortError","getSortHeaderMissingIdError","getSortInvalidDirectionError","direction","MAT_SORT_DEFAULT_OPTIONS","_MatSortBase","MatSort","constructor","_defaultOptions","sortables","Map","_stateChanges","start","_direction","sortChange","ngDevMode","disableClear","_disableClear","v","register","sortable","has","set","deregister","delete","sort","active","getNextSortDirection","emit","_a","_b","_c","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","indexOf","length","ngOnInit","_markInitialized","ngOnChanges","next","ngOnDestroy","complete","ɵfac","MatSort_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","inputs","disabled","outputs","exportAs","features","ɵɵInheritDefinitionFeature","ɵɵNgOnChangesFeature","ctorParameters","undefined","decorators","args","propDecorators","ɵsetClassMetadata","selector","host","sortOrder","reverse","push","SORT_ANIMATION_TRANSITION","ENTERING","STANDARD_CURVE","matSortAnimations","indicator","transform","leftPointer","rightPointer","arrowOpacity","opacity","arrowPosition","allowChildren","optional","MatSortHeaderIntl","changes","MatSortHeaderIntl_Factory","ɵprov","ɵɵdefineInjectable","factory","token","providedIn","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","parentIntl","MAT_SORT_HEADER_INTL_PROVIDER","provide","deps","useFactory","_MatSortHeaderBase","MatSortHeader","_intl","_changeDetectorRef","_sort","_columnDef","_focusMonitor","_elementRef","_ariaDescriber","_showIndicatorHint","_viewState","_arrowDirection","_sortActionDescription","_handleStateChanges","sortActionDescription","value","_updateSortActionDescription","name","_updateArrowDirection","_setAnimationTransitionState","toState","_isSorted","_sortButton","nativeElement","querySelector","ngAfterViewInit","monitor","subscribe","origin","newState","_setIndicatorHintVisible","markForCheck","stopMonitoring","_rerenderSubscription","unsubscribe","visible","_isDisabled","fromState","viewState","_toggleOnInteraction","_handleClick","_handleKeydown","event","keyCode","preventDefault","_getAriaSortAttribute","_renderArrow","newDescription","removeDescription","describe","MatSortHeader_Factory","ɵcmp","ɵɵdefineComponent","hostVars","hostBindings","MatSortHeader_HostBindings","MatSortHeader_click_HostBindingHandler","MatSortHeader_keydown_HostBindingHandler","$event","MatSortHeader_mouseenter_HostBindingHandler","MatSortHeader_mouseleave_HostBindingHandler","ɵɵattribute","ɵɵclassProp","attrs","ngContentSelectors","decls","vars","consts","template","MatSortHeader_Template","ɵɵprojectionDef","ɵɵprojection","ɵɵtemplate","dependencies","NgIf","styles","encapsulation","data","animation","changeDetection","None","OnPush","animations","MatSortModule","MatSortModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sources":["C:/Team-43-IMOS/Team-43-IMOS/Imos/node_modules/@angular/material/__ivy_ngcc__/fesm2015/sort.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Directive, Optional, Inject, Input, Output, Injectable, SkipSelf, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, NgModule } from '@angular/core';\nimport { FocusMonitor, AriaDescriber } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SPACE, ENTER } from '@angular/cdk/keycodes';\nimport { mixinInitialized, mixinDisabled, AnimationDurations, AnimationCurves, MatCommonModule } from '@angular/material/core';\nimport { Subject, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate, keyframes, query, animateChild } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/common';\n\nconst _c0 = [\"mat-sort-header\", \"\"];\nfunction MatSortHeader_div_3_Template(rf, ctx) { if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 3);\n    ɵngcc0.ɵɵlistener(\"@arrowPosition.start\", function MatSortHeader_div_3_Template_div_animation_arrowPosition_start_0_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r1._disableViewStateAnimation = true); })(\"@arrowPosition.done\", function MatSortHeader_div_3_Template_div_animation_arrowPosition_done_0_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r3._disableViewStateAnimation = false); });\n    ɵngcc0.ɵɵelement(1, \"div\", 4);\n    ɵngcc0.ɵɵelementStart(2, \"div\", 5);\n    ɵngcc0.ɵɵelement(3, \"div\", 6)(4, \"div\", 7)(5, \"div\", 8);\n    ɵngcc0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@arrowOpacity\", ctx_r0._getArrowViewState())(\"@arrowPosition\", ctx_r0._getArrowViewState())(\"@allowChildren\", ctx_r0._getArrowDirectionState());\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"@indicator\", ctx_r0._getArrowDirectionState());\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"@leftPointer\", ctx_r0._getArrowDirectionState());\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"@rightPointer\", ctx_r0._getArrowDirectionState());\n} }\nconst _c1 = [\"*\"];\nfunction getSortDuplicateSortableIdError(id) {\n    return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n/** @docs-private */\nfunction getSortHeaderNotContainedWithinSortError() {\n    return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n/** @docs-private */\nfunction getSortHeaderMissingIdError() {\n    return Error(`MatSortHeader must be provided with a unique id.`);\n}\n/** @docs-private */\nfunction getSortInvalidDirectionError(direction) {\n    return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-sort`. */\nconst MAT_SORT_DEFAULT_OPTIONS = new InjectionToken('MAT_SORT_DEFAULT_OPTIONS');\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nconst _MatSortBase = mixinInitialized(mixinDisabled(class {\n}));\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\nclass MatSort extends _MatSortBase {\n    constructor(_defaultOptions) {\n        super();\n        this._defaultOptions = _defaultOptions;\n        /** Collection of all registered sortables that this directive manages. */\n        this.sortables = new Map();\n        /** Used to notify any child components listening to state changes. */\n        this._stateChanges = new Subject();\n        /**\n         * The direction to set when an MatSortable is initially sorted.\n         * May be overriden by the MatSortable's sort start.\n         */\n        this.start = 'asc';\n        this._direction = '';\n        /** Event emitted when the user changes either the active sort or sort direction. */\n        this.sortChange = new EventEmitter();\n    }\n    /** The sort direction of the currently active MatSortable. */\n    get direction() { return this._direction; }\n    set direction(direction) {\n        if (direction && direction !== 'asc' && direction !== 'desc' &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getSortInvalidDirectionError(direction);\n        }\n        this._direction = direction;\n    }\n    /**\n     * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n     * May be overriden by the MatSortable's disable clear input.\n     */\n    get disableClear() { return this._disableClear; }\n    set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n    /**\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n     * collection of MatSortables.\n     */\n    register(sortable) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!sortable.id) {\n                throw getSortHeaderMissingIdError();\n            }\n            if (this.sortables.has(sortable.id)) {\n                throw getSortDuplicateSortableIdError(sortable.id);\n            }\n        }\n        this.sortables.set(sortable.id, sortable);\n    }\n    /**\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n     * collection of contained MatSortables.\n     */\n    deregister(sortable) {\n        this.sortables.delete(sortable.id);\n    }\n    /** Sets the active sort id and determines the new sort direction. */\n    sort(sortable) {\n        if (this.active != sortable.id) {\n            this.active = sortable.id;\n            this.direction = sortable.start ? sortable.start : this.start;\n        }\n        else {\n            this.direction = this.getNextSortDirection(sortable);\n        }\n        this.sortChange.emit({ active: this.active, direction: this.direction });\n    }\n    /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n    getNextSortDirection(sortable) {\n        var _a, _b, _c;\n        if (!sortable) {\n            return '';\n        }\n        // Get the sort direction cycle with the potential sortable overrides.\n        const disableClear = (_b = (_a = sortable === null || sortable === void 0 ? void 0 : sortable.disableClear) !== null && _a !== void 0 ? _a : this.disableClear) !== null && _b !== void 0 ? _b : !!((_c = this._defaultOptions) === null || _c === void 0 ? void 0 : _c.disableClear);\n        let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n        // Get and return the next direction in the cycle\n        let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n        if (nextDirectionIndex >= sortDirectionCycle.length) {\n            nextDirectionIndex = 0;\n        }\n        return sortDirectionCycle[nextDirectionIndex];\n    }\n    ngOnInit() {\n        this._markInitialized();\n    }\n    ngOnChanges() {\n        this._stateChanges.next();\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nMatSort.ɵfac = function MatSort_Factory(t) { return new (t || MatSort)(ɵngcc0.ɵɵdirectiveInject(MAT_SORT_DEFAULT_OPTIONS, 8)); };\nMatSort.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatSort, selectors: [[\"\", \"matSort\", \"\"]], hostAttrs: [1, \"mat-sort\"], inputs: { disabled: [\"matSortDisabled\", \"disabled\"], start: [\"matSortStart\", \"start\"], direction: [\"matSortDirection\", \"direction\"], disableClear: [\"matSortDisableClear\", \"disableClear\"], active: [\"matSortActive\", \"active\"] }, outputs: { sortChange: \"matSortChange\" }, exportAs: [\"matSort\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nMatSort.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_SORT_DEFAULT_OPTIONS,] }] }\n];\nMatSort.propDecorators = {\n    active: [{ type: Input, args: ['matSortActive',] }],\n    start: [{ type: Input, args: ['matSortStart',] }],\n    direction: [{ type: Input, args: ['matSortDirection',] }],\n    disableClear: [{ type: Input, args: ['matSortDisableClear',] }],\n    sortChange: [{ type: Output, args: ['matSortChange',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSort, [{\n        type: Directive,\n        args: [{\n                selector: '[matSort]',\n                exportAs: 'matSort',\n                host: { 'class': 'mat-sort' },\n                inputs: ['disabled: matSortDisabled']\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_SORT_DEFAULT_OPTIONS]\n            }] }]; }, { start: [{\n            type: Input,\n            args: ['matSortStart']\n        }], sortChange: [{\n            type: Output,\n            args: ['matSortChange']\n        }], direction: [{\n            type: Input,\n            args: ['matSortDirection']\n        }], disableClear: [{\n            type: Input,\n            args: ['matSortDisableClear']\n        }], active: [{\n            type: Input,\n            args: ['matSortActive']\n        }] }); })();\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start, disableClear) {\n    let sortOrder = ['asc', 'desc'];\n    if (start == 'desc') {\n        sortOrder.reverse();\n    }\n    if (!disableClear) {\n        sortOrder.push('');\n    }\n    return sortOrder;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n    AnimationCurves.STANDARD_CURVE;\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nconst matSortAnimations = {\n    /** Animation that moves the sort indicator. */\n    indicator: trigger('indicator', [\n        state('active-asc, asc', style({ transform: 'translateY(0px)' })),\n        // 10px is the height of the sort indicator, minus the width of the pointers\n        state('active-desc, desc', style({ transform: 'translateY(10px)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n    leftPointer: trigger('leftPointer', [\n        state('active-asc, asc', style({ transform: 'rotate(-45deg)' })),\n        state('active-desc, desc', style({ transform: 'rotate(45deg)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n    rightPointer: trigger('rightPointer', [\n        state('active-asc, asc', style({ transform: 'rotate(45deg)' })),\n        state('active-desc, desc', style({ transform: 'rotate(-45deg)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /** Animation that controls the arrow opacity. */\n    arrowOpacity: trigger('arrowOpacity', [\n        state('desc-to-active, asc-to-active, active', style({ opacity: 1 })),\n        state('desc-to-hint, asc-to-hint, hint', style({ opacity: .54 })),\n        state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', style({ opacity: 0 })),\n        // Transition between all states except for immediate transitions\n        transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n        transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /**\n     * Animation for the translation of the arrow as a whole. States are separated into two\n     * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n     * peek, and active. The other states define a specific animation (source-to-destination)\n     * and are determined as a function of their prev user-perceived state and what the next state\n     * should be.\n     */\n    arrowPosition: trigger('arrowPosition', [\n        // Hidden Above => Hint Center\n        transition('* => desc-to-hint, * => desc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(-25%)' }),\n            style({ transform: 'translateY(0)' })\n        ]))),\n        // Hint Center => Hidden Below\n        transition('* => hint-to-desc, * => active-to-desc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(0)' }),\n            style({ transform: 'translateY(25%)' })\n        ]))),\n        // Hidden Below => Hint Center\n        transition('* => asc-to-hint, * => asc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(25%)' }),\n            style({ transform: 'translateY(0)' })\n        ]))),\n        // Hint Center => Hidden Above\n        transition('* => hint-to-asc, * => active-to-asc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(0)' }),\n            style({ transform: 'translateY(-25%)' })\n        ]))),\n        state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', style({ transform: 'translateY(0)' })),\n        state('hint-to-desc, active-to-desc, desc', style({ transform: 'translateY(-25%)' })),\n        state('hint-to-asc, active-to-asc, asc', style({ transform: 'translateY(25%)' })),\n    ]),\n    /** Necessary trigger that calls animate on children animations. */\n    allowChildren: trigger('allowChildren', [\n        transition('* <=> *', [\n            query('@*', animateChild(), { optional: true })\n        ])\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\nclass MatSortHeaderIntl {\n    constructor() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new Subject();\n    }\n}\nMatSortHeaderIntl.ɵfac = function MatSortHeaderIntl_Factory(t) { return new (t || MatSortHeaderIntl)(); };\nMatSortHeaderIntl.ɵprov = i0.ɵɵdefineInjectable({ factory: function MatSortHeaderIntl_Factory() { return new MatSortHeaderIntl(); }, token: MatSortHeaderIntl, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSortHeaderIntl, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return []; }, null); })();\n/** @docs-private */\nfunction MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatSortHeaderIntl();\n}\n/** @docs-private */\nconst MAT_SORT_HEADER_INTL_PROVIDER = {\n    // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n    provide: MatSortHeaderIntl,\n    deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n    useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nconst _MatSortHeaderBase = mixinDisabled(class {\n});\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nclass MatSortHeader extends _MatSortHeaderBase {\n    constructor(\n    /**\n     * @deprecated `_intl` parameter isn't being used anymore and it'll be removed.\n     * @breaking-change 13.0.0\n     */\n    _intl, _changeDetectorRef, \n    // `MatSort` is not optionally injected, but just asserted manually w/ better error.\n    // tslint:disable-next-line: lightweight-tokens\n    _sort, _columnDef, _focusMonitor, _elementRef, \n    /** @breaking-change 14.0.0 _ariaDescriber will be required. */\n    _ariaDescriber) {\n        // Note that we use a string token for the `_columnDef`, because the value is provided both by\n        // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n        // and we want to avoid having the sort header depending on the CDK table because\n        // of this single reference.\n        super();\n        this._intl = _intl;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._sort = _sort;\n        this._columnDef = _columnDef;\n        this._focusMonitor = _focusMonitor;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        /**\n         * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n         * provide an affordance that the header is sortable by showing on focus and hover.\n         */\n        this._showIndicatorHint = false;\n        /**\n         * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n         * position through the animation. If animations are currently disabled, the fromState is removed\n         * so that there is no animation displayed.\n         */\n        this._viewState = {};\n        /** The direction the arrow should be facing according to the current state. */\n        this._arrowDirection = '';\n        /**\n         * Whether the view state animation should show the transition between the `from` and `to` states.\n         */\n        this._disableViewStateAnimation = false;\n        /** Sets the position of the arrow that displays when sorted. */\n        this.arrowPosition = 'after';\n        // Default the action description to \"Sort\" because it's better than nothing.\n        // Without a description, the button's label comes from the sort header text content,\n        // which doesn't give any indication that it performs a sorting operation.\n        this._sortActionDescription = 'Sort';\n        if (!_sort && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getSortHeaderNotContainedWithinSortError();\n        }\n        this._handleStateChanges();\n    }\n    /**\n     * Description applied to MatSortHeader's button element with aria-describedby. This text should\n     * describe the action that will occur when the user clicks the sort header.\n     */\n    get sortActionDescription() {\n        return this._sortActionDescription;\n    }\n    set sortActionDescription(value) {\n        this._updateSortActionDescription(value);\n    }\n    /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n    get disableClear() { return this._disableClear; }\n    set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n    ngOnInit() {\n        if (!this.id && this._columnDef) {\n            this.id = this._columnDef.name;\n        }\n        // Initialize the direction of the arrow and set the view state to be immediately that state.\n        this._updateArrowDirection();\n        this._setAnimationTransitionState({ toState: this._isSorted() ? 'active' : this._arrowDirection });\n        this._sort.register(this);\n        this._sortButton = this._elementRef.nativeElement.querySelector('[role=\"button\"]');\n        this._updateSortActionDescription(this._sortActionDescription);\n    }\n    ngAfterViewInit() {\n        // We use the focus monitor because we also want to style\n        // things differently based on the focus origin.\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(origin => {\n            const newState = !!origin;\n            if (newState !== this._showIndicatorHint) {\n                this._setIndicatorHintVisible(newState);\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._sort.deregister(this);\n        this._rerenderSubscription.unsubscribe();\n    }\n    /**\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\n     */\n    _setIndicatorHintVisible(visible) {\n        // No-op if the sort header is disabled - should not make the hint visible.\n        if (this._isDisabled() && visible) {\n            return;\n        }\n        this._showIndicatorHint = visible;\n        if (!this._isSorted()) {\n            this._updateArrowDirection();\n            if (this._showIndicatorHint) {\n                this._setAnimationTransitionState({ fromState: this._arrowDirection, toState: 'hint' });\n            }\n            else {\n                this._setAnimationTransitionState({ fromState: 'hint', toState: this._arrowDirection });\n            }\n        }\n    }\n    /**\n     * Sets the animation transition view state for the arrow's position and opacity. If the\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n     * no animation appears.\n     */\n    _setAnimationTransitionState(viewState) {\n        this._viewState = viewState || {};\n        // If the animation for arrow position state (opacity/translation) should be disabled,\n        // remove the fromState so that it jumps right to the toState.\n        if (this._disableViewStateAnimation) {\n            this._viewState = { toState: viewState.toState };\n        }\n    }\n    /** Triggers the sort on this sort header and removes the indicator hint. */\n    _toggleOnInteraction() {\n        this._sort.sort(this);\n        // Do not show the animation if the header was already shown in the right position.\n        if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = true;\n        }\n    }\n    _handleClick() {\n        if (!this._isDisabled()) {\n            this._sort.sort(this);\n        }\n    }\n    _handleKeydown(event) {\n        if (!this._isDisabled() && (event.keyCode === SPACE || event.keyCode === ENTER)) {\n            event.preventDefault();\n            this._toggleOnInteraction();\n        }\n    }\n    /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n    _isSorted() {\n        return this._sort.active == this.id &&\n            (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n    }\n    /** Returns the animation state for the arrow direction (indicator and pointers). */\n    _getArrowDirectionState() {\n        return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n    }\n    /** Returns the arrow position state (opacity, translation). */\n    _getArrowViewState() {\n        const fromState = this._viewState.fromState;\n        return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n    }\n    /**\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n     * active sorted direction. The reason this is updated through a function is because the direction\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n     * preserving its direction, even though the next sort direction is actually different and should\n     * only be changed once the arrow displays again (hint or activation).\n     */\n    _updateArrowDirection() {\n        this._arrowDirection = this._isSorted() ?\n            this._sort.direction :\n            (this.start || this._sort.start);\n    }\n    _isDisabled() {\n        return this._sort.disabled || this.disabled;\n    }\n    /**\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n     * says that the aria-sort property should only be present on one header at a time, so removing\n     * ensures this is true.\n     */\n    _getAriaSortAttribute() {\n        if (!this._isSorted()) {\n            return 'none';\n        }\n        return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n    }\n    /** Whether the arrow inside the sort header should be rendered. */\n    _renderArrow() {\n        return !this._isDisabled() || this._isSorted();\n    }\n    _updateSortActionDescription(newDescription) {\n        // We use AriaDescriber for the sort button instead of setting an `aria-label` because some\n        // screen readers (notably VoiceOver) will read both the column header *and* the button's label\n        // for every *cell* in the table, creating a lot of unnecessary noise.\n        var _a, _b;\n        // If _sortButton is undefined, the component hasn't been initialized yet so there's\n        // nothing to update in the DOM.\n        if (this._sortButton) {\n            // removeDescription will no-op if there is no existing message.\n            // TODO(jelbourn): remove optional chaining when AriaDescriber is required.\n            (_a = this._ariaDescriber) === null || _a === void 0 ? void 0 : _a.removeDescription(this._sortButton, this._sortActionDescription);\n            (_b = this._ariaDescriber) === null || _b === void 0 ? void 0 : _b.describe(this._sortButton, newDescription);\n        }\n        this._sortActionDescription = newDescription;\n    }\n    /** Handles changes in the sorting state. */\n    _handleStateChanges() {\n        this._rerenderSubscription =\n            merge(this._sort.sortChange, this._sort._stateChanges, this._intl.changes).subscribe(() => {\n                if (this._isSorted()) {\n                    this._updateArrowDirection();\n                    // Do not show the animation if the header was already shown in the right position.\n                    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n                        this._disableViewStateAnimation = true;\n                    }\n                    this._setAnimationTransitionState({ fromState: this._arrowDirection, toState: 'active' });\n                    this._showIndicatorHint = false;\n                }\n                // If this header was recently active and now no longer sorted, animate away the arrow.\n                if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n                    this._disableViewStateAnimation = false;\n                    this._setAnimationTransitionState({ fromState: 'active', toState: this._arrowDirection });\n                }\n                this._changeDetectorRef.markForCheck();\n            });\n    }\n}\nMatSortHeader.ɵfac = function MatSortHeader_Factory(t) { return new (t || MatSortHeader)(ɵngcc0.ɵɵdirectiveInject(MatSortHeaderIntl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MatSort, 8), ɵngcc0.ɵɵdirectiveInject('MAT_SORT_HEADER_COLUMN_DEF', 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(AriaDescriber, 8)); };\nMatSortHeader.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSortHeader, selectors: [[\"\", \"mat-sort-header\", \"\"]], hostAttrs: [1, \"mat-sort-header\"], hostVars: 3, hostBindings: function MatSortHeader_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatSortHeader_click_HostBindingHandler() { return ctx._handleClick(); })(\"keydown\", function MatSortHeader_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"mouseenter\", function MatSortHeader_mouseenter_HostBindingHandler() { return ctx._setIndicatorHintVisible(true); })(\"mouseleave\", function MatSortHeader_mouseleave_HostBindingHandler() { return ctx._setIndicatorHintVisible(false); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-sort\", ctx._getAriaSortAttribute());\n        ɵngcc0.ɵɵclassProp(\"mat-sort-header-disabled\", ctx._isDisabled());\n    } }, inputs: { disabled: \"disabled\", arrowPosition: \"arrowPosition\", sortActionDescription: \"sortActionDescription\", disableClear: \"disableClear\", id: [\"mat-sort-header\", \"id\"], start: \"start\" }, exportAs: [\"matSortHeader\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c0, ngContentSelectors: _c1, decls: 4, vars: 6, consts: [[\"role\", \"button\", 1, \"mat-sort-header-container\", \"mat-focus-indicator\"], [1, \"mat-sort-header-content\"], [\"class\", \"mat-sort-header-arrow\", 4, \"ngIf\"], [1, \"mat-sort-header-arrow\"], [1, \"mat-sort-header-stem\"], [1, \"mat-sort-header-indicator\"], [1, \"mat-sort-header-pointer-left\"], [1, \"mat-sort-header-pointer-right\"], [1, \"mat-sort-header-pointer-middle\"]], template: function MatSortHeader_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(3, MatSortHeader_div_3_Template, 6, 6, \"div\", 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-sort-header-sorted\", ctx._isSorted())(\"mat-sort-header-position-before\", ctx.arrowPosition == \"before\");\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx._isDisabled() ? null : 0);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._renderArrow());\n    } }, dependencies: [ɵngcc2.NgIf], styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center;letter-spacing:normal;outline:0}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-container,[mat-sort-header].cdk-program-focused .mat-sort-header-container{border-bottom:solid 1px currentColor}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-content{text-align:center;display:flex;align-items:center}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\\n\"], encapsulation: 2, data: { animation: [\n            matSortAnimations.indicator,\n            matSortAnimations.leftPointer,\n            matSortAnimations.rightPointer,\n            matSortAnimations.arrowOpacity,\n            matSortAnimations.arrowPosition,\n            matSortAnimations.allowChildren,\n        ] }, changeDetection: 0 });\nMatSortHeader.ctorParameters = () => [\n    { type: MatSortHeaderIntl },\n    { type: ChangeDetectorRef },\n    { type: MatSort, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Inject, args: ['MAT_SORT_HEADER_COLUMN_DEF',] }, { type: Optional }] },\n    { type: FocusMonitor },\n    { type: ElementRef },\n    { type: AriaDescriber, decorators: [{ type: Inject, args: [AriaDescriber,] }, { type: Optional }] }\n];\nMatSortHeader.propDecorators = {\n    id: [{ type: Input, args: ['mat-sort-header',] }],\n    arrowPosition: [{ type: Input }],\n    start: [{ type: Input }],\n    sortActionDescription: [{ type: Input }],\n    disableClear: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSortHeader, [{\n        type: Component,\n        args: [{ selector: '[mat-sort-header]', exportAs: 'matSortHeader', template: \"<!--\\n  We set the `tabindex` on an element inside the table header, rather than the header itself,\\n  because of a bug in NVDA where having a `tabindex` on a `th` breaks keyboard navigation in the\\n  table (see https://github.com/nvaccess/nvda/issues/7718). This allows for the header to both\\n  be focusable, and have screen readers read out its `aria-sort` state. We prefer this approach\\n  over having a button with an `aria-label` inside the header, because the button's `aria-label`\\n  will be read out as the user is navigating the table's cell (see #13012).\\n\\n  The approach is based off of: https://dequeuniversity.com/library/aria/tables/sf-sortable-grid\\n-->\\n<div class=\\\"mat-sort-header-container mat-focus-indicator\\\"\\n     [class.mat-sort-header-sorted]=\\\"_isSorted()\\\"\\n     [class.mat-sort-header-position-before]=\\\"arrowPosition == 'before'\\\"\\n     [attr.tabindex]=\\\"_isDisabled() ? null : 0\\\"\\n     role=\\\"button\\\">\\n\\n  <!--\\n    TODO(crisbeto): this div isn't strictly necessary, but we have to keep it due to a large\\n    number of screenshot diff failures. It should be removed eventually. Note that the difference\\n    isn't visible with a shorter header, but once it breaks up into multiple lines, this element\\n    causes it to be center-aligned, whereas removing it will keep the text to the left.\\n  -->\\n  <div class=\\\"mat-sort-header-content\\\">\\n    <ng-content></ng-content>\\n  </div>\\n\\n  <!-- Disable animations while a current animation is running -->\\n  <div class=\\\"mat-sort-header-arrow\\\"\\n       *ngIf=\\\"_renderArrow()\\\"\\n       [@arrowOpacity]=\\\"_getArrowViewState()\\\"\\n       [@arrowPosition]=\\\"_getArrowViewState()\\\"\\n       [@allowChildren]=\\\"_getArrowDirectionState()\\\"\\n       (@arrowPosition.start)=\\\"_disableViewStateAnimation = true\\\"\\n       (@arrowPosition.done)=\\\"_disableViewStateAnimation = false\\\">\\n    <div class=\\\"mat-sort-header-stem\\\"></div>\\n    <div class=\\\"mat-sort-header-indicator\\\" [@indicator]=\\\"_getArrowDirectionState()\\\">\\n      <div class=\\\"mat-sort-header-pointer-left\\\" [@leftPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-right\\\" [@rightPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-middle\\\"></div>\\n    </div>\\n  </div>\\n</div>\\n\", host: {\n                    'class': 'mat-sort-header',\n                    '(click)': '_handleClick()',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(mouseenter)': '_setIndicatorHintVisible(true)',\n                    '(mouseleave)': '_setIndicatorHintVisible(false)',\n                    '[attr.aria-sort]': '_getAriaSortAttribute()',\n                    '[class.mat-sort-header-disabled]': '_isDisabled()'\n                }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, inputs: ['disabled'], animations: [\n                    matSortAnimations.indicator,\n                    matSortAnimations.leftPointer,\n                    matSortAnimations.rightPointer,\n                    matSortAnimations.arrowOpacity,\n                    matSortAnimations.arrowPosition,\n                    matSortAnimations.allowChildren,\n                ], styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center;letter-spacing:normal;outline:0}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-container,[mat-sort-header].cdk-program-focused .mat-sort-header-container{border-bottom:solid 1px currentColor}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-content{text-align:center;display:flex;align-items:center}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\\n\"] }]\n    }], function () { return [{ type: MatSortHeaderIntl }, { type: ɵngcc0.ChangeDetectorRef }, { type: MatSort, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: ['MAT_SORT_HEADER_COLUMN_DEF']\n            }, {\n                type: Optional\n            }] }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.AriaDescriber, decorators: [{\n                type: Inject,\n                args: [AriaDescriber]\n            }, {\n                type: Optional\n            }] }]; }, { arrowPosition: [{\n            type: Input\n        }], sortActionDescription: [{\n            type: Input\n        }], disableClear: [{\n            type: Input\n        }], id: [{\n            type: Input,\n            args: ['mat-sort-header']\n        }], start: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSortModule {\n}\nMatSortModule.ɵfac = function MatSortModule_Factory(t) { return new (t || MatSortModule)(); };\nMatSortModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSortModule });\nMatSortModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_SORT_HEADER_INTL_PROVIDER], imports: [CommonModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSortModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, MatCommonModule],\n                exports: [MatSort, MatSortHeader],\n                declarations: [MatSort, MatSortHeader],\n                providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSortModule, { declarations: function () { return [MatSort, MatSortHeader]; }, imports: function () { return [CommonModule, MatCommonModule]; }, exports: function () { return [MatSort, MatSortHeader]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SORT_DEFAULT_OPTIONS, MAT_SORT_HEADER_INTL_PROVIDER, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MatSort, MatSortHeader, MatSortHeaderIntl, MatSortModule, matSortAnimations };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}