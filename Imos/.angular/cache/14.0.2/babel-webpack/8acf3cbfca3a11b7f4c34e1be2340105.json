{"ast":null,"code":"import { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, EventEmitter, ChangeDetectorRef, NgZone, ElementRef, Optional, Inject, Self, Attribute, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, ErrorStateMatcher, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { MatFormField, MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/material/form-field';\nimport * as ɵngcc7 from '@angular/common';\nimport * as ɵngcc8 from '@angular/cdk/overlay';\nconst _c0 = [\"trigger\"];\nconst _c1 = [\"panel\"];\n\nfunction MatSelect_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.placeholder);\n  }\n}\n\nfunction MatSelect_span_5_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 12);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.triggerValue);\n  }\n}\n\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n  }\n}\n\nfunction MatSelect_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\n    ɵngcc0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 10);\n    ɵngcc0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 11);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n  }\n}\n\nfunction MatSelect_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 13)(1, \"div\", 14, 15);\n    ɵngcc0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      const ctx_r8 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r8._panelDoneAnimatingStream.next($event.toState));\n    })(\"keydown\", function MatSelect_ng_template_8_Template_div_keydown_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      const ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r10._handleKeydown($event));\n    });\n    ɵngcc0.ɵɵprojection(3, 1);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transformPanelWrap\", undefined);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    ɵngcc0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n    ɵngcc0.ɵɵattribute(\"id\", ctx_r4.id + \"-panel\")(\"aria-multiselectable\", ctx_r4.multiple)(\"aria-label\", ctx_r4.ariaLabel || null)(\"aria-labelledby\", ctx_r4._getPanelAriaLabelledby());\n  }\n}\n\nconst _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nconst _c3 = [\"mat-select-trigger\", \"*\"];\nconst matSelectAnimations = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [transition('* => void', query('@transformPanel', [animateChild()], {\n    optional: true\n  }))]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [state('void', style({\n    transform: 'scaleY(0.8)',\n    minWidth: '100%',\n    opacity: 0\n  })), state('showing', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)',\n    transform: 'scaleY(1)'\n  })), state('showing-multiple', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 64px)',\n    transform: 'scaleY(1)'\n  })), transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')), transition('* => void', animate('100ms 25ms linear', style({\n    opacity: 0\n  })))])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\n\nfunction getMatSelectDynamicMultipleError() {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\n\n\nfunction getMatSelectNonArrayValueError() {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\n\n\nfunction getMatSelectNonFunctionValueError() {\n  return Error('`compareWith` must be a function.');\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel. */\n\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/** The panel's padding on the x-axis. */\n\nconst SELECT_PANEL_PADDING_X = 16;\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\n\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/** The height of the select items in `em` units. */\n\nconst SELECT_ITEM_HEIGHT_EM = 3; // TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\n\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\n\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\n\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\n\n\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\n\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/** Change event object that is emitted when the select value has changed. */\n\nclass MatSelectChange {\n  constructor(\n  /** Reference to the select that emitted the change event. */\n  source,\n  /** Current value of the select that emitted the event. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n\n} // Boilerplate for applying mixins to MatSelect.\n\n/** @docs-private */\n\n\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(class {\n  constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n    this._elementRef = _elementRef;\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n\n}))));\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\n\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n\nclass MatSelectTrigger {}\n\nMatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) {\n  return new (t || MatSelectTrigger)();\n};\n\nMatSelectTrigger.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatSelectTrigger,\n  selectors: [[\"mat-select-trigger\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_SELECT_TRIGGER,\n    useExisting: MatSelectTrigger\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectTrigger, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-select-trigger',\n      providers: [{\n        provide: MAT_SELECT_TRIGGER,\n        useExisting: MatSelectTrigger\n      }]\n    }]\n  }], null, null);\n})();\n/** Base class with all of the `MatSelect` functionality. */\n\n\nclass _MatSelectBase extends _MatSelectMixinBase {\n  constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n    var _a, _b, _c;\n\n    super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this._viewportRuler = _viewportRuler;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._ngZone = _ngZone;\n    this._dir = _dir;\n    this._parentFormField = _parentFormField;\n    this._liveAnnouncer = _liveAnnouncer;\n    this._defaultOptions = _defaultOptions;\n    /** Whether or not the overlay panel is open. */\n\n    this._panelOpen = false;\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n\n    this._compareWith = (o1, o2) => o1 === o2;\n    /** Unique id for this input. */\n\n\n    this._uid = `mat-select-${nextUniqueId++}`;\n    /** Current `ariar-labelledby` value for the select trigger. */\n\n    this._triggerAriaLabelledBy = null;\n    /** Emits whenever the component is destroyed. */\n\n    this._destroy = new Subject();\n    /** `View -> model callback called when value changes` */\n\n    this._onChange = () => {};\n    /** `View -> model callback called when select has been touched` */\n\n\n    this._onTouched = () => {};\n    /** ID for the DOM node containing the select's value. */\n\n\n    this._valueId = `mat-select-value-${nextUniqueId++}`;\n    /** Emits when the panel element is finished transforming in. */\n\n    this._panelDoneAnimatingStream = new Subject();\n    this._overlayPanelClass = ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.overlayPanelClass) || '';\n    this._focused = false;\n    /** A name for this control that can be used by `mat-form-field`. */\n\n    this.controlType = 'mat-select';\n    this._required = false;\n    this._multiple = false;\n    this._disableOptionCentering = (_c = (_b = this._defaultOptions) === null || _b === void 0 ? void 0 : _b.disableOptionCentering) !== null && _c !== void 0 ? _c : false;\n    /** Aria label of the select. */\n\n    this.ariaLabel = '';\n    /** Combined stream of all of the child options' change events. */\n\n    this.optionSelectionChanges = defer(() => {\n      const options = this.options;\n\n      if (options) {\n        return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n      }\n\n      return this._ngZone.onStable.pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    });\n    /** Event emitted when the select panel has been toggled. */\n\n    this.openedChange = new EventEmitter();\n    /** Event emitted when the select has been opened. */\n\n    this._openedStream = this.openedChange.pipe(filter(o => o), map(() => {}));\n    /** Event emitted when the select has been closed. */\n\n    this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => {}));\n    /** Event emitted when the selected value has been changed by the user. */\n\n    this.selectionChange = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n\n    this.valueChange = new EventEmitter();\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    } // Note that we only want to set this when the defaults pass it in, otherwise it should\n    // stay as `undefined` so that it falls back to the default in the key manager.\n\n\n    if ((_defaultOptions === null || _defaultOptions === void 0 ? void 0 : _defaultOptions.typeaheadDebounceInterval) != null) {\n      this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0; // Force setter to be called in case id was not specified.\n\n    this.id = this.id;\n  }\n  /** Whether the select is focused. */\n\n\n  get focused() {\n    return this._focused || this._panelOpen;\n  }\n  /** Placeholder to be shown if no value has been selected. */\n\n\n  get placeholder() {\n    return this._placeholder;\n  }\n\n  set placeholder(value) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  /** Whether the component is required. */\n\n\n  get required() {\n    return this._required;\n  }\n\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  /** Whether the user should be allowed to select multiple options. */\n\n\n  get multiple() {\n    return this._multiple;\n  }\n\n  set multiple(value) {\n    if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n  /** Whether to center the active option over the trigger. */\n\n\n  get disableOptionCentering() {\n    return this._disableOptionCentering;\n  }\n\n  set disableOptionCentering(value) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n\n\n  get compareWith() {\n    return this._compareWith;\n  }\n\n  set compareWith(fn) {\n    if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatSelectNonFunctionValueError();\n    }\n\n    this._compareWith = fn;\n\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  /** Value of the select control. */\n\n\n  get value() {\n    return this._value;\n  }\n\n  set value(newValue) {\n    // Always re-assign an array, because it might have been mutated.\n    if (newValue !== this._value || this._multiple && Array.isArray(newValue)) {\n      if (this.options) {\n        this._setSelectionByValue(newValue);\n      }\n\n      this._value = newValue;\n    }\n  }\n  /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n\n\n  get typeaheadDebounceInterval() {\n    return this._typeaheadDebounceInterval;\n  }\n\n  set typeaheadDebounceInterval(value) {\n    this._typeaheadDebounceInterval = coerceNumberProperty(value);\n  }\n  /** Unique id of the element. */\n\n\n  get id() {\n    return this._id;\n  }\n\n  set id(value) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel(this.multiple);\n    this.stateChanges.next(); // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n\n    this._panelDoneAnimatingStream.pipe(distinctUntilChanged(), takeUntil(this._destroy)).subscribe(() => this._panelDoneAnimating(this.panelOpen));\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    const newAriaLabelledby = this._getTriggerAriaLabelledby(); // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n    // is computed as a result of a content query which can cause this binding to trigger a\n    // \"changed after checked\" error.\n\n\n    if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n      const element = this._elementRef.nativeElement;\n      this._triggerAriaLabelledBy = newAriaLabelledby;\n\n      if (newAriaLabelledby) {\n        element.setAttribute('aria-labelledby', newAriaLabelledby);\n      } else {\n        element.removeAttribute('aria-labelledby');\n      }\n    }\n\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n\n    if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n      this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n\n    this._destroy.complete();\n\n    this.stateChanges.complete();\n  }\n  /** Toggles the overlay panel open or closed. */\n\n\n  toggle() {\n    this.panelOpen ? this.close() : this.open();\n  }\n  /** Opens the overlay panel. */\n\n\n  open() {\n    if (this._canOpen()) {\n      this._panelOpen = true;\n\n      this._keyManager.withHorizontalOrientation(null);\n\n      this._highlightCorrectOption();\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /** Closes the overlay panel and focuses the host element. */\n\n\n  close() {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n      this._changeDetectorRef.markForCheck();\n\n      this._onTouched();\n    }\n  }\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n\n\n  writeValue(value) {\n    this.value = value;\n  }\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n\n\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n\n\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n\n\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n\n    this._changeDetectorRef.markForCheck();\n\n    this.stateChanges.next();\n  }\n  /** Whether or not the overlay panel is open. */\n\n\n  get panelOpen() {\n    return this._panelOpen;\n  }\n  /** The currently selected option. */\n\n\n  get selected() {\n    var _a, _b;\n\n    return this.multiple ? ((_a = this._selectionModel) === null || _a === void 0 ? void 0 : _a.selected) || [] : (_b = this._selectionModel) === null || _b === void 0 ? void 0 : _b.selected[0];\n  }\n  /** The value displayed in the trigger. */\n\n\n  get triggerValue() {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      } // TODO(crisbeto): delimiter should be configurable for proper localization.\n\n\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n  /** Whether the element is in RTL mode. */\n\n\n  _isRtl() {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n  /** Handles all keydown events on the select. */\n\n\n  _handleKeydown(event) {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n  /** Handles keyboard events while the select is closed. */\n\n\n  _handleClosedKeydown(event) {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW || keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager; // Open the select on ALT + arrow key to match the native <select>\n\n    if (!manager.isTyping() && isOpenKey && !hasModifierKey(event) || (this.multiple || event.altKey) && isArrowKey) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n      manager.onKeydown(event);\n      const selectedOption = this.selected; // Since the value has changed, we need to announce it ourselves.\n\n      if (selectedOption && previouslySelectedOption !== selectedOption) {\n        // We set a duration on the live announcement, because we want the live element to be\n        // cleared after a while so that users can't navigate to it using the arrow keys.\n        this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n      }\n    }\n  }\n  /** Handles keyboard events when the selected is open. */\n\n\n  _handleOpenKeydown(event) {\n    const manager = this._keyManager;\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const isTyping = manager.isTyping();\n\n    if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close(); // Don't do anything in this case if the user is typing,\n      // because the typing sequence can include the space key.\n    } else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem && !hasModifierKey(event)) {\n      event.preventDefault();\n\n      manager.activeItem._selectViaInteraction();\n    } else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem && manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n\n\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n\n      this._changeDetectorRef.markForCheck();\n\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n\n\n  _onAttached() {\n    this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n\n      this._positioningSettled();\n    });\n  }\n  /** Returns the theme to be used on the panel. */\n\n\n  _getPanelTheme() {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n  /** Whether the select has a value. */\n\n\n  get empty() {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  _initializeSelection() {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n\n      this.stateChanges.next();\n    });\n  }\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n\n\n  _setSelectionByValue(value) {\n    this._selectionModel.selected.forEach(option => option.setInactiveStyles());\n\n    this._selectionModel.clear();\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      value.forEach(currentValue => this._selectValue(currentValue));\n\n      this._sortValues();\n    } else {\n      const correspondingOption = this._selectValue(value); // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n\n\n      if (correspondingOption) {\n        this._keyManager.updateActiveItem(correspondingOption);\n      } else if (!this.panelOpen) {\n        // Otherwise reset the highlighted option. Note that we only want to do this while\n        // closed, because doing it while open can shift the user's focus unnecessarily.\n        this._keyManager.updateActiveItem(-1);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n\n\n  _selectValue(value) {\n    const correspondingOption = this.options.find(option => {\n      // Skip options that are already in the model. This allows us to handle cases\n      // where the same primitive value is selected multiple times.\n      if (this._selectionModel.isSelected(option)) {\n        return false;\n      }\n\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value, value);\n      } catch (error) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n\n\n  _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager(this.options).withTypeAhead(this._typeaheadDebounceInterval).withVerticalOrientation().withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr').withHomeAndEnd().withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this.panelOpen) {\n        // Select the active item when tabbing away. This is consistent with how the native\n        // select behaves. Note that we only want to do this in single selection mode.\n        if (!this.multiple && this._keyManager.activeItem) {\n          this._keyManager.activeItem._selectViaInteraction();\n        } // Restore focus to the trigger before closing. Ensures that the focus\n        // position won't be lost if the user got focus into the overlay.\n\n\n        this.focus();\n        this.close();\n      }\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n\n\n  _resetOptions() {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    }); // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n\n    merge(...this.options.map(option => option._stateChanges)).pipe(takeUntil(changedOrDestroyed)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n\n      this.stateChanges.next();\n    });\n  }\n  /** Invoked when an option is clicked. */\n\n\n  _onSelect(option, isUserInput) {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n\n      this._selectionModel.clear();\n\n      if (this.value != null) {\n        this._propagateChanges(option.value);\n      }\n    } else {\n      if (wasSelected !== option.selected) {\n        option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n      }\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n  /** Sorts the selected values in the selected based on their order in the panel. */\n\n\n  _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) : options.indexOf(a) - options.indexOf(b);\n      });\n\n      this.stateChanges.next();\n    }\n  }\n  /** Emits change event to set the model value. */\n\n\n  _propagateChanges(fallbackValue) {\n    let valueToEmit = null;\n\n    if (this.multiple) {\n      valueToEmit = this.selected.map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n\n    this._onChange(valueToEmit);\n\n    this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n\n\n  _highlightCorrectOption() {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n  /** Whether the panel is allowed to open. */\n\n\n  _canOpen() {\n    var _a;\n\n    return !this._panelOpen && !this.disabled && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) > 0;\n  }\n  /** Focuses the select element. */\n\n\n  focus(options) {\n    this._elementRef.nativeElement.focus(options);\n  }\n  /** Gets the aria-labelledby for the select panel. */\n\n\n  _getPanelAriaLabelledby() {\n    var _a;\n\n    if (this.ariaLabel) {\n      return null;\n    }\n\n    const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n    const labelExpression = labelId ? labelId + ' ' : '';\n    return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n  }\n  /** Determines the `aria-activedescendant` to be set on the host. */\n\n\n  _getAriaActiveDescendant() {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n  /** Gets the aria-labelledby of the select component trigger. */\n\n\n  _getTriggerAriaLabelledby() {\n    var _a;\n\n    if (this.ariaLabel) {\n      return null;\n    }\n\n    const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n    let value = (labelId ? labelId + ' ' : '') + this._valueId;\n\n    if (this.ariaLabelledby) {\n      value += ' ' + this.ariaLabelledby;\n    }\n\n    return value;\n  }\n  /** Called when the overlay panel is done animating. */\n\n\n  _panelDoneAnimating(isOpen) {\n    this.openedChange.emit(isOpen);\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  setDescribedByIds(ids) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get shouldLabelFloat() {\n    return this._panelOpen || !this.empty || this._focused && !!this._placeholder;\n  }\n\n}\n\n_MatSelectBase.ɵfac = function _MatSelectBase_Factory(t) {\n  return new (t || _MatSelectBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControl, 10), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_CONFIG, 8));\n};\n\n_MatSelectBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: _MatSelectBase,\n  viewQuery: function _MatSelectBase_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 5);\n      ɵngcc0.ɵɵviewQuery(_c1, 5);\n      ɵngcc0.ɵɵviewQuery(CdkConnectedOverlay, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._overlayDir = _t.first);\n    }\n  },\n  inputs: {\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    id: \"id\",\n    placeholder: \"placeholder\",\n    required: \"required\",\n    multiple: \"multiple\",\n    disableOptionCentering: \"disableOptionCentering\",\n    compareWith: \"compareWith\",\n    value: \"value\",\n    typeaheadDebounceInterval: \"typeaheadDebounceInterval\",\n    panelClass: \"panelClass\",\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    errorStateMatcher: \"errorStateMatcher\",\n    sortComparator: \"sortComparator\"\n  },\n  outputs: {\n    openedChange: \"openedChange\",\n    _openedStream: \"opened\",\n    _closedStream: \"closed\",\n    selectionChange: \"selectionChange\",\n    valueChange: \"valueChange\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\n_MatSelectBase.ctorParameters = () => [{\n  type: ViewportRuler\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: NgZone\n}, {\n  type: ErrorStateMatcher\n}, {\n  type: ElementRef\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: NgForm,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: FormGroupDirective,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: MatFormField,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_FORM_FIELD]\n  }]\n}, {\n  type: NgControl,\n  decorators: [{\n    type: Self\n  }, {\n    type: Optional\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_SELECT_SCROLL_STRATEGY]\n  }]\n}, {\n  type: LiveAnnouncer\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_SELECT_CONFIG]\n  }]\n}];\n\n_MatSelectBase.propDecorators = {\n  trigger: [{\n    type: ViewChild,\n    args: ['trigger']\n  }],\n  panel: [{\n    type: ViewChild,\n    args: ['panel']\n  }],\n  _overlayDir: [{\n    type: ViewChild,\n    args: [CdkConnectedOverlay]\n  }],\n  panelClass: [{\n    type: Input\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  multiple: [{\n    type: Input\n  }],\n  disableOptionCentering: [{\n    type: Input\n  }],\n  compareWith: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  errorStateMatcher: [{\n    type: Input\n  }],\n  typeaheadDebounceInterval: [{\n    type: Input\n  }],\n  sortComparator: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  openedChange: [{\n    type: Output\n  }],\n  _openedStream: [{\n    type: Output,\n    args: ['opened']\n  }],\n  _closedStream: [{\n    type: Output,\n    args: ['closed']\n  }],\n  selectionChange: [{\n    type: Output\n  }],\n  valueChange: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatSelectBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc1.ViewportRuler\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc2.ErrorStateMatcher\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc6.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_FORM_FIELD]\n      }]\n    }, {\n      type: ɵngcc4.NgControl,\n      decorators: [{\n        type: Self\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SELECT_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc5.LiveAnnouncer\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_SELECT_CONFIG]\n      }]\n    }];\n  }, {\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    openedChange: [{\n      type: Output\n    }],\n    _openedStream: [{\n      type: Output,\n      args: ['opened']\n    }],\n    _closedStream: [{\n      type: Output,\n      args: ['closed']\n    }],\n    selectionChange: [{\n      type: Output\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    id: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    multiple: [{\n      type: Input\n    }],\n    disableOptionCentering: [{\n      type: Input\n    }],\n    compareWith: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    typeaheadDebounceInterval: [{\n      type: Input\n    }],\n    trigger: [{\n      type: ViewChild,\n      args: ['trigger']\n    }],\n    panel: [{\n      type: ViewChild,\n      args: ['panel']\n    }],\n    _overlayDir: [{\n      type: ViewChild,\n      args: [CdkConnectedOverlay]\n    }],\n    panelClass: [{\n      type: Input\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    sortComparator: [{\n      type: Input\n    }]\n  });\n})();\n\nclass MatSelect extends _MatSelectBase {\n  constructor() {\n    super(...arguments);\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n\n    this._scrollTop = 0;\n    /** The cached font-size of the trigger element. */\n\n    this._triggerFontSize = 0;\n    /** The value of the select panel's transform-origin property. */\n\n    this._transformOrigin = 'top';\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n\n    this._offsetY = 0;\n    this._positions = [{\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top'\n    }, {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom'\n    }];\n  }\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n\n\n  _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n    const itemHeight = this._getItemHeight();\n\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2; // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this._viewportRuler.change().pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this.panelOpen) {\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n\n        this._changeDetectorRef.markForCheck();\n      }\n    });\n  }\n\n  open() {\n    if (super._canOpen()) {\n      super.open();\n      this._triggerRect = this.trigger.nativeElement.getBoundingClientRect(); // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n      // `parseInt` ignores the trailing 'px' and converts this to a number.\n\n      this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n      this._calculateOverlayPosition(); // Set the font size on the panel element once it exists.\n\n\n      this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n        if (this._triggerFontSize && this._overlayDir.overlayRef && this._overlayDir.overlayRef.overlayElement) {\n          this._overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n        }\n      });\n    }\n  }\n  /** Scrolls the active option into view. */\n\n\n  _scrollOptionIntoView(index) {\n    const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n\n    const itemHeight = this._getItemHeight();\n\n    if (index === 0 && labelCount === 1) {\n      // If we've got one group label before the option and we're at the top option,\n      // scroll the list to the top. This is better UX than scrolling the list to the\n      // top of the option, because it allows the user to read the top group's label.\n      this.panel.nativeElement.scrollTop = 0;\n    } else {\n      this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n    }\n  }\n\n  _positioningSettled() {\n    this._calculateOverlayOffsetX();\n\n    this.panel.nativeElement.scrollTop = this._scrollTop;\n  }\n\n  _panelDoneAnimating(isOpen) {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n    } else {\n      this._overlayDir.offsetX = 0;\n\n      this._changeDetectorRef.markForCheck();\n    }\n\n    super._panelDoneAnimating(isOpen);\n  }\n\n  _getChangeEvent(value) {\n    return new MatSelectChange(this, value);\n  }\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n\n\n  _calculateOverlayOffsetX() {\n    const overlayRect = this._overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const isRtl = this._isRtl();\n\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X : SELECT_PANEL_PADDING_X * 2;\n    let offsetX; // Adjust the offset, depending on the option padding.\n\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else if (this.disableOptionCentering) {\n      offsetX = SELECT_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    } // Invert the offset in LTR.\n\n\n    if (!isRtl) {\n      offsetX *= -1;\n    } // Determine how much the select overflows on each side.\n\n\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width + (isRtl ? 0 : paddingWidth); // If the element overflows on either side, reduce the offset to allow it to fit.\n\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n\n\n    this._overlayDir.offsetX = Math.round(offsetX);\n\n    this._overlayDir.overlayRef.updatePosition();\n  }\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n\n\n  _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n    const itemHeight = this._getItemHeight();\n\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop; // Disable offset if requested by user by returning 0 as value to offset\n\n    if (this.disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex; // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n\n      let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight; // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    } // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n\n\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n\n\n  _checkOverlayWithinViewport(maxScroll) {\n    const itemHeight = this._getItemHeight();\n\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n      this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n  /** Adjusts the overlay panel up to fit in the viewport. */\n\n\n  _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable); // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption(); // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n  /** Adjusts the overlay panel down to fit in the viewport. */\n\n\n  _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable); // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption(); // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n\n\n  _calculateOverlayPosition() {\n    const itemHeight = this._getItemHeight();\n\n    const items = this._getItemCount();\n\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight; // The farthest the panel can be scrolled before it hits the bottom\n\n    const maxScroll = scrollContainerHeight - panelHeight; // If no value is selected we open the popup to the first item.\n\n    let selectedOptionOffset;\n\n    if (this.empty) {\n      selectedOptionOffset = 0;\n    } else {\n      selectedOptionOffset = Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\n    }\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups); // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n  /** Sets the transform origin point based on the selected option. */\n\n\n  _getOriginBasedOnOption() {\n    const itemHeight = this._getItemHeight();\n\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n  /** Calculates the height of the select's options. */\n\n\n  _getItemHeight() {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n\n\n  _getItemCount() {\n    return this.options.length + this.optionGroups.length;\n  }\n\n}\n\nMatSelect.ɵfac = /*@__PURE__*/function () {\n  let ɵMatSelect_BaseFactory;\n  return function MatSelect_Factory(t) {\n    return (ɵMatSelect_BaseFactory || (ɵMatSelect_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSelect)))(t || MatSelect);\n  };\n}();\n\nMatSelect.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatSelect,\n  selectors: [[\"mat-select\"]],\n  contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_SELECT_TRIGGER, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    }\n  },\n  hostAttrs: [\"role\", \"combobox\", \"aria-autocomplete\", \"none\", \"aria-haspopup\", \"true\", 1, \"mat-select\"],\n  hostVars: 20,\n  hostBindings: function MatSelect_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"focus\", function MatSelect_focus_HostBindingHandler() {\n        return ctx._onFocus();\n      })(\"blur\", function MatSelect_blur_HostBindingHandler() {\n        return ctx._onBlur();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-controls\", ctx.panelOpen ? ctx.id + \"-panel\" : null)(\"aria-expanded\", ctx.panelOpen)(\"aria-label\", ctx.ariaLabel || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n      ɵngcc0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty)(\"mat-select-multiple\", ctx.multiple);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    tabIndex: \"tabIndex\"\n  },\n  exportAs: [\"matSelect\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: MatSelect\n  }, {\n    provide: MAT_OPTION_PARENT_COMPONENT,\n    useExisting: MatSelect\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c3,\n  decls: 9,\n  vars: 12,\n  consts: [[\"cdk-overlay-origin\", \"\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder mat-select-min-line\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\", \"mat-select-min-line\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [\"class\", \"mat-select-min-line\", 4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-select-min-line\"], [1, \"mat-select-panel-wrap\"], [\"role\", \"listbox\", \"tabindex\", \"-1\", 3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]],\n  template: function MatSelect_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c2);\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n      ɵngcc0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() {\n        return ctx.toggle();\n      });\n      ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n      ɵngcc0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n      ɵngcc0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n      ɵngcc0.ɵɵelement(7, \"div\", 6);\n      ɵngcc0.ɵɵelementEnd()();\n      ɵngcc0.ɵɵtemplate(8, MatSelect_ng_template_8_Template, 4, 14, \"ng-template\", 7);\n      ɵngcc0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_8_listener() {\n        return ctx.close();\n      })(\"attach\", function MatSelect_Template_ng_template_attach_8_listener() {\n        return ctx._onAttached();\n      })(\"detach\", function MatSelect_Template_ng_template_detach_8_listener() {\n        return ctx.close();\n      });\n    }\n\n    if (rf & 2) {\n      const _r0 = ɵngcc0.ɵɵreference(1);\n\n      ɵngcc0.ɵɵattribute(\"aria-owns\", ctx.panelOpen ? ctx.id + \"-panel\" : null);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n      ɵngcc0.ɵɵattribute(\"id\", ctx._valueId);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"cdkConnectedOverlayPanelClass\", ctx._overlayPanelClass)(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n    }\n  },\n  dependencies: [ɵngcc7.NgClass, ɵngcc7.NgSwitch, ɵngcc7.NgSwitchCase, ɵngcc7.NgSwitchDefault, ɵngcc8.CdkConnectedOverlay, ɵngcc8.CdkOverlayOrigin],\n  styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;opacity:0}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel]\n  },\n  changeDetection: 0\n});\nMatSelect.propDecorators = {\n  options: [{\n    type: ContentChildren,\n    args: [MatOption, {\n      descendants: true\n    }]\n  }],\n  optionGroups: [{\n    type: ContentChildren,\n    args: [MAT_OPTGROUP, {\n      descendants: true\n    }]\n  }],\n  customTrigger: [{\n    type: ContentChild,\n    args: [MAT_SELECT_TRIGGER]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelect, [{\n    type: Component,\n    args: [{\n      selector: 'mat-select',\n      exportAs: 'matSelect',\n      template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n      inputs: ['disabled', 'disableRipple', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'role': 'combobox',\n        'aria-autocomplete': 'none',\n        // TODO(crisbeto): the value for aria-haspopup should be `listbox`, but currently it's difficult\n        // to sync into Google, because of an outdated automated a11y check which flags it as an invalid\n        // value. At some point we should try to switch it back to being `listbox`.\n        'aria-haspopup': 'true',\n        'class': 'mat-select',\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n        '[attr.aria-expanded]': 'panelOpen',\n        '[attr.aria-label]': 'ariaLabel || null',\n        '[attr.aria-required]': 'required.toString()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.aria-describedby]': '_ariaDescribedby || null',\n        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n        '[class.mat-select-disabled]': 'disabled',\n        '[class.mat-select-invalid]': 'errorState',\n        '[class.mat-select-required]': 'required',\n        '[class.mat-select-empty]': 'empty',\n        '[class.mat-select-multiple]': 'multiple',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': '_onFocus()',\n        '(blur)': '_onBlur()'\n      },\n      animations: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel],\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatSelect\n      }, {\n        provide: MAT_OPTION_PARENT_COMPONENT,\n        useExisting: MatSelect\n      }],\n      styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;opacity:0}\\n\"]\n    }]\n  }], null, {\n    options: [{\n      type: ContentChildren,\n      args: [MatOption, {\n        descendants: true\n      }]\n    }],\n    optionGroups: [{\n      type: ContentChildren,\n      args: [MAT_OPTGROUP, {\n        descendants: true\n      }]\n    }],\n    customTrigger: [{\n      type: ContentChild,\n      args: [MAT_SELECT_TRIGGER]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatSelectModule {}\n\nMatSelectModule.ɵfac = function MatSelectModule_Factory(t) {\n  return new (t || MatSelectModule)();\n};\n\nMatSelectModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatSelectModule\n});\nMatSelectModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n  imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule, CdkScrollableModule, MatFormFieldModule, MatOptionModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule],\n      exports: [CdkScrollableModule, MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n      declarations: [MatSelect, MatSelectTrigger],\n      providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectModule, {\n    declarations: function () {\n      return [MatSelect, MatSelectTrigger];\n    },\n    imports: function () {\n      return [CommonModule, OverlayModule, MatOptionModule, MatCommonModule];\n    },\n    exports: function () {\n      return [CdkScrollableModule, MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };","map":{"version":3,"names":["Overlay","CdkConnectedOverlay","OverlayModule","CommonModule","InjectionToken","Directive","EventEmitter","ChangeDetectorRef","NgZone","ElementRef","Optional","Inject","Self","Attribute","ViewChild","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","ContentChildren","ContentChild","NgModule","mixinDisableRipple","mixinTabIndex","mixinDisabled","mixinErrorState","ErrorStateMatcher","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MAT_OPTION_PARENT_COMPONENT","MatOption","MAT_OPTGROUP","MatOptionModule","MatCommonModule","MatFormField","MAT_FORM_FIELD","MatFormFieldControl","MatFormFieldModule","ViewportRuler","CdkScrollableModule","ActiveDescendantKeyManager","LiveAnnouncer","Directionality","coerceBooleanProperty","coerceNumberProperty","SelectionModel","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","hasModifierKey","A","NgForm","FormGroupDirective","NgControl","Subject","defer","merge","startWith","switchMap","take","filter","map","distinctUntilChanged","takeUntil","trigger","transition","query","animateChild","state","style","animate","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","ɵngcc7","ɵngcc8","_c0","_c1","MatSelect_span_4_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ctx_r2","ɵɵnextContext","ɵɵadvance","ɵɵtextInterpolate","placeholder","MatSelect_span_5_span_1_Template","ctx_r5","triggerValue","MatSelect_span_5_ng_content_2_Template","ɵɵprojection","MatSelect_span_5_Template","ɵɵtemplate","ctx_r3","ɵɵproperty","customTrigger","MatSelect_ng_template_8_Template","_r9","ɵɵgetCurrentView","ɵɵlistener","MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener","$event","ɵɵrestoreView","ctx_r8","ɵɵresetView","_panelDoneAnimatingStream","next","toState","MatSelect_ng_template_8_Template_div_keydown_1_listener","ctx_r10","_handleKeydown","ctx_r4","undefined","ɵɵclassMapInterpolate1","_getPanelTheme","ɵɵstyleProp","_transformOrigin","_triggerFontSize","panelClass","multiple","ɵɵattribute","id","ariaLabel","_getPanelAriaLabelledby","_c2","_c3","matSelectAnimations","transformPanelWrap","optional","transformPanel","transform","minWidth","opacity","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","nextUniqueId","SELECT_PANEL_MAX_HEIGHT","SELECT_PANEL_PADDING_X","SELECT_PANEL_INDENT_PADDING_X","SELECT_ITEM_HEIGHT_EM","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_VIEWPORT_PADDING","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MatSelectChange","constructor","source","value","_MatSelectMixinBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","MAT_SELECT_TRIGGER","MatSelectTrigger","ɵfac","MatSelectTrigger_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","features","ɵɵProvidersFeature","useExisting","ngDevMode","ɵsetClassMetadata","args","selector","providers","_MatSelectBase","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_defaultOptions","_a","_b","_c","_panelOpen","_compareWith","o1","o2","_uid","_triggerAriaLabelledBy","_destroy","_onChange","_onTouched","_valueId","_overlayPanelClass","overlayPanelClass","_focused","controlType","_required","_multiple","_disableOptionCentering","disableOptionCentering","optionSelectionChanges","options","changes","pipe","option","onSelectionChange","onStable","openedChange","_openedStream","o","_closedStream","selectionChange","valueChange","valueAccessor","typeaheadDebounceInterval","_typeaheadDebounceInterval","_scrollStrategyFactory","_scrollStrategy","parseInt","focused","_placeholder","stateChanges","required","_selectionModel","compareWith","fn","_initializeSelection","_value","newValue","Array","isArray","_setSelectionByValue","_id","ngOnInit","subscribe","_panelDoneAnimating","panelOpen","ngAfterContentInit","_initKeyManager","changed","event","added","forEach","select","removed","deselect","_resetOptions","ngDoCheck","newAriaLabelledby","_getTriggerAriaLabelledby","element","nativeElement","setAttribute","removeAttribute","updateErrorState","ngOnChanges","_keyManager","withTypeAhead","ngOnDestroy","complete","toggle","close","open","_canOpen","withHorizontalOrientation","_highlightCorrectOption","markForCheck","_isRtl","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","disabled","selected","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","isOpenKey","manager","isTyping","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","_selectViaInteraction","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_onFocus","_onBlur","_onAttached","_overlayDir","positionChange","detectChanges","_positioningSettled","color","isEmpty","Promise","resolve","then","setInactiveStyles","clear","currentValue","_selectValue","_sortValues","correspondingOption","updateActiveItem","find","isSelected","error","console","warn","withVerticalOrientation","withHomeAndEnd","withAllowedModifierKeys","tabOut","focus","change","panel","_scrollOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","_propagateChanges","setActiveItem","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","emit","_getChangeEvent","setFirstItemActive","length","labelId","getLabelId","labelExpression","ariaLabelledby","_getAriaActiveDescendant","isOpen","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","shouldLabelFloat","_MatSelectBase_Factory","ɵɵdirectiveInject","ɵɵinjectAttribute","viewQuery","_MatSelectBase_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","inputs","errorStateMatcher","outputs","ɵɵInheritDefinitionFeature","ɵɵNgOnChangesFeature","ctorParameters","decorators","String","propDecorators","MatSelect","arguments","_scrollTop","_offsetY","_positions","originX","originY","overlayX","overlayY","_calculateOverlayScroll","selectedIndex","scrollBuffer","maxScroll","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","Math","min","max","_triggerRect","getBoundingClientRect","getComputedStyle","fontSize","_calculateOverlayPosition","overlayRef","overlayElement","index","labelCount","optionGroups","scrollTop","_calculateOverlayOffsetX","offsetX","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","group","leftOverflow","left","rightOverflow","right","width","round","updatePosition","_calculateOverlayOffsetY","optionHeightAdjustment","height","maxOptionsDisplayed","floor","optionOffsetFromPanelTop","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","_checkOverlayWithinViewport","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","items","panelHeight","scrollContainerHeight","selectedOptionOffset","ɵMatSelect_BaseFactory","MatSelect_Factory","ɵɵgetInheritedFactory","ɵcmp","ɵɵdefineComponent","contentQueries","MatSelect_ContentQueries","dirIndex","ɵɵcontentQuery","hostAttrs","hostVars","hostBindings","MatSelect_HostBindings","MatSelect_keydown_HostBindingHandler","MatSelect_focus_HostBindingHandler","MatSelect_blur_HostBindingHandler","toString","errorState","ɵɵclassProp","disableRipple","exportAs","ngContentSelectors","decls","vars","consts","template","MatSelect_Template","ɵɵprojectionDef","MatSelect_Template_div_click_0_listener","ɵɵelement","MatSelect_Template_ng_template_backdropClick_8_listener","MatSelect_Template_ng_template_attach_8_listener","MatSelect_Template_ng_template_detach_8_listener","_r0","ɵɵreference","dependencies","NgClass","NgSwitch","NgSwitchCase","NgSwitchDefault","CdkOverlayOrigin","styles","encapsulation","data","animation","changeDetection","descendants","None","OnPush","host","animations","MatSelectModule","MatSelectModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sources":["C:/Team-43-IMOS/Team-43-IMOS/Imos/node_modules/@angular/material/__ivy_ngcc__/fesm2015/select.js"],"sourcesContent":["import { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, EventEmitter, ChangeDetectorRef, NgZone, ElementRef, Optional, Inject, Self, Attribute, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, ErrorStateMatcher, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { MatFormField, MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/material/form-field';\nimport * as ɵngcc7 from '@angular/common';\nimport * as ɵngcc8 from '@angular/cdk/overlay';\n\nconst _c0 = [\"trigger\"];\nconst _c1 = [\"panel\"];\nfunction MatSelect_span_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.placeholder);\n} }\nfunction MatSelect_span_5_span_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 12);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.triggerValue);\n} }\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n} }\nfunction MatSelect_span_5_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\n    ɵngcc0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 10);\n    ɵngcc0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 11);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n} }\nfunction MatSelect_ng_template_8_Template(rf, ctx) { if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 13)(1, \"div\", 14, 15);\n    ɵngcc0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r8._panelDoneAnimatingStream.next($event.toState)); })(\"keydown\", function MatSelect_ng_template_8_Template_div_keydown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r10._handleKeydown($event)); });\n    ɵngcc0.ɵɵprojection(3, 1);\n    ɵngcc0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transformPanelWrap\", undefined);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    ɵngcc0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n    ɵngcc0.ɵɵattribute(\"id\", ctx_r4.id + \"-panel\")(\"aria-multiselectable\", ctx_r4.multiple)(\"aria-label\", ctx_r4.ariaLabel || null)(\"aria-labelledby\", ctx_r4._getPanelAriaLabelledby());\n} }\nconst _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nconst _c3 = [\"mat-select-trigger\", \"*\"];\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true }))\n    ]),\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            transform: 'scaleY(1)'\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            transform: 'scaleY(1)'\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/** The max height of the select's overlay panel. */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/** The panel's padding on the x-axis. */\nconst SELECT_PANEL_PADDING_X = 16;\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/** The height of the select items in `em` units. */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(class {\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}))));\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) { return new (t || MatSelectTrigger)(); };\nMatSelectTrigger.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatSelectTrigger, selectors: [[\"mat-select-trigger\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }])] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectTrigger, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-select-trigger',\n                providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }]\n            }]\n    }], null, null); })();\n/** Base class with all of the `MatSelect` functionality. */\nclass _MatSelectBase extends _MatSelectMixinBase {\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n        var _a, _b, _c;\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._defaultOptions = _defaultOptions;\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Current `ariar-labelledby` value for the select trigger. */\n        this._triggerAriaLabelledBy = null;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** ID for the DOM node containing the select's value. */\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        this._overlayPanelClass = ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.overlayPanelClass) || '';\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        this._required = false;\n        this._multiple = false;\n        this._disableOptionCentering = (_c = (_b = this._defaultOptions) === null || _b === void 0 ? void 0 : _b.disableOptionCentering) !== null && _c !== void 0 ? _c : false;\n        /** Aria label of the select. */\n        this.ariaLabel = '';\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._ngZone.onStable\n                .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if ((_defaultOptions === null || _defaultOptions === void 0 ? void 0 : _defaultOptions.typeaheadDebounceInterval) != null) {\n            this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() { return this._placeholder; }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() { return this._disableOptionCentering; }\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() { return this._compareWith; }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() { return this._value; }\n    set value(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n        }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() { return this._typeaheadDebounceInterval; }\n    set typeaheadDebounceInterval(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() { return this._id; }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n    }\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (this.ngControl) {\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (this._canOpen()) {\n            this._panelOpen = true;\n            this._keyManager.withHorizontalOrientation(null);\n            this._highlightCorrectOption();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        var _a, _b;\n        return this.multiple ? (((_a = this._selectionModel) === null || _a === void 0 ? void 0 : _a.selected) || []) :\n            (_b = this._selectionModel) === null || _b === void 0 ? void 0 : _b.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if (!manager.isTyping() && (isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this._selectionModel.selected.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this._typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected ? this._selectionModel.select(option) :\n                    this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        var _a;\n        return !this._panelOpen && !this.disabled && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        var _a;\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        const labelExpression = (labelId ? labelId + ' ' : '');\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        var _a;\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty || (this._focused && !!this._placeholder);\n    }\n}\n_MatSelectBase.ɵfac = function _MatSelectBase_Factory(t) { return new (t || _MatSelectBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControl, 10), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_CONFIG, 8)); };\n_MatSelectBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatSelectBase, viewQuery: function _MatSelectBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n        ɵngcc0.ɵɵviewQuery(_c1, 5);\n        ɵngcc0.ɵɵviewQuery(CdkConnectedOverlay, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._overlayDir = _t.first);\n    } }, inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], id: \"id\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", panelClass: \"panelClass\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", sortComparator: \"sortComparator\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\n_MatSelectBase.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: ErrorStateMatcher },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }] },\n    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SELECT_SCROLL_STRATEGY,] }] },\n    { type: LiveAnnouncer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_SELECT_CONFIG,] }] }\n];\n_MatSelectBase.propDecorators = {\n    trigger: [{ type: ViewChild, args: ['trigger',] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    _overlayDir: [{ type: ViewChild, args: [CdkConnectedOverlay,] }],\n    panelClass: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    multiple: [{ type: Input }],\n    disableOptionCentering: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    errorStateMatcher: [{ type: Input }],\n    typeaheadDebounceInterval: [{ type: Input }],\n    sortComparator: [{ type: Input }],\n    id: [{ type: Input }],\n    openedChange: [{ type: Output }],\n    _openedStream: [{ type: Output, args: ['opened',] }],\n    _closedStream: [{ type: Output, args: ['closed',] }],\n    selectionChange: [{ type: Output }],\n    valueChange: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatSelectBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.ErrorStateMatcher }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc6.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }] }, { type: ɵngcc4.NgControl, decorators: [{\n                type: Self\n            }, {\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SELECT_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc5.LiveAnnouncer }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_SELECT_CONFIG]\n            }] }]; }, { ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], openedChange: [{\n            type: Output\n        }], _openedStream: [{\n            type: Output,\n            args: ['opened']\n        }], _closedStream: [{\n            type: Output,\n            args: ['closed']\n        }], selectionChange: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], id: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], disableOptionCentering: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], typeaheadDebounceInterval: [{\n            type: Input\n        }], trigger: [{\n            type: ViewChild,\n            args: ['trigger']\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], _overlayDir: [{\n            type: ViewChild,\n            args: [CdkConnectedOverlay]\n        }], panelClass: [{\n            type: Input\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], errorStateMatcher: [{\n            type: Input\n        }], sortComparator: [{\n            type: Input\n        }] }); })();\nclass MatSelect extends _MatSelectBase {\n    constructor() {\n        super(...arguments);\n        /** The scroll position of the overlay panel, calculated to center the selected option. */\n        this._scrollTop = 0;\n        /** The cached font-size of the trigger element. */\n        this._triggerFontSize = 0;\n        /** The value of the select panel's transform-origin property. */\n        this._transformOrigin = 'top';\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        const halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this._viewportRuler.change().pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this.panelOpen) {\n                this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    open() {\n        if (super._canOpen()) {\n            super.open();\n            this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n            // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n            // `parseInt` ignores the trailing 'px' and converts this to a number.\n            this._triggerFontSize =\n                parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n            this._calculateOverlayPosition();\n            // Set the font size on the panel element once it exists.\n            this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n                if (this._triggerFontSize && this._overlayDir.overlayRef &&\n                    this._overlayDir.overlayRef.overlayElement) {\n                    this._overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n                }\n            });\n        }\n    }\n    /** Scrolls the active option into view. */\n    _scrollOptionIntoView(index) {\n        const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n        const itemHeight = this._getItemHeight();\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            this.panel.nativeElement.scrollTop = 0;\n        }\n        else {\n            this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n        }\n    }\n    _positioningSettled() {\n        this._calculateOverlayOffsetX();\n        this.panel.nativeElement.scrollTop = this._scrollTop;\n    }\n    _panelDoneAnimating(isOpen) {\n        if (this.panelOpen) {\n            this._scrollTop = 0;\n        }\n        else {\n            this._overlayDir.offsetX = 0;\n            this._changeDetectorRef.markForCheck();\n        }\n        super._panelDoneAnimating(isOpen);\n    }\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    _calculateOverlayOffsetX() {\n        const overlayRect = this._overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this._isRtl();\n        const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n            SELECT_PANEL_PADDING_X * 2;\n        let offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else if (this.disableOptionCentering) {\n            offsetX = SELECT_PANEL_PADDING_X;\n        }\n        else {\n            let selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this._overlayDir.offsetX = Math.round(offsetX);\n        this._overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        let optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this.disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        const panelHeightTop = Math.abs(this._offsetY);\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    _calculateOverlayPosition() {\n        const itemHeight = this._getItemHeight();\n        const items = this._getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset;\n        if (this.empty) {\n            selectedOptionOffset = 0;\n        }\n        else {\n            selectedOptionOffset =\n                Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\n        }\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /** Sets the transform origin point based on the selected option. */\n    _getOriginBasedOnOption() {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /** Calculates the height of the select's options. */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n}\nMatSelect.ɵfac = /*@__PURE__*/ function () { let ɵMatSelect_BaseFactory; return function MatSelect_Factory(t) { return (ɵMatSelect_BaseFactory || (ɵMatSelect_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSelect)))(t || MatSelect); }; }();\nMatSelect.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSelect, selectors: [[\"mat-select\"]], contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_SELECT_TRIGGER, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    } }, hostAttrs: [\"role\", \"combobox\", \"aria-autocomplete\", \"none\", \"aria-haspopup\", \"true\", 1, \"mat-select\"], hostVars: 20, hostBindings: function MatSelect_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatSelect_focus_HostBindingHandler() { return ctx._onFocus(); })(\"blur\", function MatSelect_blur_HostBindingHandler() { return ctx._onBlur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-controls\", ctx.panelOpen ? ctx.id + \"-panel\" : null)(\"aria-expanded\", ctx.panelOpen)(\"aria-label\", ctx.ariaLabel || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n        ɵngcc0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty)(\"mat-select-multiple\", ctx.multiple);\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, exportAs: [\"matSelect\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c3, decls: 9, vars: 12, consts: [[\"cdk-overlay-origin\", \"\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder mat-select-min-line\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\", \"mat-select-min-line\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [\"class\", \"mat-select-min-line\", 4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-select-min-line\"], [1, \"mat-select-panel-wrap\"], [\"role\", \"listbox\", \"tabindex\", \"-1\", 3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]], template: function MatSelect_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() { return ctx.toggle(); });\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n        ɵngcc0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n        ɵngcc0.ɵɵelement(7, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵtemplate(8, MatSelect_ng_template_8_Template, 4, 14, \"ng-template\", 7);\n        ɵngcc0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_8_listener() { return ctx.close(); })(\"attach\", function MatSelect_Template_ng_template_attach_8_listener() { return ctx._onAttached(); })(\"detach\", function MatSelect_Template_ng_template_detach_8_listener() { return ctx.close(); });\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵattribute(\"aria-owns\", ctx.panelOpen ? ctx.id + \"-panel\" : null);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n        ɵngcc0.ɵɵattribute(\"id\", ctx._valueId);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"cdkConnectedOverlayPanelClass\", ctx._overlayPanelClass)(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n    } }, dependencies: [ɵngcc7.NgClass, ɵngcc7.NgSwitch, ɵngcc7.NgSwitchCase, ɵngcc7.NgSwitchDefault, ɵngcc8.CdkConnectedOverlay, ɵngcc8.CdkOverlayOrigin], styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;opacity:0}\\n\"], encapsulation: 2, data: { animation: [\n            matSelectAnimations.transformPanelWrap,\n            matSelectAnimations.transformPanel\n        ] }, changeDetection: 0 });\nMatSelect.propDecorators = {\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MAT_OPTGROUP, { descendants: true },] }],\n    customTrigger: [{ type: ContentChild, args: [MAT_SELECT_TRIGGER,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelect, [{\n        type: Component,\n        args: [{ selector: 'mat-select', exportAs: 'matSelect', template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", inputs: ['disabled', 'disableRipple', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                    'role': 'combobox',\n                    'aria-autocomplete': 'none',\n                    // TODO(crisbeto): the value for aria-haspopup should be `listbox`, but currently it's difficult\n                    // to sync into Google, because of an outdated automated a11y check which flags it as an invalid\n                    // value. At some point we should try to switch it back to being `listbox`.\n                    'aria-haspopup': 'true',\n                    'class': 'mat-select',\n                    '[attr.id]': 'id',\n                    '[attr.tabindex]': 'tabIndex',\n                    '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                    '[attr.aria-expanded]': 'panelOpen',\n                    '[attr.aria-label]': 'ariaLabel || null',\n                    '[attr.aria-required]': 'required.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                    '[class.mat-select-disabled]': 'disabled',\n                    '[class.mat-select-invalid]': 'errorState',\n                    '[class.mat-select-required]': 'required',\n                    '[class.mat-select-empty]': 'empty',\n                    '[class.mat-select-multiple]': 'multiple',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()'\n                }, animations: [\n                    matSelectAnimations.transformPanelWrap,\n                    matSelectAnimations.transformPanel\n                ], providers: [\n                    { provide: MatFormFieldControl, useExisting: MatSelect },\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n                ], styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;opacity:0}\\n\"] }]\n    }], null, { options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }], optionGroups: [{\n            type: ContentChildren,\n            args: [MAT_OPTGROUP, { descendants: true }]\n        }], customTrigger: [{\n            type: ContentChild,\n            args: [MAT_SELECT_TRIGGER]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSelectModule {\n}\nMatSelectModule.ɵfac = function MatSelectModule_Factory(t) { return new (t || MatSelectModule)(); };\nMatSelectModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSelectModule });\nMatSelectModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [CommonModule,\n        OverlayModule,\n        MatOptionModule,\n        MatCommonModule, CdkScrollableModule,\n        MatFormFieldModule,\n        MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    MatFormFieldModule,\n                    MatSelect,\n                    MatSelectTrigger,\n                    MatOptionModule,\n                    MatCommonModule\n                ],\n                declarations: [MatSelect, MatSelectTrigger],\n                providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectModule, { declarations: function () { return [MatSelect, MatSelectTrigger]; }, imports: function () { return [CommonModule,\n        OverlayModule,\n        MatOptionModule,\n        MatCommonModule]; }, exports: function () { return [CdkScrollableModule,\n        MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule,\n        MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}