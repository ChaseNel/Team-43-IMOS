{"ast":null,"code":"import * as i1 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions, Platform, PlatformModule } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { Injectable, NgZone, EventEmitter, Directive, ElementRef, Output, Optional, Inject, Input, HostListener, NgModule } from '@angular/core';\nimport { coerceElement, coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Options to pass to the animationstart listener. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nconst listenerOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\n\nclass AutofillMonitor {\n  constructor(_platform, _ngZone) {\n    this._platform = _platform;\n    this._ngZone = _ngZone;\n    this._monitoredElements = new Map();\n  }\n\n  monitor(elementOrRef) {\n    if (!this._platform.isBrowser) {\n      return EMPTY;\n    }\n\n    const element = coerceElement(elementOrRef);\n\n    const info = this._monitoredElements.get(element);\n\n    if (info) {\n      return info.subject;\n    }\n\n    const result = new Subject();\n    const cssClass = 'cdk-text-field-autofilled';\n\n    const listener = event => {\n      // Animation events fire on initial element render, we check for the presence of the autofill\n      // CSS class to make sure this is a real change in state, not just the initial render before\n      // we fire off events.\n      if (event.animationName === 'cdk-text-field-autofill-start' && !element.classList.contains(cssClass)) {\n        element.classList.add(cssClass);\n\n        this._ngZone.run(() => result.next({\n          target: event.target,\n          isAutofilled: true\n        }));\n      } else if (event.animationName === 'cdk-text-field-autofill-end' && element.classList.contains(cssClass)) {\n        element.classList.remove(cssClass);\n\n        this._ngZone.run(() => result.next({\n          target: event.target,\n          isAutofilled: false\n        }));\n      }\n    };\n\n    this._ngZone.runOutsideAngular(() => {\n      element.addEventListener('animationstart', listener, listenerOptions);\n      element.classList.add('cdk-text-field-autofill-monitored');\n    });\n\n    this._monitoredElements.set(element, {\n      subject: result,\n      unlisten: () => {\n        element.removeEventListener('animationstart', listener, listenerOptions);\n      }\n    });\n\n    return result;\n  }\n\n  stopMonitoring(elementOrRef) {\n    const element = coerceElement(elementOrRef);\n\n    const info = this._monitoredElements.get(element);\n\n    if (info) {\n      info.unlisten();\n      info.subject.complete();\n      element.classList.remove('cdk-text-field-autofill-monitored');\n      element.classList.remove('cdk-text-field-autofilled');\n\n      this._monitoredElements.delete(element);\n    }\n  }\n\n  ngOnDestroy() {\n    this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n  }\n\n}\n\nAutofillMonitor.ɵfac = function AutofillMonitor_Factory(t) {\n  return new (t || AutofillMonitor)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n\nAutofillMonitor.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function AutofillMonitor_Factory() {\n    return new AutofillMonitor(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i0.NgZone));\n  },\n  token: AutofillMonitor,\n  providedIn: \"root\"\n});\n\nAutofillMonitor.ctorParameters = () => [{\n  type: Platform\n}, {\n  type: NgZone\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AutofillMonitor, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Platform\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n/** A directive that can be used to monitor the autofill state of an input. */\n\n\nclass CdkAutofill {\n  constructor(_elementRef, _autofillMonitor) {\n    this._elementRef = _elementRef;\n    this._autofillMonitor = _autofillMonitor;\n    /** Emits when the autofill state of the element changes. */\n\n    this.cdkAutofill = new EventEmitter();\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef).subscribe(event => this.cdkAutofill.emit(event));\n  }\n\n  ngOnDestroy() {\n    this._autofillMonitor.stopMonitoring(this._elementRef);\n  }\n\n}\n\nCdkAutofill.ɵfac = function CdkAutofill_Factory(t) {\n  return new (t || CdkAutofill)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(AutofillMonitor));\n};\n\nCdkAutofill.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkAutofill,\n  selectors: [[\"\", \"cdkAutofill\", \"\"]],\n  outputs: {\n    cdkAutofill: \"cdkAutofill\"\n  }\n});\n\nCdkAutofill.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: AutofillMonitor\n}];\n\nCdkAutofill.propDecorators = {\n  cdkAutofill: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAutofill, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkAutofill]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: AutofillMonitor\n    }];\n  }, {\n    cdkAutofill: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Directive to automatically resize a textarea to fit its content. */\n\n\nclass CdkTextareaAutosize {\n  constructor(_elementRef, _platform, _ngZone,\n  /** @breaking-change 11.0.0 make document required */\n  document) {\n    this._elementRef = _elementRef;\n    this._platform = _platform;\n    this._ngZone = _ngZone;\n    this._destroyed = new Subject();\n    this._enabled = true;\n    /**\n     * Value of minRows as of last resize. If the minRows has decreased, the\n     * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n     * does not have the same problem because it does not affect the textarea's scrollHeight.\n     */\n\n    this._previousMinRows = -1;\n    this._isViewInited = false;\n    /** Handles `focus` and `blur` events. */\n\n    this._handleFocusEvent = event => {\n      this._hasFocus = event.type === 'focus';\n    };\n\n    this._document = document;\n    this._textareaElement = this._elementRef.nativeElement;\n  }\n  /** Minimum amount of rows in the textarea. */\n\n\n  get minRows() {\n    return this._minRows;\n  }\n\n  set minRows(value) {\n    this._minRows = coerceNumberProperty(value);\n\n    this._setMinHeight();\n  }\n  /** Maximum amount of rows in the textarea. */\n\n\n  get maxRows() {\n    return this._maxRows;\n  }\n\n  set maxRows(value) {\n    this._maxRows = coerceNumberProperty(value);\n\n    this._setMaxHeight();\n  }\n  /** Whether autosizing is enabled or not */\n\n\n  get enabled() {\n    return this._enabled;\n  }\n\n  set enabled(value) {\n    value = coerceBooleanProperty(value); // Only act if the actual value changed. This specifically helps to not run\n    // resizeToFitContent too early (i.e. before ngAfterViewInit)\n\n    if (this._enabled !== value) {\n      (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n    }\n  }\n\n  get placeholder() {\n    return this._textareaElement.placeholder;\n  }\n\n  set placeholder(value) {\n    this._cachedPlaceholderHeight = undefined;\n    this._textareaElement.placeholder = value;\n\n    this._cacheTextareaPlaceholderHeight();\n  }\n  /** Sets the minimum height of the textarea as determined by minRows. */\n\n\n  _setMinHeight() {\n    const minHeight = this.minRows && this._cachedLineHeight ? `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight) {\n      this._textareaElement.style.minHeight = minHeight;\n    }\n  }\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n\n\n  _setMaxHeight() {\n    const maxHeight = this.maxRows && this._cachedLineHeight ? `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._textareaElement.style.maxHeight = maxHeight;\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      // Remember the height which we started with in case autosizing is disabled\n      this._initialHeight = this._textareaElement.style.height;\n      this.resizeToFitContent();\n\n      this._ngZone.runOutsideAngular(() => {\n        const window = this._getWindow();\n\n        fromEvent(window, 'resize').pipe(auditTime(16), takeUntil(this._destroyed)).subscribe(() => this.resizeToFitContent(true));\n\n        this._textareaElement.addEventListener('focus', this._handleFocusEvent);\n\n        this._textareaElement.addEventListener('blur', this._handleFocusEvent);\n      });\n\n      this._isViewInited = true;\n      this.resizeToFitContent(true);\n    }\n  }\n\n  ngOnDestroy() {\n    this._textareaElement.removeEventListener('focus', this._handleFocusEvent);\n\n    this._textareaElement.removeEventListener('blur', this._handleFocusEvent);\n\n    this._destroyed.next();\n\n    this._destroyed.complete();\n  }\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n\n\n  _cacheTextareaLineHeight() {\n    if (this._cachedLineHeight) {\n      return;\n    } // Use a clone element because we have to override some styles.\n\n\n    let textareaClone = this._textareaElement.cloneNode(false);\n\n    textareaClone.rows = 1; // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = ''; // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n\n    textareaClone.style.overflow = 'hidden';\n\n    this._textareaElement.parentNode.appendChild(textareaClone);\n\n    this._cachedLineHeight = textareaClone.clientHeight;\n\n    this._textareaElement.parentNode.removeChild(textareaClone); // Min and max heights have to be re-calculated if the cached line height changes\n\n\n    this._setMinHeight();\n\n    this._setMaxHeight();\n  }\n\n  _measureScrollHeight() {\n    const element = this._textareaElement;\n    const previousMargin = element.style.marginBottom || '';\n    const isFirefox = this._platform.FIREFOX;\n    const needsMarginFiller = isFirefox && this._hasFocus;\n    const measuringClass = isFirefox ? 'cdk-textarea-autosize-measuring-firefox' : 'cdk-textarea-autosize-measuring'; // In some cases the page might move around while we're measuring the `textarea` on Firefox. We\n    // work around it by assigning a temporary margin with the same height as the `textarea` so that\n    // it occupies the same amount of space. See #23233.\n\n    if (needsMarginFiller) {\n      element.style.marginBottom = `${element.clientHeight}px`;\n    } // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n\n\n    element.classList.add(measuringClass); // The measuring class includes a 2px padding to workaround an issue with Chrome,\n    // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n\n    const scrollHeight = element.scrollHeight - 4;\n    element.classList.remove(measuringClass);\n\n    if (needsMarginFiller) {\n      element.style.marginBottom = previousMargin;\n    }\n\n    return scrollHeight;\n  }\n\n  _cacheTextareaPlaceholderHeight() {\n    if (!this._isViewInited || this._cachedPlaceholderHeight != undefined) {\n      return;\n    }\n\n    if (!this.placeholder) {\n      this._cachedPlaceholderHeight = 0;\n      return;\n    }\n\n    const value = this._textareaElement.value;\n    this._textareaElement.value = this._textareaElement.placeholder;\n    this._cachedPlaceholderHeight = this._measureScrollHeight();\n    this._textareaElement.value = value;\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n\n\n  resizeToFitContent(force = false) {\n    // If autosizing is disabled, just skip everything else\n    if (!this._enabled) {\n      return;\n    }\n\n    this._cacheTextareaLineHeight();\n\n    this._cacheTextareaPlaceholderHeight(); // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n\n\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement;\n    const value = textarea.value; // Only resize if the value or minRows have changed since these calculations can be expensive.\n\n    if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n      return;\n    }\n\n    const scrollHeight = this._measureScrollHeight();\n\n    const height = Math.max(scrollHeight, this._cachedPlaceholderHeight || 0); // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n\n    textarea.style.height = `${height}px`;\n\n    this._ngZone.runOutsideAngular(() => {\n      if (typeof requestAnimationFrame !== 'undefined') {\n        requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n      } else {\n        setTimeout(() => this._scrollToCaretPosition(textarea));\n      }\n    });\n\n    this._previousValue = value;\n    this._previousMinRows = this._minRows;\n  }\n  /**\n   * Resets the textarea to its original size\n   */\n\n\n  reset() {\n    // Do not try to change the textarea, if the initialHeight has not been determined yet\n    // This might potentially remove styles when reset() is called before ngAfterViewInit\n    if (this._initialHeight !== undefined) {\n      this._textareaElement.style.height = this._initialHeight;\n    }\n  } // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n  // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n  // can move this back into `host`.\n  // tslint:disable:no-host-decorator-in-concrete\n\n\n  _noopInputHandler() {// no-op handler that ensures we're running change detection on input events.\n  }\n  /** Access injected document if available or fallback to global document reference */\n\n\n  _getDocument() {\n    return this._document || document;\n  }\n  /** Use defaultView of injected document if available or fallback to global window reference */\n\n\n  _getWindow() {\n    const doc = this._getDocument();\n\n    return doc.defaultView || window;\n  }\n  /**\n   * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n   * prevent it from scrolling to the caret position. We need to re-set the selection\n   * in order for it to scroll to the proper position.\n   */\n\n\n  _scrollToCaretPosition(textarea) {\n    const {\n      selectionStart,\n      selectionEnd\n    } = textarea; // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n    // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n    // between the time we requested the animation frame and when it was executed.\n    // Also note that we have to assert that the textarea is focused before we set the\n    // selection range. Setting the selection range on a non-focused textarea will cause\n    // it to receive focus on IE and Edge.\n\n    if (!this._destroyed.isStopped && this._hasFocus) {\n      textarea.setSelectionRange(selectionStart, selectionEnd);\n    }\n  }\n\n}\n\nCdkTextareaAutosize.ɵfac = function CdkTextareaAutosize_Factory(t) {\n  return new (t || CdkTextareaAutosize)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8));\n};\n\nCdkTextareaAutosize.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkTextareaAutosize,\n  selectors: [[\"textarea\", \"cdkTextareaAutosize\", \"\"]],\n  hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\"],\n  hostBindings: function CdkTextareaAutosize_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"input\", function CdkTextareaAutosize_input_HostBindingHandler() {\n        return ctx._noopInputHandler();\n      });\n    }\n  },\n  inputs: {\n    minRows: [\"cdkAutosizeMinRows\", \"minRows\"],\n    maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"],\n    enabled: [\"cdkTextareaAutosize\", \"enabled\"],\n    placeholder: \"placeholder\"\n  },\n  exportAs: [\"cdkTextareaAutosize\"]\n});\n\nCdkTextareaAutosize.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Platform\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n\nCdkTextareaAutosize.propDecorators = {\n  minRows: [{\n    type: Input,\n    args: ['cdkAutosizeMinRows']\n  }],\n  maxRows: [{\n    type: Input,\n    args: ['cdkAutosizeMaxRows']\n  }],\n  enabled: [{\n    type: Input,\n    args: ['cdkTextareaAutosize']\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  _noopInputHandler: [{\n    type: HostListener,\n    args: ['input']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTextareaAutosize, [{\n    type: Directive,\n    args: [{\n      selector: 'textarea[cdkTextareaAutosize]',\n      exportAs: 'cdkTextareaAutosize',\n      host: {\n        'class': 'cdk-textarea-autosize',\n        // Textarea elements that have the directive applied should have a single row by default.\n        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n        'rows': '1'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    minRows: [{\n      type: Input,\n      args: ['cdkAutosizeMinRows']\n    }],\n    maxRows: [{\n      type: Input,\n      args: ['cdkAutosizeMaxRows']\n    }],\n    enabled: [{\n      type: Input,\n      args: ['cdkTextareaAutosize']\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n    // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n    // can move this back into `host`.\n    // tslint:disable:no-host-decorator-in-concrete\n    _noopInputHandler: [{\n      type: HostListener,\n      args: ['input']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass TextFieldModule {}\n\nTextFieldModule.ɵfac = function TextFieldModule_Factory(t) {\n  return new (t || TextFieldModule)();\n};\n\nTextFieldModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: TextFieldModule\n});\nTextFieldModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [PlatformModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TextFieldModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [CdkAutofill, CdkTextareaAutosize],\n      imports: [PlatformModule],\n      exports: [CdkAutofill, CdkTextareaAutosize]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextFieldModule, {\n    declarations: function () {\n      return [CdkAutofill, CdkTextareaAutosize];\n    },\n    imports: function () {\n      return [PlatformModule];\n    },\n    exports: function () {\n      return [CdkAutofill, CdkTextareaAutosize];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };","map":{"version":3,"names":["i1","normalizePassiveListenerOptions","Platform","PlatformModule","i0","Injectable","NgZone","EventEmitter","Directive","ElementRef","Output","Optional","Inject","Input","HostListener","NgModule","coerceElement","coerceNumberProperty","coerceBooleanProperty","EMPTY","Subject","fromEvent","auditTime","takeUntil","DOCUMENT","ɵngcc0","ɵngcc1","listenerOptions","passive","AutofillMonitor","constructor","_platform","_ngZone","_monitoredElements","Map","monitor","elementOrRef","isBrowser","element","info","get","subject","result","cssClass","listener","event","animationName","classList","contains","add","run","next","target","isAutofilled","remove","runOutsideAngular","addEventListener","set","unlisten","removeEventListener","stopMonitoring","complete","delete","ngOnDestroy","forEach","_info","ɵfac","AutofillMonitor_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","factory","token","providedIn","ctorParameters","type","ngDevMode","ɵsetClassMetadata","args","CdkAutofill","_elementRef","_autofillMonitor","cdkAutofill","ngOnInit","subscribe","emit","CdkAutofill_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","outputs","propDecorators","selector","CdkTextareaAutosize","document","_destroyed","_enabled","_previousMinRows","_isViewInited","_handleFocusEvent","_hasFocus","_document","_textareaElement","nativeElement","minRows","_minRows","value","_setMinHeight","maxRows","_maxRows","_setMaxHeight","enabled","resizeToFitContent","reset","placeholder","_cachedPlaceholderHeight","undefined","_cacheTextareaPlaceholderHeight","minHeight","_cachedLineHeight","style","maxHeight","ngAfterViewInit","_initialHeight","height","window","_getWindow","pipe","_cacheTextareaLineHeight","textareaClone","cloneNode","rows","position","visibility","border","padding","overflow","parentNode","appendChild","clientHeight","removeChild","_measureScrollHeight","previousMargin","marginBottom","isFirefox","FIREFOX","needsMarginFiller","measuringClass","scrollHeight","ngDoCheck","force","textarea","_previousValue","Math","max","requestAnimationFrame","_scrollToCaretPosition","setTimeout","_noopInputHandler","_getDocument","doc","defaultView","selectionStart","selectionEnd","isStopped","setSelectionRange","CdkTextareaAutosize_Factory","hostAttrs","hostBindings","CdkTextareaAutosize_HostBindings","rf","ctx","ɵɵlistener","CdkTextareaAutosize_input_HostBindingHandler","inputs","exportAs","decorators","host","TextFieldModule","TextFieldModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports","ngJitMode","ɵɵsetNgModuleScope"],"sources":["C:/Team-43-IMOS/Team-43-IMOS/Imos/node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/text-field.js"],"sourcesContent":["import * as i1 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions, Platform, PlatformModule } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { Injectable, NgZone, EventEmitter, Directive, ElementRef, Output, Optional, Inject, Input, HostListener, NgModule } from '@angular/core';\nimport { coerceElement, coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options to pass to the animationstart listener. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nconst listenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n    constructor(_platform, _ngZone) {\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._monitoredElements = new Map();\n    }\n    monitor(elementOrRef) {\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject;\n        }\n        const result = new Subject();\n        const cssClass = 'cdk-text-field-autofilled';\n        const listener = ((event) => {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: true }));\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: false }));\n            }\n        });\n        this._ngZone.runOutsideAngular(() => {\n            element.addEventListener('animationstart', listener, listenerOptions);\n            element.classList.add('cdk-text-field-autofill-monitored');\n        });\n        this._monitoredElements.set(element, {\n            subject: result,\n            unlisten: () => {\n                element.removeEventListener('animationstart', listener, listenerOptions);\n            }\n        });\n        return result;\n    }\n    stopMonitoring(elementOrRef) {\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    }\n    ngOnDestroy() {\n        this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n    }\n}\nAutofillMonitor.ɵfac = function AutofillMonitor_Factory(t) { return new (t || AutofillMonitor)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nAutofillMonitor.ɵprov = i0.ɵɵdefineInjectable({ factory: function AutofillMonitor_Factory() { return new AutofillMonitor(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i0.NgZone)); }, token: AutofillMonitor, providedIn: \"root\" });\nAutofillMonitor.ctorParameters = () => [\n    { type: Platform },\n    { type: NgZone }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AutofillMonitor, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }]; }, null); })();\n/** A directive that can be used to monitor the autofill state of an input. */\nclass CdkAutofill {\n    constructor(_elementRef, _autofillMonitor) {\n        this._elementRef = _elementRef;\n        this._autofillMonitor = _autofillMonitor;\n        /** Emits when the autofill state of the element changes. */\n        this.cdkAutofill = new EventEmitter();\n    }\n    ngOnInit() {\n        this._autofillMonitor\n            .monitor(this._elementRef)\n            .subscribe(event => this.cdkAutofill.emit(event));\n    }\n    ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n}\nCdkAutofill.ɵfac = function CdkAutofill_Factory(t) { return new (t || CdkAutofill)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(AutofillMonitor)); };\nCdkAutofill.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkAutofill, selectors: [[\"\", \"cdkAutofill\", \"\"]], outputs: { cdkAutofill: \"cdkAutofill\" } });\nCdkAutofill.ctorParameters = () => [\n    { type: ElementRef },\n    { type: AutofillMonitor }\n];\nCdkAutofill.propDecorators = {\n    cdkAutofill: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAutofill, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkAutofill]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: AutofillMonitor }]; }, { cdkAutofill: [{\n            type: Output\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Directive to automatically resize a textarea to fit its content. */\nclass CdkTextareaAutosize {\n    constructor(_elementRef, _platform, _ngZone, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._destroyed = new Subject();\n        this._enabled = true;\n        /**\n         * Value of minRows as of last resize. If the minRows has decreased, the\n         * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n         * does not have the same problem because it does not affect the textarea's scrollHeight.\n         */\n        this._previousMinRows = -1;\n        this._isViewInited = false;\n        /** Handles `focus` and `blur` events. */\n        this._handleFocusEvent = (event) => {\n            this._hasFocus = event.type === 'focus';\n        };\n        this._document = document;\n        this._textareaElement = this._elementRef.nativeElement;\n    }\n    /** Minimum amount of rows in the textarea. */\n    get minRows() { return this._minRows; }\n    set minRows(value) {\n        this._minRows = coerceNumberProperty(value);\n        this._setMinHeight();\n    }\n    /** Maximum amount of rows in the textarea. */\n    get maxRows() { return this._maxRows; }\n    set maxRows(value) {\n        this._maxRows = coerceNumberProperty(value);\n        this._setMaxHeight();\n    }\n    /** Whether autosizing is enabled or not */\n    get enabled() { return this._enabled; }\n    set enabled(value) {\n        value = coerceBooleanProperty(value);\n        // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n        if (this._enabled !== value) {\n            (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n    }\n    get placeholder() { return this._textareaElement.placeholder; }\n    set placeholder(value) {\n        this._cachedPlaceholderHeight = undefined;\n        this._textareaElement.placeholder = value;\n        this._cacheTextareaPlaceholderHeight();\n    }\n    /** Sets the minimum height of the textarea as determined by minRows. */\n    _setMinHeight() {\n        const minHeight = this.minRows && this._cachedLineHeight ?\n            `${this.minRows * this._cachedLineHeight}px` : null;\n        if (minHeight) {\n            this._textareaElement.style.minHeight = minHeight;\n        }\n    }\n    /** Sets the maximum height of the textarea as determined by maxRows. */\n    _setMaxHeight() {\n        const maxHeight = this.maxRows && this._cachedLineHeight ?\n            `${this.maxRows * this._cachedLineHeight}px` : null;\n        if (maxHeight) {\n            this._textareaElement.style.maxHeight = maxHeight;\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular(() => {\n                const window = this._getWindow();\n                fromEvent(window, 'resize')\n                    .pipe(auditTime(16), takeUntil(this._destroyed))\n                    .subscribe(() => this.resizeToFitContent(true));\n                this._textareaElement.addEventListener('focus', this._handleFocusEvent);\n                this._textareaElement.addEventListener('blur', this._handleFocusEvent);\n            });\n            this._isViewInited = true;\n            this.resizeToFitContent(true);\n        }\n    }\n    ngOnDestroy() {\n        this._textareaElement.removeEventListener('focus', this._handleFocusEvent);\n        this._textareaElement.removeEventListener('blur', this._handleFocusEvent);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     */\n    _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        let textareaClone = this._textareaElement.cloneNode(false);\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        textareaClone.style.overflow = 'hidden';\n        this._textareaElement.parentNode.appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight;\n        this._textareaElement.parentNode.removeChild(textareaClone);\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    }\n    _measureScrollHeight() {\n        const element = this._textareaElement;\n        const previousMargin = element.style.marginBottom || '';\n        const isFirefox = this._platform.FIREFOX;\n        const needsMarginFiller = isFirefox && this._hasFocus;\n        const measuringClass = isFirefox ?\n            'cdk-textarea-autosize-measuring-firefox' :\n            'cdk-textarea-autosize-measuring';\n        // In some cases the page might move around while we're measuring the `textarea` on Firefox. We\n        // work around it by assigning a temporary margin with the same height as the `textarea` so that\n        // it occupies the same amount of space. See #23233.\n        if (needsMarginFiller) {\n            element.style.marginBottom = `${element.clientHeight}px`;\n        }\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        element.classList.add(measuringClass);\n        // The measuring class includes a 2px padding to workaround an issue with Chrome,\n        // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        const scrollHeight = element.scrollHeight - 4;\n        element.classList.remove(measuringClass);\n        if (needsMarginFiller) {\n            element.style.marginBottom = previousMargin;\n        }\n        return scrollHeight;\n    }\n    _cacheTextareaPlaceholderHeight() {\n        if (!this._isViewInited || this._cachedPlaceholderHeight != undefined) {\n            return;\n        }\n        if (!this.placeholder) {\n            this._cachedPlaceholderHeight = 0;\n            return;\n        }\n        const value = this._textareaElement.value;\n        this._textareaElement.value = this._textareaElement.placeholder;\n        this._cachedPlaceholderHeight = this._measureScrollHeight();\n        this._textareaElement.value = value;\n    }\n    ngDoCheck() {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     */\n    resizeToFitContent(force = false) {\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        this._cacheTextareaPlaceholderHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        const textarea = this._elementRef.nativeElement;\n        const value = textarea.value;\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n            return;\n        }\n        const scrollHeight = this._measureScrollHeight();\n        const height = Math.max(scrollHeight, this._cachedPlaceholderHeight || 0);\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = `${height}px`;\n        this._ngZone.runOutsideAngular(() => {\n            if (typeof requestAnimationFrame !== 'undefined') {\n                requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n            }\n            else {\n                setTimeout(() => this._scrollToCaretPosition(textarea));\n            }\n        });\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to its original size\n     */\n    reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight !== undefined) {\n            this._textareaElement.style.height = this._initialHeight;\n        }\n    }\n    // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n    // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n    // can move this back into `host`.\n    // tslint:disable:no-host-decorator-in-concrete\n    _noopInputHandler() {\n        // no-op handler that ensures we're running change detection on input events.\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     */\n    _scrollToCaretPosition(textarea) {\n        const { selectionStart, selectionEnd } = textarea;\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n        if (!this._destroyed.isStopped && this._hasFocus) {\n            textarea.setSelectionRange(selectionStart, selectionEnd);\n        }\n    }\n}\nCdkTextareaAutosize.ɵfac = function CdkTextareaAutosize_Factory(t) { return new (t || CdkTextareaAutosize)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8)); };\nCdkTextareaAutosize.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTextareaAutosize, selectors: [[\"textarea\", \"cdkTextareaAutosize\", \"\"]], hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\"], hostBindings: function CdkTextareaAutosize_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function CdkTextareaAutosize_input_HostBindingHandler() { return ctx._noopInputHandler(); });\n    } }, inputs: { minRows: [\"cdkAutosizeMinRows\", \"minRows\"], maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"], enabled: [\"cdkTextareaAutosize\", \"enabled\"], placeholder: \"placeholder\" }, exportAs: [\"cdkTextareaAutosize\"] });\nCdkTextareaAutosize.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\nCdkTextareaAutosize.propDecorators = {\n    minRows: [{ type: Input, args: ['cdkAutosizeMinRows',] }],\n    maxRows: [{ type: Input, args: ['cdkAutosizeMaxRows',] }],\n    enabled: [{ type: Input, args: ['cdkTextareaAutosize',] }],\n    placeholder: [{ type: Input }],\n    _noopInputHandler: [{ type: HostListener, args: ['input',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTextareaAutosize, [{\n        type: Directive,\n        args: [{\n                selector: 'textarea[cdkTextareaAutosize]',\n                exportAs: 'cdkTextareaAutosize',\n                host: {\n                    'class': 'cdk-textarea-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { minRows: [{\n            type: Input,\n            args: ['cdkAutosizeMinRows']\n        }], maxRows: [{\n            type: Input,\n            args: ['cdkAutosizeMaxRows']\n        }], enabled: [{\n            type: Input,\n            args: ['cdkTextareaAutosize']\n        }], placeholder: [{\n            type: Input\n        }], \n    // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n    // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n    // can move this back into `host`.\n    // tslint:disable:no-host-decorator-in-concrete\n    _noopInputHandler: [{\n            type: HostListener,\n            args: ['input']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass TextFieldModule {\n}\nTextFieldModule.ɵfac = function TextFieldModule_Factory(t) { return new (t || TextFieldModule)(); };\nTextFieldModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: TextFieldModule });\nTextFieldModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [PlatformModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TextFieldModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [CdkAutofill, CdkTextareaAutosize],\n                imports: [PlatformModule],\n                exports: [CdkAutofill, CdkTextareaAutosize]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextFieldModule, { declarations: function () { return [CdkAutofill, CdkTextareaAutosize]; }, imports: function () { return [PlatformModule]; }, exports: function () { return [CdkAutofill, CdkTextareaAutosize]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n\n"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,uBAApB;AACA,SAASC,+BAAT,EAA0CC,QAA1C,EAAoDC,cAApD,QAA0E,uBAA1E;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,YAA7B,EAA2CC,SAA3C,EAAsDC,UAAtD,EAAkEC,MAAlE,EAA0EC,QAA1E,EAAoFC,MAApF,EAA4FC,KAA5F,EAAmGC,YAAnG,EAAiHC,QAAjH,QAAiI,eAAjI;AACA,SAASC,aAAT,EAAwBC,oBAAxB,EAA8CC,qBAA9C,QAA2E,uBAA3E;AACA,SAASC,KAAT,EAAgBC,OAAhB,EAAyBC,SAAzB,QAA0C,MAA1C;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,gBAArC;AACA,SAASC,QAAT,QAAyB,iBAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,uBAAxB;AACA,MAAMC,eAAe,GAAG1B,+BAA+B,CAAC;EAAE2B,OAAO,EAAE;AAAX,CAAD,CAAvD;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,eAAN,CAAsB;EAClBC,WAAW,CAACC,SAAD,EAAYC,OAAZ,EAAqB;IAC5B,KAAKD,SAAL,GAAiBA,SAAjB;IACA,KAAKC,OAAL,GAAeA,OAAf;IACA,KAAKC,kBAAL,GAA0B,IAAIC,GAAJ,EAA1B;EACH;;EACDC,OAAO,CAACC,YAAD,EAAe;IAClB,IAAI,CAAC,KAAKL,SAAL,CAAeM,SAApB,EAA+B;MAC3B,OAAOlB,KAAP;IACH;;IACD,MAAMmB,OAAO,GAAGtB,aAAa,CAACoB,YAAD,CAA7B;;IACA,MAAMG,IAAI,GAAG,KAAKN,kBAAL,CAAwBO,GAAxB,CAA4BF,OAA5B,CAAb;;IACA,IAAIC,IAAJ,EAAU;MACN,OAAOA,IAAI,CAACE,OAAZ;IACH;;IACD,MAAMC,MAAM,GAAG,IAAItB,OAAJ,EAAf;IACA,MAAMuB,QAAQ,GAAG,2BAAjB;;IACA,MAAMC,QAAQ,GAAKC,KAAD,IAAW;MACzB;MACA;MACA;MACA,IAAIA,KAAK,CAACC,aAAN,KAAwB,+BAAxB,IACA,CAACR,OAAO,CAACS,SAAR,CAAkBC,QAAlB,CAA2BL,QAA3B,CADL,EAC2C;QACvCL,OAAO,CAACS,SAAR,CAAkBE,GAAlB,CAAsBN,QAAtB;;QACA,KAAKX,OAAL,CAAakB,GAAb,CAAiB,MAAMR,MAAM,CAACS,IAAP,CAAY;UAAEC,MAAM,EAAEP,KAAK,CAACO,MAAhB;UAAwBC,YAAY,EAAE;QAAtC,CAAZ,CAAvB;MACH,CAJD,MAKK,IAAIR,KAAK,CAACC,aAAN,KAAwB,6BAAxB,IACLR,OAAO,CAACS,SAAR,CAAkBC,QAAlB,CAA2BL,QAA3B,CADC,EACqC;QACtCL,OAAO,CAACS,SAAR,CAAkBO,MAAlB,CAAyBX,QAAzB;;QACA,KAAKX,OAAL,CAAakB,GAAb,CAAiB,MAAMR,MAAM,CAACS,IAAP,CAAY;UAAEC,MAAM,EAAEP,KAAK,CAACO,MAAhB;UAAwBC,YAAY,EAAE;QAAtC,CAAZ,CAAvB;MACH;IACJ,CAdD;;IAeA,KAAKrB,OAAL,CAAauB,iBAAb,CAA+B,MAAM;MACjCjB,OAAO,CAACkB,gBAAR,CAAyB,gBAAzB,EAA2CZ,QAA3C,EAAqDjB,eAArD;MACAW,OAAO,CAACS,SAAR,CAAkBE,GAAlB,CAAsB,mCAAtB;IACH,CAHD;;IAIA,KAAKhB,kBAAL,CAAwBwB,GAAxB,CAA4BnB,OAA5B,EAAqC;MACjCG,OAAO,EAAEC,MADwB;MAEjCgB,QAAQ,EAAE,MAAM;QACZpB,OAAO,CAACqB,mBAAR,CAA4B,gBAA5B,EAA8Cf,QAA9C,EAAwDjB,eAAxD;MACH;IAJgC,CAArC;;IAMA,OAAOe,MAAP;EACH;;EACDkB,cAAc,CAACxB,YAAD,EAAe;IACzB,MAAME,OAAO,GAAGtB,aAAa,CAACoB,YAAD,CAA7B;;IACA,MAAMG,IAAI,GAAG,KAAKN,kBAAL,CAAwBO,GAAxB,CAA4BF,OAA5B,CAAb;;IACA,IAAIC,IAAJ,EAAU;MACNA,IAAI,CAACmB,QAAL;MACAnB,IAAI,CAACE,OAAL,CAAaoB,QAAb;MACAvB,OAAO,CAACS,SAAR,CAAkBO,MAAlB,CAAyB,mCAAzB;MACAhB,OAAO,CAACS,SAAR,CAAkBO,MAAlB,CAAyB,2BAAzB;;MACA,KAAKrB,kBAAL,CAAwB6B,MAAxB,CAA+BxB,OAA/B;IACH;EACJ;;EACDyB,WAAW,GAAG;IACV,KAAK9B,kBAAL,CAAwB+B,OAAxB,CAAgC,CAACC,KAAD,EAAQ3B,OAAR,KAAoB,KAAKsB,cAAL,CAAoBtB,OAApB,CAApD;EACH;;AAzDiB;;AA2DtBT,eAAe,CAACqC,IAAhB,GAAuB,SAASC,uBAAT,CAAiCC,CAAjC,EAAoC;EAAE,OAAO,KAAKA,CAAC,IAAIvC,eAAV,EAA2BJ,MAAM,CAAC4C,QAAP,CAAgB3C,MAAM,CAACxB,QAAvB,CAA3B,EAA6DuB,MAAM,CAAC4C,QAAP,CAAgB5C,MAAM,CAACnB,MAAvB,CAA7D,CAAP;AAAsG,CAAnK;;AACAuB,eAAe,CAACyC,KAAhB,GAAwBlE,EAAE,CAACmE,kBAAH,CAAsB;EAAEC,OAAO,EAAE,SAASL,uBAAT,GAAmC;IAAE,OAAO,IAAItC,eAAJ,CAAoBzB,EAAE,CAACiE,QAAH,CAAYrE,EAAE,CAACE,QAAf,CAApB,EAA8CE,EAAE,CAACiE,QAAH,CAAYjE,EAAE,CAACE,MAAf,CAA9C,CAAP;EAA+E,CAA/H;EAAiImE,KAAK,EAAE5C,eAAxI;EAAyJ6C,UAAU,EAAE;AAArK,CAAtB,CAAxB;;AACA7C,eAAe,CAAC8C,cAAhB,GAAiC,MAAM,CACnC;EAAEC,IAAI,EAAE1E;AAAR,CADmC,EAEnC;EAAE0E,IAAI,EAAEtE;AAAR,CAFmC,CAAvC;;AAIA,CAAC,YAAY;EAAE,CAAC,OAAOuE,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDpD,MAAM,CAACqD,iBAAP,CAAyBjD,eAAzB,EAA0C,CAAC;IACrG+C,IAAI,EAAEvE,UAD+F;IAErG0E,IAAI,EAAE,CAAC;MAAEL,UAAU,EAAE;IAAd,CAAD;EAF+F,CAAD,CAA1C,EAG1D,YAAY;IAAE,OAAO,CAAC;MAAEE,IAAI,EAAElD,MAAM,CAACxB;IAAf,CAAD,EAA4B;MAAE0E,IAAI,EAAEnD,MAAM,CAACnB;IAAf,CAA5B,CAAP;EAA8D,CAHlB,EAGoB,IAHpB,CAAnD;AAG+E,CAH9F;AAIA;;;AACA,MAAM0E,WAAN,CAAkB;EACdlD,WAAW,CAACmD,WAAD,EAAcC,gBAAd,EAAgC;IACvC,KAAKD,WAAL,GAAmBA,WAAnB;IACA,KAAKC,gBAAL,GAAwBA,gBAAxB;IACA;;IACA,KAAKC,WAAL,GAAmB,IAAI5E,YAAJ,EAAnB;EACH;;EACD6E,QAAQ,GAAG;IACP,KAAKF,gBAAL,CACK/C,OADL,CACa,KAAK8C,WADlB,EAEKI,SAFL,CAEexC,KAAK,IAAI,KAAKsC,WAAL,CAAiBG,IAAjB,CAAsBzC,KAAtB,CAFxB;EAGH;;EACDkB,WAAW,GAAG;IACV,KAAKmB,gBAAL,CAAsBtB,cAAtB,CAAqC,KAAKqB,WAA1C;EACH;;AAda;;AAgBlBD,WAAW,CAACd,IAAZ,GAAmB,SAASqB,mBAAT,CAA6BnB,CAA7B,EAAgC;EAAE,OAAO,KAAKA,CAAC,IAAIY,WAAV,EAAuBvD,MAAM,CAAC+D,iBAAP,CAAyB/D,MAAM,CAAChB,UAAhC,CAAvB,EAAoEgB,MAAM,CAAC+D,iBAAP,CAAyB3D,eAAzB,CAApE,CAAP;AAAwH,CAA7K;;AACAmD,WAAW,CAACS,IAAZ,GAAmB,aAAchE,MAAM,CAACiE,iBAAP,CAAyB;EAAEd,IAAI,EAAEI,WAAR;EAAqBW,SAAS,EAAE,CAAC,CAAC,EAAD,EAAK,aAAL,EAAoB,EAApB,CAAD,CAAhC;EAA2DC,OAAO,EAAE;IAAET,WAAW,EAAE;EAAf;AAApE,CAAzB,CAAjC;;AACAH,WAAW,CAACL,cAAZ,GAA6B,MAAM,CAC/B;EAAEC,IAAI,EAAEnE;AAAR,CAD+B,EAE/B;EAAEmE,IAAI,EAAE/C;AAAR,CAF+B,CAAnC;;AAIAmD,WAAW,CAACa,cAAZ,GAA6B;EACzBV,WAAW,EAAE,CAAC;IAAEP,IAAI,EAAElE;EAAR,CAAD;AADY,CAA7B;;AAGA,CAAC,YAAY;EAAE,CAAC,OAAOmE,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDpD,MAAM,CAACqD,iBAAP,CAAyBE,WAAzB,EAAsC,CAAC;IACjGJ,IAAI,EAAEpE,SAD2F;IAEjGuE,IAAI,EAAE,CAAC;MACCe,QAAQ,EAAE;IADX,CAAD;EAF2F,CAAD,CAAtC,EAK1D,YAAY;IAAE,OAAO,CAAC;MAAElB,IAAI,EAAEnD,MAAM,CAAChB;IAAf,CAAD,EAA8B;MAAEmE,IAAI,EAAE/C;IAAR,CAA9B,CAAP;EAAkE,CALtB,EAKwB;IAAEsD,WAAW,EAAE,CAAC;MAC9FP,IAAI,EAAElE;IADwF,CAAD;EAAf,CALxB,CAAnD;AAOC,CAPhB;AASA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,MAAMqF,mBAAN,CAA0B;EACtBjE,WAAW,CAACmD,WAAD,EAAclD,SAAd,EAAyBC,OAAzB;EACX;EACAgE,QAFW,EAED;IACN,KAAKf,WAAL,GAAmBA,WAAnB;IACA,KAAKlD,SAAL,GAAiBA,SAAjB;IACA,KAAKC,OAAL,GAAeA,OAAf;IACA,KAAKiE,UAAL,GAAkB,IAAI7E,OAAJ,EAAlB;IACA,KAAK8E,QAAL,GAAgB,IAAhB;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAKC,gBAAL,GAAwB,CAAC,CAAzB;IACA,KAAKC,aAAL,GAAqB,KAArB;IACA;;IACA,KAAKC,iBAAL,GAA0BxD,KAAD,IAAW;MAChC,KAAKyD,SAAL,GAAiBzD,KAAK,CAAC+B,IAAN,KAAe,OAAhC;IACH,CAFD;;IAGA,KAAK2B,SAAL,GAAiBP,QAAjB;IACA,KAAKQ,gBAAL,GAAwB,KAAKvB,WAAL,CAAiBwB,aAAzC;EACH;EACD;;;EACW,IAAPC,OAAO,GAAG;IAAE,OAAO,KAAKC,QAAZ;EAAuB;;EAC5B,IAAPD,OAAO,CAACE,KAAD,EAAQ;IACf,KAAKD,QAAL,GAAgB1F,oBAAoB,CAAC2F,KAAD,CAApC;;IACA,KAAKC,aAAL;EACH;EACD;;;EACW,IAAPC,OAAO,GAAG;IAAE,OAAO,KAAKC,QAAZ;EAAuB;;EAC5B,IAAPD,OAAO,CAACF,KAAD,EAAQ;IACf,KAAKG,QAAL,GAAgB9F,oBAAoB,CAAC2F,KAAD,CAApC;;IACA,KAAKI,aAAL;EACH;EACD;;;EACW,IAAPC,OAAO,GAAG;IAAE,OAAO,KAAKf,QAAZ;EAAuB;;EAC5B,IAAPe,OAAO,CAACL,KAAD,EAAQ;IACfA,KAAK,GAAG1F,qBAAqB,CAAC0F,KAAD,CAA7B,CADe,CAEf;IACA;;IACA,IAAI,KAAKV,QAAL,KAAkBU,KAAtB,EAA6B;MACzB,CAAC,KAAKV,QAAL,GAAgBU,KAAjB,IAA0B,KAAKM,kBAAL,CAAwB,IAAxB,CAA1B,GAA0D,KAAKC,KAAL,EAA1D;IACH;EACJ;;EACc,IAAXC,WAAW,GAAG;IAAE,OAAO,KAAKZ,gBAAL,CAAsBY,WAA7B;EAA2C;;EAChD,IAAXA,WAAW,CAACR,KAAD,EAAQ;IACnB,KAAKS,wBAAL,GAAgCC,SAAhC;IACA,KAAKd,gBAAL,CAAsBY,WAAtB,GAAoCR,KAApC;;IACA,KAAKW,+BAAL;EACH;EACD;;;EACAV,aAAa,GAAG;IACZ,MAAMW,SAAS,GAAG,KAAKd,OAAL,IAAgB,KAAKe,iBAArB,GACb,GAAE,KAAKf,OAAL,GAAe,KAAKe,iBAAkB,IAD3B,GACiC,IADnD;;IAEA,IAAID,SAAJ,EAAe;MACX,KAAKhB,gBAAL,CAAsBkB,KAAtB,CAA4BF,SAA5B,GAAwCA,SAAxC;IACH;EACJ;EACD;;;EACAR,aAAa,GAAG;IACZ,MAAMW,SAAS,GAAG,KAAKb,OAAL,IAAgB,KAAKW,iBAArB,GACb,GAAE,KAAKX,OAAL,GAAe,KAAKW,iBAAkB,IAD3B,GACiC,IADnD;;IAEA,IAAIE,SAAJ,EAAe;MACX,KAAKnB,gBAAL,CAAsBkB,KAAtB,CAA4BC,SAA5B,GAAwCA,SAAxC;IACH;EACJ;;EACDC,eAAe,GAAG;IACd,IAAI,KAAK7F,SAAL,CAAeM,SAAnB,EAA8B;MAC1B;MACA,KAAKwF,cAAL,GAAsB,KAAKrB,gBAAL,CAAsBkB,KAAtB,CAA4BI,MAAlD;MACA,KAAKZ,kBAAL;;MACA,KAAKlF,OAAL,CAAauB,iBAAb,CAA+B,MAAM;QACjC,MAAMwE,MAAM,GAAG,KAAKC,UAAL,EAAf;;QACA3G,SAAS,CAAC0G,MAAD,EAAS,QAAT,CAAT,CACKE,IADL,CACU3G,SAAS,CAAC,EAAD,CADnB,EACyBC,SAAS,CAAC,KAAK0E,UAAN,CADlC,EAEKZ,SAFL,CAEe,MAAM,KAAK6B,kBAAL,CAAwB,IAAxB,CAFrB;;QAGA,KAAKV,gBAAL,CAAsBhD,gBAAtB,CAAuC,OAAvC,EAAgD,KAAK6C,iBAArD;;QACA,KAAKG,gBAAL,CAAsBhD,gBAAtB,CAAuC,MAAvC,EAA+C,KAAK6C,iBAApD;MACH,CAPD;;MAQA,KAAKD,aAAL,GAAqB,IAArB;MACA,KAAKc,kBAAL,CAAwB,IAAxB;IACH;EACJ;;EACDnD,WAAW,GAAG;IACV,KAAKyC,gBAAL,CAAsB7C,mBAAtB,CAA0C,OAA1C,EAAmD,KAAK0C,iBAAxD;;IACA,KAAKG,gBAAL,CAAsB7C,mBAAtB,CAA0C,MAA1C,EAAkD,KAAK0C,iBAAvD;;IACA,KAAKJ,UAAL,CAAgB9C,IAAhB;;IACA,KAAK8C,UAAL,CAAgBpC,QAAhB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIqE,wBAAwB,GAAG;IACvB,IAAI,KAAKT,iBAAT,EAA4B;MACxB;IACH,CAHsB,CAIvB;;;IACA,IAAIU,aAAa,GAAG,KAAK3B,gBAAL,CAAsB4B,SAAtB,CAAgC,KAAhC,CAApB;;IACAD,aAAa,CAACE,IAAd,GAAqB,CAArB,CANuB,CAOvB;IACA;IACA;;IACAF,aAAa,CAACT,KAAd,CAAoBY,QAApB,GAA+B,UAA/B;IACAH,aAAa,CAACT,KAAd,CAAoBa,UAApB,GAAiC,QAAjC;IACAJ,aAAa,CAACT,KAAd,CAAoBc,MAApB,GAA6B,MAA7B;IACAL,aAAa,CAACT,KAAd,CAAoBe,OAApB,GAA8B,GAA9B;IACAN,aAAa,CAACT,KAAd,CAAoBI,MAApB,GAA6B,EAA7B;IACAK,aAAa,CAACT,KAAd,CAAoBF,SAApB,GAAgC,EAAhC;IACAW,aAAa,CAACT,KAAd,CAAoBC,SAApB,GAAgC,EAAhC,CAhBuB,CAiBvB;IACA;IACA;IACA;IACA;;IACAQ,aAAa,CAACT,KAAd,CAAoBgB,QAApB,GAA+B,QAA/B;;IACA,KAAKlC,gBAAL,CAAsBmC,UAAtB,CAAiCC,WAAjC,CAA6CT,aAA7C;;IACA,KAAKV,iBAAL,GAAyBU,aAAa,CAACU,YAAvC;;IACA,KAAKrC,gBAAL,CAAsBmC,UAAtB,CAAiCG,WAAjC,CAA6CX,aAA7C,EAzBuB,CA0BvB;;;IACA,KAAKtB,aAAL;;IACA,KAAKG,aAAL;EACH;;EACD+B,oBAAoB,GAAG;IACnB,MAAMzG,OAAO,GAAG,KAAKkE,gBAArB;IACA,MAAMwC,cAAc,GAAG1G,OAAO,CAACoF,KAAR,CAAcuB,YAAd,IAA8B,EAArD;IACA,MAAMC,SAAS,GAAG,KAAKnH,SAAL,CAAeoH,OAAjC;IACA,MAAMC,iBAAiB,GAAGF,SAAS,IAAI,KAAK5C,SAA5C;IACA,MAAM+C,cAAc,GAAGH,SAAS,GAC5B,yCAD4B,GAE5B,iCAFJ,CALmB,CAQnB;IACA;IACA;;IACA,IAAIE,iBAAJ,EAAuB;MACnB9G,OAAO,CAACoF,KAAR,CAAcuB,YAAd,GAA8B,GAAE3G,OAAO,CAACuG,YAAa,IAArD;IACH,CAbkB,CAcnB;IACA;;;IACAvG,OAAO,CAACS,SAAR,CAAkBE,GAAlB,CAAsBoG,cAAtB,EAhBmB,CAiBnB;IACA;;IACA,MAAMC,YAAY,GAAGhH,OAAO,CAACgH,YAAR,GAAuB,CAA5C;IACAhH,OAAO,CAACS,SAAR,CAAkBO,MAAlB,CAAyB+F,cAAzB;;IACA,IAAID,iBAAJ,EAAuB;MACnB9G,OAAO,CAACoF,KAAR,CAAcuB,YAAd,GAA6BD,cAA7B;IACH;;IACD,OAAOM,YAAP;EACH;;EACD/B,+BAA+B,GAAG;IAC9B,IAAI,CAAC,KAAKnB,aAAN,IAAuB,KAAKiB,wBAAL,IAAiCC,SAA5D,EAAuE;MACnE;IACH;;IACD,IAAI,CAAC,KAAKF,WAAV,EAAuB;MACnB,KAAKC,wBAAL,GAAgC,CAAhC;MACA;IACH;;IACD,MAAMT,KAAK,GAAG,KAAKJ,gBAAL,CAAsBI,KAApC;IACA,KAAKJ,gBAAL,CAAsBI,KAAtB,GAA8B,KAAKJ,gBAAL,CAAsBY,WAApD;IACA,KAAKC,wBAAL,GAAgC,KAAK0B,oBAAL,EAAhC;IACA,KAAKvC,gBAAL,CAAsBI,KAAtB,GAA8BA,KAA9B;EACH;;EACD2C,SAAS,GAAG;IACR,IAAI,KAAKxH,SAAL,CAAeM,SAAnB,EAA8B;MAC1B,KAAK6E,kBAAL;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;;;EACIA,kBAAkB,CAACsC,KAAK,GAAG,KAAT,EAAgB;IAC9B;IACA,IAAI,CAAC,KAAKtD,QAAV,EAAoB;MAChB;IACH;;IACD,KAAKgC,wBAAL;;IACA,KAAKX,+BAAL,GAN8B,CAO9B;IACA;;;IACA,IAAI,CAAC,KAAKE,iBAAV,EAA6B;MACzB;IACH;;IACD,MAAMgC,QAAQ,GAAG,KAAKxE,WAAL,CAAiBwB,aAAlC;IACA,MAAMG,KAAK,GAAG6C,QAAQ,CAAC7C,KAAvB,CAb8B,CAc9B;;IACA,IAAI,CAAC4C,KAAD,IAAU,KAAK7C,QAAL,KAAkB,KAAKR,gBAAjC,IAAqDS,KAAK,KAAK,KAAK8C,cAAxE,EAAwF;MACpF;IACH;;IACD,MAAMJ,YAAY,GAAG,KAAKP,oBAAL,EAArB;;IACA,MAAMjB,MAAM,GAAG6B,IAAI,CAACC,GAAL,CAASN,YAAT,EAAuB,KAAKjC,wBAAL,IAAiC,CAAxD,CAAf,CAnB8B,CAoB9B;;IACAoC,QAAQ,CAAC/B,KAAT,CAAeI,MAAf,GAAyB,GAAEA,MAAO,IAAlC;;IACA,KAAK9F,OAAL,CAAauB,iBAAb,CAA+B,MAAM;MACjC,IAAI,OAAOsG,qBAAP,KAAiC,WAArC,EAAkD;QAC9CA,qBAAqB,CAAC,MAAM,KAAKC,sBAAL,CAA4BL,QAA5B,CAAP,CAArB;MACH,CAFD,MAGK;QACDM,UAAU,CAAC,MAAM,KAAKD,sBAAL,CAA4BL,QAA5B,CAAP,CAAV;MACH;IACJ,CAPD;;IAQA,KAAKC,cAAL,GAAsB9C,KAAtB;IACA,KAAKT,gBAAL,GAAwB,KAAKQ,QAA7B;EACH;EACD;AACJ;AACA;;;EACIQ,KAAK,GAAG;IACJ;IACA;IACA,IAAI,KAAKU,cAAL,KAAwBP,SAA5B,EAAuC;MACnC,KAAKd,gBAAL,CAAsBkB,KAAtB,CAA4BI,MAA5B,GAAqC,KAAKD,cAA1C;IACH;EACJ,CA1NqB,CA2NtB;EACA;EACA;EACA;;;EACAmC,iBAAiB,GAAG,CAChB;EACH;EACD;;;EACAC,YAAY,GAAG;IACX,OAAO,KAAK1D,SAAL,IAAkBP,QAAzB;EACH;EACD;;;EACAgC,UAAU,GAAG;IACT,MAAMkC,GAAG,GAAG,KAAKD,YAAL,EAAZ;;IACA,OAAOC,GAAG,CAACC,WAAJ,IAAmBpC,MAA1B;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACI+B,sBAAsB,CAACL,QAAD,EAAW;IAC7B,MAAM;MAAEW,cAAF;MAAkBC;IAAlB,IAAmCZ,QAAzC,CAD6B,CAE7B;IACA;IACA;IACA;IACA;IACA;;IACA,IAAI,CAAC,KAAKxD,UAAL,CAAgBqE,SAAjB,IAA8B,KAAKhE,SAAvC,EAAkD;MAC9CmD,QAAQ,CAACc,iBAAT,CAA2BH,cAA3B,EAA2CC,YAA3C;IACH;EACJ;;AA3PqB;;AA6P1BtE,mBAAmB,CAAC7B,IAApB,GAA2B,SAASsG,2BAAT,CAAqCpG,CAArC,EAAwC;EAAE,OAAO,KAAKA,CAAC,IAAI2B,mBAAV,EAA+BtE,MAAM,CAAC+D,iBAAP,CAAyB/D,MAAM,CAAChB,UAAhC,CAA/B,EAA4EgB,MAAM,CAAC+D,iBAAP,CAAyB9D,MAAM,CAACxB,QAAhC,CAA5E,EAAuHuB,MAAM,CAAC+D,iBAAP,CAAyB/D,MAAM,CAACnB,MAAhC,CAAvH,EAAgKmB,MAAM,CAAC+D,iBAAP,CAAyBhE,QAAzB,EAAmC,CAAnC,CAAhK,CAAP;AAAgN,CAArR;;AACAuE,mBAAmB,CAACN,IAApB,GAA2B,aAAchE,MAAM,CAACiE,iBAAP,CAAyB;EAAEd,IAAI,EAAEmB,mBAAR;EAA6BJ,SAAS,EAAE,CAAC,CAAC,UAAD,EAAa,qBAAb,EAAoC,EAApC,CAAD,CAAxC;EAAmF8E,SAAS,EAAE,CAAC,MAAD,EAAS,GAAT,EAAc,CAAd,EAAiB,uBAAjB,CAA9F;EAAyIC,YAAY,EAAE,SAASC,gCAAT,CAA0CC,EAA1C,EAA8CC,GAA9C,EAAmD;IAAE,IAAID,EAAE,GAAG,CAAT,EAAY;MAClRnJ,MAAM,CAACqJ,UAAP,CAAkB,OAAlB,EAA2B,SAASC,4CAAT,GAAwD;QAAE,OAAOF,GAAG,CAACb,iBAAJ,EAAP;MAAiC,CAAtH;IACH;EAAE,CAF2D;EAEzDgB,MAAM,EAAE;IAAEtE,OAAO,EAAE,CAAC,oBAAD,EAAuB,SAAvB,CAAX;IAA8CI,OAAO,EAAE,CAAC,oBAAD,EAAuB,SAAvB,CAAvD;IAA0FG,OAAO,EAAE,CAAC,qBAAD,EAAwB,SAAxB,CAAnG;IAAuIG,WAAW,EAAE;EAApJ,CAFiD;EAEoH6D,QAAQ,EAAE,CAAC,qBAAD;AAF9H,CAAzB,CAAzC;;AAGAlF,mBAAmB,CAACpB,cAApB,GAAqC,MAAM,CACvC;EAAEC,IAAI,EAAEnE;AAAR,CADuC,EAEvC;EAAEmE,IAAI,EAAE1E;AAAR,CAFuC,EAGvC;EAAE0E,IAAI,EAAEtE;AAAR,CAHuC,EAIvC;EAAEsE,IAAI,EAAE0C,SAAR;EAAmB4D,UAAU,EAAE,CAAC;IAAEtG,IAAI,EAAEjE;EAAR,CAAD,EAAqB;IAAEiE,IAAI,EAAEhE,MAAR;IAAgBmE,IAAI,EAAE,CAACvD,QAAD;EAAtB,CAArB;AAA/B,CAJuC,CAA3C;;AAMAuE,mBAAmB,CAACF,cAApB,GAAqC;EACjCa,OAAO,EAAE,CAAC;IAAE9B,IAAI,EAAE/D,KAAR;IAAekE,IAAI,EAAE,CAAC,oBAAD;EAArB,CAAD,CADwB;EAEjC+B,OAAO,EAAE,CAAC;IAAElC,IAAI,EAAE/D,KAAR;IAAekE,IAAI,EAAE,CAAC,oBAAD;EAArB,CAAD,CAFwB;EAGjCkC,OAAO,EAAE,CAAC;IAAErC,IAAI,EAAE/D,KAAR;IAAekE,IAAI,EAAE,CAAC,qBAAD;EAArB,CAAD,CAHwB;EAIjCqC,WAAW,EAAE,CAAC;IAAExC,IAAI,EAAE/D;EAAR,CAAD,CAJoB;EAKjCmJ,iBAAiB,EAAE,CAAC;IAAEpF,IAAI,EAAE9D,YAAR;IAAsBiE,IAAI,EAAE,CAAC,OAAD;EAA5B,CAAD;AALc,CAArC;;AAOA,CAAC,YAAY;EAAE,CAAC,OAAOF,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDpD,MAAM,CAACqD,iBAAP,CAAyBiB,mBAAzB,EAA8C,CAAC;IACzGnB,IAAI,EAAEpE,SADmG;IAEzGuE,IAAI,EAAE,CAAC;MACCe,QAAQ,EAAE,+BADX;MAECmF,QAAQ,EAAE,qBAFX;MAGCE,IAAI,EAAE;QACF,SAAS,uBADP;QAEF;QACA;QACA,QAAQ;MAJN;IAHP,CAAD;EAFmG,CAAD,CAA9C,EAY1D,YAAY;IAAE,OAAO,CAAC;MAAEvG,IAAI,EAAEnD,MAAM,CAAChB;IAAf,CAAD,EAA8B;MAAEmE,IAAI,EAAElD,MAAM,CAACxB;IAAf,CAA9B,EAAyD;MAAE0E,IAAI,EAAEnD,MAAM,CAACnB;IAAf,CAAzD,EAAkF;MAAEsE,IAAI,EAAE0C,SAAR;MAAmB4D,UAAU,EAAE,CAAC;QAC/HtG,IAAI,EAAEjE;MADyH,CAAD,EAE/H;QACCiE,IAAI,EAAEhE,MADP;QAECmE,IAAI,EAAE,CAACvD,QAAD;MAFP,CAF+H;IAA/B,CAAlF,CAAP;EAKF,CAjB8C,EAiB5C;IAAEkF,OAAO,EAAE,CAAC;MACtB9B,IAAI,EAAE/D,KADgB;MAEtBkE,IAAI,EAAE,CAAC,oBAAD;IAFgB,CAAD,CAAX;IAGV+B,OAAO,EAAE,CAAC;MACVlC,IAAI,EAAE/D,KADI;MAEVkE,IAAI,EAAE,CAAC,oBAAD;IAFI,CAAD,CAHC;IAMVkC,OAAO,EAAE,CAAC;MACVrC,IAAI,EAAE/D,KADI;MAEVkE,IAAI,EAAE,CAAC,qBAAD;IAFI,CAAD,CANC;IASVqC,WAAW,EAAE,CAAC;MACdxC,IAAI,EAAE/D;IADQ,CAAD,CATH;IAYlB;IACA;IACA;IACA;IACAmJ,iBAAiB,EAAE,CAAC;MACZpF,IAAI,EAAE9D,YADM;MAEZiE,IAAI,EAAE,CAAC,OAAD;IAFM,CAAD;EAhBD,CAjB4C,CAAnD;AAoCC,CApChB;AAsCA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMqG,eAAN,CAAsB;;AAEtBA,eAAe,CAAClH,IAAhB,GAAuB,SAASmH,uBAAT,CAAiCjH,CAAjC,EAAoC;EAAE,OAAO,KAAKA,CAAC,IAAIgH,eAAV,GAAP;AAAsC,CAAnG;;AACAA,eAAe,CAACE,IAAhB,GAAuB,aAAc7J,MAAM,CAAC8J,gBAAP,CAAwB;EAAE3G,IAAI,EAAEwG;AAAR,CAAxB,CAArC;AACAA,eAAe,CAACI,IAAhB,GAAuB,aAAc/J,MAAM,CAACgK,gBAAP,CAAwB;EAAEC,OAAO,EAAE,CAACvL,cAAD;AAAX,CAAxB,CAArC;;AACA,CAAC,YAAY;EAAE,CAAC,OAAO0E,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDpD,MAAM,CAACqD,iBAAP,CAAyBsG,eAAzB,EAA0C,CAAC;IACrGxG,IAAI,EAAE7D,QAD+F;IAErGgE,IAAI,EAAE,CAAC;MACC4G,YAAY,EAAE,CAAC3G,WAAD,EAAce,mBAAd,CADf;MAEC2F,OAAO,EAAE,CAACvL,cAAD,CAFV;MAGCyL,OAAO,EAAE,CAAC5G,WAAD,EAAce,mBAAd;IAHV,CAAD;EAF+F,CAAD,CAA1C,EAO1D,IAP0D,EAOpD,IAPoD,CAAnD;AAOO,CAPtB;;AAQA,CAAC,YAAY;EAAE,CAAC,OAAO8F,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDpK,MAAM,CAACqK,kBAAP,CAA0BV,eAA1B,EAA2C;IAAEO,YAAY,EAAE,YAAY;MAAE,OAAO,CAAC3G,WAAD,EAAce,mBAAd,CAAP;IAA4C,CAA1E;IAA4E2F,OAAO,EAAE,YAAY;MAAE,OAAO,CAACvL,cAAD,CAAP;IAA0B,CAA7H;IAA+HyL,OAAO,EAAE,YAAY;MAAE,OAAO,CAAC5G,WAAD,EAAce,mBAAd,CAAP;IAA4C;EAAlM,CAA3C,CAAnD;AAAsS,CAArT;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAEA,SAASlE,eAAT,EAA0BmD,WAA1B,EAAuCe,mBAAvC,EAA4DqF,eAA5D"},"metadata":{},"sourceType":"module"}