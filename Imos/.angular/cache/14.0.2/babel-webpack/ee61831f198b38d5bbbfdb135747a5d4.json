{"ast":null,"code":"import * as i1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig, Overlay } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, NgZone, ElementRef, ChangeDetectorRef, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { Platform } from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i2 from '@angular/cdk/a11y';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/layout';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/portal';\nimport * as ɵngcc5 from '@angular/cdk/overlay';\nimport * as ɵngcc6 from '@angular/cdk/a11y';\nimport * as ɵngcc7 from '@angular/cdk/layout';\n\nfunction SimpleSnackBar_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1)(1, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      const ctx_r1 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r1.action());\n    });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.data.action);\n  }\n}\n\nfunction MatSnackBarContainer_ng_template_1_Template(rf, ctx) {}\n\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\n\nclass MatSnackBarConfig {\n  constructor() {\n    /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n    this.politeness = 'assertive';\n    /**\n     * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n     * component or template, the announcement message will default to the specified message.\n     */\n\n    this.announcementMessage = '';\n    /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n\n    this.duration = 0;\n    /** Data being injected into the child component. */\n\n    this.data = null;\n    /** The horizontal position to place the snack bar. */\n\n    this.horizontalPosition = 'center';\n    /** The vertical position to place the snack bar. */\n\n    this.verticalPosition = 'bottom';\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\n\n\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\n\nclass MatSnackBarRef {\n  constructor(containerInstance, _overlayRef) {\n    this._overlayRef = _overlayRef;\n    /** Subject for notifying the user that the snack bar has been dismissed. */\n\n    this._afterDismissed = new Subject();\n    /** Subject for notifying the user that the snack bar has opened and appeared. */\n\n    this._afterOpened = new Subject();\n    /** Subject for notifying the user that the snack bar action was called. */\n\n    this._onAction = new Subject();\n    /** Whether the snack bar was dismissed using the action button. */\n\n    this._dismissedByAction = false;\n    this.containerInstance = containerInstance; // Dismiss snackbar on action.\n\n    this.onAction().subscribe(() => this.dismiss());\n\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n  /** Dismisses the snack bar. */\n\n\n  dismiss() {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n\n    clearTimeout(this._durationTimeoutId);\n  }\n  /** Marks the snackbar action clicked. */\n\n\n  dismissWithAction() {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n\n      this._onAction.next();\n\n      this._onAction.complete();\n    }\n\n    clearTimeout(this._durationTimeoutId);\n  }\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n\n\n  closeWithAction() {\n    this.dismissWithAction();\n  }\n  /** Dismisses the snack bar after some duration */\n\n\n  _dismissAfter(duration) {\n    // Note that we need to cap the duration to the maximum value for setTimeout, because\n    // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n  }\n  /** Marks the snackbar as opened */\n\n\n  _open() {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n\n      this._afterOpened.complete();\n    }\n  }\n  /** Cleans up the DOM after closing. */\n\n\n  _finishDismiss() {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({\n      dismissedByAction: this._dismissedByAction\n    });\n\n    this._afterDismissed.complete();\n\n    this._dismissedByAction = false;\n  }\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n\n\n  afterDismissed() {\n    return this._afterDismissed;\n  }\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n\n\n  afterOpened() {\n    return this.containerInstance._onEnter;\n  }\n  /** Gets an observable that is notified when the snack bar action is called. */\n\n\n  onAction() {\n    return this._onAction;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n\n\nclass SimpleSnackBar {\n  constructor(snackBarRef, data) {\n    this.snackBarRef = snackBarRef;\n    this.data = data;\n  }\n  /** Performs the action on the snack bar. */\n\n\n  action() {\n    this.snackBarRef.dismissWithAction();\n  }\n  /** If the action button should be shown. */\n\n\n  get hasAction() {\n    return !!this.data.action;\n  }\n\n}\n\nSimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) {\n  return new (t || SimpleSnackBar)(ɵngcc0.ɵɵdirectiveInject(MatSnackBarRef), ɵngcc0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA));\n};\n\nSimpleSnackBar.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: SimpleSnackBar,\n  selectors: [[\"simple-snack-bar\"]],\n  hostAttrs: [1, \"mat-simple-snackbar\"],\n  decls: 3,\n  vars: 2,\n  consts: [[\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]],\n  template: function SimpleSnackBar_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"span\");\n      ɵngcc0.ɵɵtext(1);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵtextInterpolate(ctx.data.message);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n    }\n  },\n  dependencies: [ɵngcc1.NgIf, ɵngcc2.MatButton],\n  styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nSimpleSnackBar.ctorParameters = () => [{\n  type: MatSnackBarRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_SNACK_BAR_DATA]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SimpleSnackBar, [{\n    type: Component,\n    args: [{\n      selector: 'simple-snack-bar',\n      template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'class': 'mat-simple-snackbar'\n      },\n      styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: MatSnackBarRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SNACK_BAR_DATA]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\n\n\nconst matSnackBarAnimations = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [state('void, hidden', style({\n    transform: 'scale(0.8)',\n    opacity: 0\n  })), state('visible', style({\n    transform: 'scale(1)',\n    opacity: 1\n  })), transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')), transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n    opacity: 0\n  })))])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n\nclass MatSnackBarContainer extends BasePortalOutlet {\n  constructor(_ngZone, _elementRef, _changeDetectorRef, _platform,\n  /** The snack bar configuration. */\n  snackBarConfig) {\n    super();\n    this._ngZone = _ngZone;\n    this._elementRef = _elementRef;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._platform = _platform;\n    this.snackBarConfig = snackBarConfig;\n    /** The number of milliseconds to wait before announcing the snack bar's content. */\n\n    this._announceDelay = 150;\n    /** Whether the component has been destroyed. */\n\n    this._destroyed = false;\n    /** Subject for notifying that the snack bar has announced to screen readers. */\n\n    this._onAnnounce = new Subject();\n    /** Subject for notifying that the snack bar has exited from view. */\n\n    this._onExit = new Subject();\n    /** Subject for notifying that the snack bar has finished entering the view. */\n\n    this._onEnter = new Subject();\n    /** The state of the snack bar animations. */\n\n    this._animationState = 'void';\n    /**\n     * Attaches a DOM portal to the snack bar container.\n     * @deprecated To be turned into a method.\n     * @breaking-change 10.0.0\n     */\n\n    this.attachDomPortal = portal => {\n      this._assertNotAttached();\n\n      this._applySnackBarClasses();\n\n      return this._portalOutlet.attachDomPortal(portal);\n    }; // Use aria-live rather than a live role like 'alert' or 'status'\n    // because NVDA and JAWS have show inconsistent behavior with live roles.\n\n\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._live = 'assertive';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._live = 'off';\n    } else {\n      this._live = 'polite';\n    } // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n    // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n\n\n    if (this._platform.FIREFOX) {\n      if (this._live === 'polite') {\n        this._role = 'status';\n      }\n\n      if (this._live === 'assertive') {\n        this._role = 'alert';\n      }\n    }\n  }\n  /** Attach a component portal as content to this snack bar container. */\n\n\n  attachComponentPortal(portal) {\n    this._assertNotAttached();\n\n    this._applySnackBarClasses();\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n  /** Attach a template portal as content to this snack bar container. */\n\n\n  attachTemplatePortal(portal) {\n    this._assertNotAttached();\n\n    this._applySnackBarClasses();\n\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n  /** Handle end of animations, updating the state of the snackbar. */\n\n\n  onAnimationEnd(event) {\n    const {\n      fromState,\n      toState\n    } = event;\n\n    if (toState === 'void' && fromState !== 'void' || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n  /** Begin animation of snack bar entrance into view. */\n\n\n  enter() {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n\n      this._changeDetectorRef.detectChanges();\n\n      this._screenReaderAnnounce();\n    }\n  }\n  /** Begin animation of the snack bar exiting from view. */\n\n\n  exit() {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden'; // Mark this element with an 'exit' attribute to indicate that the snackbar has\n    // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n    // test harness.\n\n    this._elementRef.nativeElement.setAttribute('mat-exit', ''); // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n    // long enough to visually read it either, so clear the timeout for announcing.\n\n\n    clearTimeout(this._announceTimeoutId);\n    return this._onExit;\n  }\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n\n\n  ngOnDestroy() {\n    this._destroyed = true;\n\n    this._completeExit();\n  }\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n\n\n  _completeExit() {\n    this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n\n      this._onExit.complete();\n    });\n  }\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n\n\n  _applySnackBarClasses() {\n    const element = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n  /** Asserts that no content is already attached to the container. */\n\n\n  _assertNotAttached() {\n    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n  /**\n   * Starts a timeout to move the snack bar content to the live region so screen readers will\n   * announce it.\n   */\n\n\n  _screenReaderAnnounce() {\n    if (!this._announceTimeoutId) {\n      this._ngZone.runOutsideAngular(() => {\n        this._announceTimeoutId = setTimeout(() => {\n          const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n\n          const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n\n          if (inertElement && liveElement) {\n            // If an element in the snack bar content is focused before being moved\n            // track it and restore focus after moving to the live region.\n            let focusedElement = null;\n\n            if (this._platform.isBrowser && document.activeElement instanceof HTMLElement && inertElement.contains(document.activeElement)) {\n              focusedElement = document.activeElement;\n            }\n\n            inertElement.removeAttribute('aria-hidden');\n            liveElement.appendChild(inertElement);\n            focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.focus();\n\n            this._onAnnounce.next();\n\n            this._onAnnounce.complete();\n          }\n        }, this._announceDelay);\n      });\n    }\n  }\n\n}\n\nMatSnackBarContainer.ɵfac = function MatSnackBarContainer_Factory(t) {\n  return new (t || MatSnackBarContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(MatSnackBarConfig));\n};\n\nMatSnackBarContainer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatSnackBarContainer,\n  selectors: [[\"snack-bar-container\"]],\n  viewQuery: function MatSnackBarContainer_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-snack-bar-container\"],\n  hostVars: 1,\n  hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵsyntheticHostListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) {\n        return ctx.onAnimationEnd($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n    }\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 2,\n  consts: [[\"aria-hidden\", \"true\"], [\"cdkPortalOutlet\", \"\"]],\n  template: function MatSnackBarContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵtemplate(1, MatSnackBarContainer_ng_template_1_Template, 0, 0, \"ng-template\", 1);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelement(2, \"div\");\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵattribute(\"aria-live\", ctx._live)(\"role\", ctx._role);\n    }\n  },\n  dependencies: [ɵngcc4.CdkPortalOutlet],\n  styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matSnackBarAnimations.snackBarState]\n  }\n});\n\nMatSnackBarContainer.ctorParameters = () => [{\n  type: NgZone\n}, {\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: Platform\n}, {\n  type: MatSnackBarConfig\n}];\n\nMatSnackBarContainer.propDecorators = {\n  _portalOutlet: [{\n    type: ViewChild,\n    args: [CdkPortalOutlet, {\n      static: true\n    }]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarContainer, [{\n    type: Component,\n    args: [{\n      selector: 'snack-bar-container',\n      template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\",\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None,\n      animations: [matSnackBarAnimations.snackBarState],\n      host: {\n        'class': 'mat-snack-bar-container',\n        '[@state]': '_animationState',\n        '(@state.done)': 'onAnimationEnd($event)'\n      },\n      styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc3.Platform\n    }, {\n      type: MatSnackBarConfig\n    }];\n  }, {\n    _portalOutlet: [{\n      type: ViewChild,\n      args: [CdkPortalOutlet, {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatSnackBarModule {}\n\nMatSnackBarModule.ɵfac = function MatSnackBarModule_Factory(t) {\n  return new (t || MatSnackBarModule)();\n};\n\nMatSnackBarModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatSnackBarModule\n});\nMatSnackBarModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarModule, [{\n    type: NgModule,\n    args: [{\n      imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n      exports: [MatSnackBarContainer, MatCommonModule],\n      declarations: [MatSnackBarContainer, SimpleSnackBar],\n      entryComponents: [MatSnackBarContainer, SimpleSnackBar]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSnackBarModule, {\n    declarations: function () {\n      return [MatSnackBarContainer, SimpleSnackBar];\n    },\n    imports: function () {\n      return [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatSnackBarContainer, MatCommonModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that can be used to specify default snack bar. */\n\n\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n  providedIn: 'root',\n  factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n  return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n\n\nclass MatSnackBar {\n  constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n    this._overlay = _overlay;\n    this._live = _live;\n    this._injector = _injector;\n    this._breakpointObserver = _breakpointObserver;\n    this._parentSnackBar = _parentSnackBar;\n    this._defaultConfig = _defaultConfig;\n    /**\n     * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n     * If there is a parent snack-bar service, all operations should delegate to that parent\n     * via `_openedSnackBarRef`.\n     */\n\n    this._snackBarRefAtThisLevel = null;\n    /** The component that should be rendered as the snack bar's simple component. */\n\n    this.simpleSnackBarComponent = SimpleSnackBar;\n    /** The container component that attaches the provided template or component. */\n\n    this.snackBarContainerComponent = MatSnackBarContainer;\n    /** The CSS class to apply for handset mode. */\n\n    this.handsetCssClass = 'mat-snack-bar-handset';\n  }\n  /** Reference to the currently opened snackbar at *any* level. */\n\n\n  get _openedSnackBarRef() {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n\n\n  openFromComponent(component, config) {\n    return this._attach(component, config);\n  }\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n\n\n  openFromTemplate(template, config) {\n    return this._attach(template, config);\n  }\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n\n\n  open(message, action = '', config) {\n    const _config = Object.assign(Object.assign({}, this._defaultConfig), config); // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n\n\n    _config.data = {\n      message,\n      action\n    }; // Since the snack bar has `role=\"alert\"`, we don't\n    // want to announce the same message twice.\n\n    if (_config.announcementMessage === message) {\n      _config.announcementMessage = undefined;\n    }\n\n    return this.openFromComponent(this.simpleSnackBarComponent, _config);\n  }\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n\n\n  dismiss() {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n\n\n  _attachSnackBarContainer(overlayRef, config) {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = Injector.create({\n      parent: userInjector || this._injector,\n      providers: [{\n        provide: MatSnackBarConfig,\n        useValue: config\n      }]\n    });\n    const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n    const containerRef = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n\n\n  _attach(content, userConfig) {\n    const config = Object.assign(Object.assign(Object.assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n\n    const overlayRef = this._createOverlay(config);\n\n    const container = this._attachSnackBarContainer(overlayRef, config);\n\n    const snackBarRef = new MatSnackBarRef(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null, {\n        $implicit: config.data,\n        snackBarRef\n      });\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal(portal); // We can't pass this via the injector, because the injector is created earlier.\n\n      snackBarRef.instance = contentRef.instance;\n    } // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n\n\n    this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe(state => {\n      const classList = overlayRef.overlayElement.classList;\n      state.matches ? classList.add(this.handsetCssClass) : classList.remove(this.handsetCssClass);\n    });\n\n    if (config.announcementMessage) {\n      // Wait until the snack bar contents have been announced then deliver this message.\n      container._onAnnounce.subscribe(() => {\n        this._live.announce(config.announcementMessage, config.politeness);\n      });\n    }\n\n    this._animateSnackBar(snackBarRef, config);\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n  /** Animates the old snack bar out and the new one in. */\n\n\n  _animateSnackBar(snackBarRef, config) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    } // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n\n\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n    }\n  }\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n\n\n  _createOverlay(config) {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global(); // Set horizontal position.\n\n\n    const isRtl = config.direction === 'rtl';\n    const isLeft = config.horizontalPosition === 'left' || config.horizontalPosition === 'start' && !isRtl || config.horizontalPosition === 'end' && isRtl;\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    } // Set horizontal position.\n\n\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n\n\n  _createInjector(config, snackBarRef) {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    return Injector.create({\n      parent: userInjector || this._injector,\n      providers: [{\n        provide: MatSnackBarRef,\n        useValue: snackBarRef\n      }, {\n        provide: MAT_SNACK_BAR_DATA,\n        useValue: config.data\n      }]\n    });\n  }\n\n}\n\nMatSnackBar.ɵfac = function MatSnackBar_Factory(t) {\n  return new (t || MatSnackBar)(ɵngcc0.ɵɵinject(ɵngcc5.Overlay), ɵngcc0.ɵɵinject(ɵngcc6.LiveAnnouncer), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc7.BreakpointObserver), ɵngcc0.ɵɵinject(MatSnackBar, 12), ɵngcc0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n};\n\nMatSnackBar.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function MatSnackBar_Factory() {\n    return new MatSnackBar(i0.ɵɵinject(i1.Overlay), i0.ɵɵinject(i2.LiveAnnouncer), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i3.BreakpointObserver), i0.ɵɵinject(MatSnackBar, 12), i0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n  },\n  token: MatSnackBar,\n  providedIn: MatSnackBarModule\n});\n\nMatSnackBar.ctorParameters = () => [{\n  type: Overlay\n}, {\n  type: LiveAnnouncer\n}, {\n  type: Injector\n}, {\n  type: BreakpointObserver\n}, {\n  type: MatSnackBar,\n  decorators: [{\n    type: Optional\n  }, {\n    type: SkipSelf\n  }]\n}, {\n  type: MatSnackBarConfig,\n  decorators: [{\n    type: Inject,\n    args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBar, [{\n    type: Injectable,\n    args: [{\n      providedIn: MatSnackBarModule\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc5.Overlay\n    }, {\n      type: ɵngcc6.LiveAnnouncer\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc7.BreakpointObserver\n    }, {\n      type: MatSnackBar,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: MatSnackBarConfig,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };","map":{"version":3,"names":["i1","OverlayModule","OverlayConfig","Overlay","BasePortalOutlet","CdkPortalOutlet","PortalModule","ComponentPortal","TemplatePortal","CommonModule","i0","InjectionToken","Component","ViewEncapsulation","ChangeDetectionStrategy","Inject","NgZone","ElementRef","ChangeDetectorRef","ViewChild","NgModule","Injector","TemplateRef","Injectable","Optional","SkipSelf","MatCommonModule","MatButtonModule","Subject","Platform","take","takeUntil","trigger","state","style","transition","animate","i2","LiveAnnouncer","i3","Breakpoints","BreakpointObserver","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","ɵngcc7","SimpleSnackBar_div_2_Template","rf","ctx","_r2","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","SimpleSnackBar_div_2_Template_button_click_1_listener","ɵɵrestoreView","ctx_r1","ɵɵnextContext","ɵɵresetView","action","ɵɵtext","ɵɵelementEnd","ctx_r0","ɵɵadvance","ɵɵtextInterpolate","data","MatSnackBarContainer_ng_template_1_Template","MAT_SNACK_BAR_DATA","MatSnackBarConfig","constructor","politeness","announcementMessage","duration","horizontalPosition","verticalPosition","MAX_TIMEOUT","Math","pow","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","subscribe","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","next","complete","closeWithAction","_dismissAfter","setTimeout","min","_open","dispose","dismissedByAction","afterDismissed","afterOpened","_onEnter","SimpleSnackBar","snackBarRef","hasAction","ɵfac","SimpleSnackBar_Factory","t","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","decls","vars","consts","template","SimpleSnackBar_Template","ɵɵtemplate","message","ɵɵproperty","dependencies","NgIf","MatButton","styles","encapsulation","changeDetection","ctorParameters","undefined","decorators","args","ngDevMode","ɵsetClassMetadata","selector","None","OnPush","host","matSnackBarAnimations","snackBarState","transform","opacity","MatSnackBarContainer","_ngZone","_elementRef","_changeDetectorRef","_platform","snackBarConfig","_announceDelay","_destroyed","_onAnnounce","_animationState","attachDomPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","_live","FIREFOX","_role","attachComponentPortal","attachTemplatePortal","onAnimationEnd","event","fromState","toState","_completeExit","onEnter","run","enter","detectChanges","_screenReaderAnnounce","nativeElement","setAttribute","_announceTimeoutId","ngOnDestroy","onMicrotaskEmpty","pipe","element","panelClasses","panelClass","Array","isArray","forEach","cssClass","classList","add","hasAttached","Error","runOutsideAngular","inertElement","querySelector","liveElement","focusedElement","isBrowser","document","activeElement","HTMLElement","contains","removeAttribute","appendChild","focus","MatSnackBarContainer_Factory","viewQuery","MatSnackBarContainer_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostVars","hostBindings","MatSnackBarContainer_HostBindings","ɵɵsyntheticHostListener","MatSnackBarContainer_animation_state_done_HostBindingHandler","$event","ɵɵsyntheticHostProperty","features","ɵɵInheritDefinitionFeature","MatSnackBarContainer_Template","ɵɵelement","ɵɵattribute","animation","propDecorators","static","Default","animations","MatSnackBarModule","MatSnackBarModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","entryComponents","ngJitMode","ɵɵsetNgModuleScope","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","factory","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","simpleSnackBarComponent","snackBarContainerComponent","handsetCssClass","_openedSnackBarRef","parent","value","openFromComponent","component","config","_attach","openFromTemplate","open","_config","Object","assign","_attachSnackBarContainer","overlayRef","userInjector","viewContainerRef","injector","create","providers","provide","useValue","containerPortal","containerRef","attach","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","HandsetPortrait","detachments","overlayElement","matches","remove","announce","_animateSnackBar","clear","overlayConfig","direction","positionStrategy","position","global","isRtl","isLeft","isRight","left","right","centerHorizontally","top","bottom","MatSnackBar_Factory","ɵɵinject","ɵprov","ɵɵdefineInjectable","INJECTOR","token"],"sources":["C:/Team-43-IMOS/Team-43-IMOS/Imos/node_modules/@angular/material/__ivy_ngcc__/fesm2015/snack-bar.js"],"sourcesContent":["import * as i1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig, Overlay } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, NgZone, ElementRef, ChangeDetectorRef, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { Platform } from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i2 from '@angular/cdk/a11y';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/layout';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/portal';\nimport * as ɵngcc5 from '@angular/cdk/overlay';\nimport * as ɵngcc6 from '@angular/cdk/a11y';\nimport * as ɵngcc7 from '@angular/cdk/layout';\n\nfunction SimpleSnackBar_div_2_Template(rf, ctx) { if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1)(1, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r1.action()); });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.data.action);\n} }\nfunction MatSnackBarContainer_ng_template_1_Template(rf, ctx) { }\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe(() => this.dismiss());\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) { return new (t || SimpleSnackBar)(ɵngcc0.ɵɵdirectiveInject(MatSnackBarRef), ɵngcc0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA)); };\nSimpleSnackBar.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SimpleSnackBar, selectors: [[\"simple-snack-bar\"]], hostAttrs: [1, \"mat-simple-snackbar\"], decls: 3, vars: 2, consts: [[\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]], template: function SimpleSnackBar_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"span\");\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate(ctx.data.message);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n    } }, dependencies: [ɵngcc1.NgIf, ɵngcc2.MatButton], styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"], encapsulation: 2, changeDetection: 0 });\nSimpleSnackBar.ctorParameters = () => [\n    { type: MatSnackBarRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DATA,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SimpleSnackBar, [{\n        type: Component,\n        args: [{ selector: 'simple-snack-bar', template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                    'class': 'mat-simple-snackbar'\n                }, styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"] }]\n    }], function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DATA]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0\n        }))),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._platform = _platform;\n        this.snackBarConfig = snackBarConfig;\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\n        this._announceDelay = 150;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has announced to screen readers. */\n        this._onAnnounce = new Subject();\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            this._applySnackBarClasses();\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden';\n        // Mark this element with an 'exit' attribute to indicate that the snackbar has\n        // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n        // test harness.\n        this._elementRef.nativeElement.setAttribute('mat-exit', '');\n        // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n        // long enough to visually read it either, so clear the timeout for announcing.\n        clearTimeout(this._announceTimeoutId);\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n            this._onExit.next();\n            this._onExit.complete();\n        });\n    }\n    /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n    _applySnackBarClasses() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (!this._announceTimeoutId) {\n            this._ngZone.runOutsideAngular(() => {\n                this._announceTimeoutId = setTimeout(() => {\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n                    if (inertElement && liveElement) {\n                        // If an element in the snack bar content is focused before being moved\n                        // track it and restore focus after moving to the live region.\n                        let focusedElement = null;\n                        if (this._platform.isBrowser &&\n                            document.activeElement instanceof HTMLElement &&\n                            inertElement.contains(document.activeElement)) {\n                            focusedElement = document.activeElement;\n                        }\n                        inertElement.removeAttribute('aria-hidden');\n                        liveElement.appendChild(inertElement);\n                        focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.focus();\n                        this._onAnnounce.next();\n                        this._onAnnounce.complete();\n                    }\n                }, this._announceDelay);\n            });\n        }\n    }\n}\nMatSnackBarContainer.ɵfac = function MatSnackBarContainer_Factory(t) { return new (t || MatSnackBarContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(MatSnackBarConfig)); };\nMatSnackBarContainer.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSnackBarContainer, selectors: [[\"snack-bar-container\"]], viewQuery: function MatSnackBarContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, hostAttrs: [1, \"mat-snack-bar-container\"], hostVars: 1, hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) { return ctx.onAnimationEnd($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 2, consts: [[\"aria-hidden\", \"true\"], [\"cdkPortalOutlet\", \"\"]], template: function MatSnackBarContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatSnackBarContainer_ng_template_1_Template, 0, 0, \"ng-template\", 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(2, \"div\");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵattribute(\"aria-live\", ctx._live)(\"role\", ctx._role);\n    } }, dependencies: [ɵngcc4.CdkPortalOutlet], styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"], encapsulation: 2, data: { animation: [matSnackBarAnimations.snackBarState] } });\nMatSnackBarContainer.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: Platform },\n    { type: MatSnackBarConfig }\n];\nMatSnackBarContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarContainer, [{\n        type: Component,\n        args: [{ selector: 'snack-bar-container', template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", changeDetection: ChangeDetectionStrategy.Default, encapsulation: ViewEncapsulation.None, animations: [matSnackBarAnimations.snackBarState], host: {\n                    'class': 'mat-snack-bar-container',\n                    '[@state]': '_animationState',\n                    '(@state.done)': 'onAnimationEnd($event)'\n                }, styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"] }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc3.Platform }, { type: MatSnackBarConfig }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet, { static: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵfac = function MatSnackBarModule_Factory(t) { return new (t || MatSnackBarModule)(); };\nMatSnackBarModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSnackBarModule });\nMatSnackBarModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [OverlayModule,\n        PortalModule,\n        CommonModule,\n        MatButtonModule,\n        MatCommonModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    CommonModule,\n                    MatButtonModule,\n                    MatCommonModule,\n                ],\n                exports: [MatSnackBarContainer, MatCommonModule],\n                declarations: [MatSnackBarContainer, SimpleSnackBar],\n                entryComponents: [MatSnackBarContainer, SimpleSnackBar]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSnackBarModule, { declarations: function () { return [MatSnackBarContainer, SimpleSnackBar]; }, imports: function () { return [OverlayModule,\n        PortalModule,\n        CommonModule,\n        MatButtonModule,\n        MatCommonModule]; }, exports: function () { return [MatSnackBarContainer, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n        /** The component that should be rendered as the snack bar's simple component. */\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        /** The container component that attaches the provided template or component. */\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        /** The CSS class to apply for handset mode. */\n        this.handsetCssClass = 'mat-snack-bar-handset';\n    }\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = Object.assign(Object.assign({}, this._defaultConfig), config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }]\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = Object.assign(Object.assign(Object.assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe(state => {\n            const classList = overlayRef.overlayElement.classList;\n            state.matches ? classList.add(this.handsetCssClass) : classList.remove(this.handsetCssClass);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = (config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl));\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data }\n            ]\n        });\n    }\n}\nMatSnackBar.ɵfac = function MatSnackBar_Factory(t) { return new (t || MatSnackBar)(ɵngcc0.ɵɵinject(ɵngcc5.Overlay), ɵngcc0.ɵɵinject(ɵngcc6.LiveAnnouncer), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc7.BreakpointObserver), ɵngcc0.ɵɵinject(MatSnackBar, 12), ɵngcc0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); };\nMatSnackBar.ɵprov = i0.ɵɵdefineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(i0.ɵɵinject(i1.Overlay), i0.ɵɵinject(i2.LiveAnnouncer), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i3.BreakpointObserver), i0.ɵɵinject(MatSnackBar, 12), i0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\nMatSnackBar.ctorParameters = () => [\n    { type: Overlay },\n    { type: LiveAnnouncer },\n    { type: Injector },\n    { type: BreakpointObserver },\n    { type: MatSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: MatSnackBarConfig, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBar, [{\n        type: Injectable,\n        args: [{ providedIn: MatSnackBarModule }]\n    }], function () { return [{ type: ɵngcc5.Overlay }, { type: ɵngcc6.LiveAnnouncer }, { type: ɵngcc0.Injector }, { type: ɵngcc7.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: MatSnackBarConfig, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}