{"ast":null,"code":"import { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Optional, Inject, Input, ContentChildren, Directive, NgModule } from '@angular/core';\nimport { setLines, MatLine, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nconst _c0 = [\"*\"];\nconst _c1 = [[[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], \"*\"];\nconst _c2 = [\"[mat-grid-avatar], [matGridAvatar]\", \"[mat-line], [matLine]\", \"*\"];\nconst _c3 = \".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\\n\";\n\nclass TileCoordinator {\n  constructor() {\n    /** Index at which the search for the next gap will start. */\n    this.columnIndex = 0;\n    /** The current row index. */\n\n    this.rowIndex = 0;\n  }\n  /** Gets the total number of rows occupied by tiles */\n\n\n  get rowCount() {\n    return this.rowIndex + 1;\n  }\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n\n\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker); // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   * @param tiles Tiles to be positioned.\n   */\n\n\n  update(numColumns, tiles) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n  /** Calculates the row and col position of a tile. */\n\n\n  _trackTile(tile) {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan); // Place tile in the resulting gap.\n\n\n    this._markTilePosition(gapStartIndex, tile); // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n\n\n    this.columnIndex = gapStartIndex + tile.colspan;\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n  /** Finds the next available space large enough to fit the tile. */\n\n\n  _findMatchingGap(tileCols) {\n    if (tileCols > this.tracker.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` + `grid with cols=\"${this.tracker.length}\".`);\n    } // Start index is inclusive, end index is exclusive.\n\n\n    let gapStartIndex = -1;\n    let gapEndIndex = -1; // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex); // If there are no more empty spaces in this row at all, move on to the next row.\n\n      if (gapStartIndex == -1) {\n        this._nextRow();\n\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex); // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n\n      this.columnIndex = gapStartIndex + 1; // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while (gapEndIndex - gapStartIndex < tileCols || gapEndIndex == 0); // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n\n\n    return Math.max(gapStartIndex, 0);\n  }\n  /** Move \"down\" to the next row. */\n\n\n  _nextRow() {\n    this.columnIndex = 0;\n    this.rowIndex++; // Decrement all spaces by one to reflect moving down one row.\n\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n\n\n  _findGapEndIndex(gapStartIndex) {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    } // The gap ends with the end of the row.\n\n\n    return this.tracker.length;\n  }\n  /** Update the tile tracker to account for the given tile in the given space. */\n\n\n  _markTilePosition(start, tile) {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n\n}\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\n\n\nclass TilePosition {\n  constructor(row, col) {\n    this.row = row;\n    this.col = col;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\n\n\nconst MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nclass MatGridTile {\n  constructor(_element, _gridList) {\n    this._element = _element;\n    this._gridList = _gridList;\n    this._rowspan = 1;\n    this._colspan = 1;\n  }\n  /** Amount of rows that the grid tile takes up. */\n\n\n  get rowspan() {\n    return this._rowspan;\n  }\n\n  set rowspan(value) {\n    this._rowspan = Math.round(coerceNumberProperty(value));\n  }\n  /** Amount of columns that the grid tile takes up. */\n\n\n  get colspan() {\n    return this._colspan;\n  }\n\n  set colspan(value) {\n    this._colspan = Math.round(coerceNumberProperty(value));\n  }\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n\n\n  _setStyle(property, value) {\n    this._element.nativeElement.style[property] = value;\n  }\n\n}\n\nMatGridTile.ɵfac = function MatGridTile_Factory(t) {\n  return new (t || MatGridTile)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_GRID_LIST, 8));\n};\n\nMatGridTile.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatGridTile,\n  selectors: [[\"mat-grid-tile\"]],\n  hostAttrs: [1, \"mat-grid-tile\"],\n  hostVars: 2,\n  hostBindings: function MatGridTile_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"rowspan\", ctx.rowspan)(\"colspan\", ctx.colspan);\n    }\n  },\n  inputs: {\n    rowspan: \"rowspan\",\n    colspan: \"colspan\"\n  },\n  exportAs: [\"matGridTile\"],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"mat-grid-tile-content\"]],\n  template: function MatGridTile_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  styles: [_c3],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nMatGridTile.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_GRID_LIST]\n  }]\n}];\n\nMatGridTile.propDecorators = {\n  rowspan: [{\n    type: Input\n  }],\n  colspan: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTile, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-tile',\n      exportAs: 'matGridTile',\n      host: {\n        'class': 'mat-grid-tile',\n        // Ensures that the \"rowspan\" and \"colspan\" input value is reflected in\n        // the DOM. This is needed for the grid-tile harness.\n        '[attr.rowspan]': 'rowspan',\n        '[attr.colspan]': 'colspan'\n      },\n      template: \"<div class=\\\"mat-grid-tile-content\\\">\\n  <ng-content></ng-content>\\n</div>\\n\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_GRID_LIST]\n      }]\n    }];\n  }, {\n    rowspan: [{\n      type: Input\n    }],\n    colspan: [{\n      type: Input\n    }]\n  });\n})();\n\nclass MatGridTileText {\n  constructor(_element) {\n    this._element = _element;\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n}\n\nMatGridTileText.ɵfac = function MatGridTileText_Factory(t) {\n  return new (t || MatGridTileText)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nMatGridTileText.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatGridTileText,\n  selectors: [[\"mat-grid-tile-header\"], [\"mat-grid-tile-footer\"]],\n  contentQueries: function MatGridTileText_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatLine, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lines = _t);\n    }\n  },\n  ngContentSelectors: _c2,\n  decls: 4,\n  vars: 0,\n  consts: [[1, \"mat-grid-list-text\"]],\n  template: function MatGridTileText_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c1);\n      ɵngcc0.ɵɵprojection(0);\n      ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n      ɵngcc0.ɵɵprojection(2, 1);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵprojection(3, 2);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nMatGridTileText.ctorParameters = () => [{\n  type: ElementRef\n}];\n\nMatGridTileText.propDecorators = {\n  _lines: [{\n    type: ContentChildren,\n    args: [MatLine, {\n      descendants: true\n    }]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileText, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n      template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    _lines: [{\n      type: ContentChildren,\n      args: [MatLine, {\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n\n\nclass MatGridAvatarCssMatStyler {}\n\nMatGridAvatarCssMatStyler.ɵfac = function MatGridAvatarCssMatStyler_Factory(t) {\n  return new (t || MatGridAvatarCssMatStyler)();\n};\n\nMatGridAvatarCssMatStyler.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatGridAvatarCssMatStyler,\n  selectors: [[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]],\n  hostAttrs: [1, \"mat-grid-avatar\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridAvatarCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-grid-avatar], [matGridAvatar]',\n      host: {\n        'class': 'mat-grid-avatar'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n\n\nclass MatGridTileHeaderCssMatStyler {}\n\nMatGridTileHeaderCssMatStyler.ɵfac = function MatGridTileHeaderCssMatStyler_Factory(t) {\n  return new (t || MatGridTileHeaderCssMatStyler)();\n};\n\nMatGridTileHeaderCssMatStyler.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatGridTileHeaderCssMatStyler,\n  selectors: [[\"mat-grid-tile-header\"]],\n  hostAttrs: [1, \"mat-grid-tile-header\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileHeaderCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-grid-tile-header',\n      host: {\n        'class': 'mat-grid-tile-header'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n\n\nclass MatGridTileFooterCssMatStyler {}\n\nMatGridTileFooterCssMatStyler.ɵfac = function MatGridTileFooterCssMatStyler_Factory(t) {\n  return new (t || MatGridTileFooterCssMatStyler)();\n};\n\nMatGridTileFooterCssMatStyler.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatGridTileFooterCssMatStyler,\n  selectors: [[\"mat-grid-tile-footer\"]],\n  hostAttrs: [1, \"mat-grid-tile-footer\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileFooterCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-grid-tile-footer',\n      host: {\n        'class': 'mat-grid-tile-footer'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\n\n\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\n\nclass TileStyler {\n  constructor() {\n    this._rows = 0;\n    this._rowspan = 0;\n  }\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n\n\n  init(gutterSize, tracker, cols, direction) {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n\n\n  getBaseTileSize(sizePercent, gutterFraction) {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n\n\n  getTilePosition(baseSize, offset) {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n\n\n  getTileSize(baseSize, span) {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n\n\n  setStyle(tile, rowIndex, colIndex) {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols; // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n  /** Sets the horizontal placement of the tile in the list. */\n\n\n  setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth); // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n\n\n  getGutterSpan() {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n\n\n  getTileSpan(tileHeight) {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n\n\n  getComputedHeight() {\n    return null;\n  }\n\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\n\n\nclass FixedTileStyler extends TileStyler {\n  constructor(fixedRowHeight) {\n    super();\n    this.fixedRowHeight = fixedRowHeight;\n  }\n\n  init(gutterSize, tracker, cols, direction) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile, rowIndex) {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight() {\n    return ['height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)];\n  }\n\n  reset(list) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n\n        tile._setStyle('height', null);\n      });\n    }\n  }\n\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\n\n\nclass RatioTileStyler extends TileStyler {\n  constructor(value) {\n    super();\n\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth); // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight() {\n    return ['paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)];\n  }\n\n  reset(list) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  _parseRatio(value) {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\n\n\nclass FitTileStyler extends TileStyler {\n  setRowStyles(tile, rowIndex) {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan; // Fraction of the horizontal gutter size that each column takes up.\n\n    let gutterHeightPerTile = (this._rows - 1) / this._rows; // Base vertical size of a column.\n\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n\n        tile._setStyle('height', null);\n      });\n    }\n  }\n\n}\n/** Wraps a CSS string in a calc function */\n\n\nfunction calc(exp) {\n  return `calc(${exp})`;\n}\n/** Appends pixels to a CSS string if no units are given. */\n\n\nfunction normalizeUnits(value) {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\n\nconst MAT_FIT_MODE = 'fit';\n\nclass MatGridList {\n  constructor(_element, _dir) {\n    this._element = _element;\n    this._dir = _dir;\n    /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n\n    this._gutter = '1px';\n  }\n  /** Amount of columns in the grid list. */\n\n\n  get cols() {\n    return this._cols;\n  }\n\n  set cols(value) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n  /** Size of the grid list's gutter in pixels. */\n\n\n  get gutterSize() {\n    return this._gutter;\n  }\n\n  set gutterSize(value) {\n    this._gutter = `${value == null ? '' : value}`;\n  }\n  /** Set internal representation of row height from the user-provided value. */\n\n\n  get rowHeight() {\n    return this._rowHeight;\n  }\n\n  set rowHeight(value) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n\n    this._checkRowHeight();\n  }\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n\n\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n  /** Throw a friendly error if cols property is missing */\n\n\n  _checkCols() {\n    if (!this.cols && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` + `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n  /** Default to equal width:height if rowHeight property is missing */\n\n\n  _checkRowHeight() {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n\n\n  _setTileStyler(rowHeight) {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n  /** Computes and applies the size and position for all children grid tiles. */\n\n\n  _layoutTiles() {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n    const tracker = this._tileCoordinator;\n\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n  /** Sets style on the main grid-list element, given the style name and value. */\n\n\n  _setListStyle(style) {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n\n}\n\nMatGridList.ɵfac = function MatGridList_Factory(t) {\n  return new (t || MatGridList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8));\n};\n\nMatGridList.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatGridList,\n  selectors: [[\"mat-grid-list\"]],\n  contentQueries: function MatGridList_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatGridTile, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tiles = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-grid-list\"],\n  hostVars: 1,\n  hostBindings: function MatGridList_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"cols\", ctx.cols);\n    }\n  },\n  inputs: {\n    cols: \"cols\",\n    gutterSize: \"gutterSize\",\n    rowHeight: \"rowHeight\"\n  },\n  exportAs: [\"matGridList\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }])],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  template: function MatGridList_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\");\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  styles: [_c3],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nMatGridList.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}];\n\nMatGridList.propDecorators = {\n  _tiles: [{\n    type: ContentChildren,\n    args: [MatGridTile, {\n      descendants: true\n    }]\n  }],\n  cols: [{\n    type: Input\n  }],\n  gutterSize: [{\n    type: Input\n  }],\n  rowHeight: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridList, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-list',\n      exportAs: 'matGridList',\n      template: \"<div>\\n  <ng-content></ng-content>\\n</div>\",\n      host: {\n        'class': 'mat-grid-list',\n        // Ensures that the \"cols\" input value is reflected in the DOM. This is\n        // needed for the grid-list harness.\n        '[attr.cols]': 'cols'\n      },\n      providers: [{\n        provide: MAT_GRID_LIST,\n        useExisting: MatGridList\n      }],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    cols: [{\n      type: Input\n    }],\n    gutterSize: [{\n      type: Input\n    }],\n    rowHeight: [{\n      type: Input\n    }],\n    _tiles: [{\n      type: ContentChildren,\n      args: [MatGridTile, {\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatGridListModule {}\n\nMatGridListModule.ɵfac = function MatGridListModule_Factory(t) {\n  return new (t || MatGridListModule)();\n};\n\nMatGridListModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatGridListModule\n});\nMatGridListModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [MatLineModule, MatCommonModule, MatLineModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridListModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatLineModule, MatCommonModule],\n      exports: [MatGridList, MatGridTile, MatGridTileText, MatLineModule, MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler],\n      declarations: [MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatGridListModule, {\n    declarations: function () {\n      return [MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler];\n    },\n    imports: function () {\n      return [MatLineModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatGridList, MatGridTile, MatGridTileText, MatLineModule, MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Privately exported for the grid-list harness.\n\n\nconst ɵTileCoordinator = TileCoordinator;\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatGridAvatarCssMatStyler, MatGridList, MatGridListModule, MatGridTile, MatGridTileFooterCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileText, ɵTileCoordinator, MAT_GRID_LIST as ɵangular_material_src_material_grid_list_grid_list_a };","map":{"version":3,"names":["InjectionToken","Component","ViewEncapsulation","ChangeDetectionStrategy","ElementRef","Optional","Inject","Input","ContentChildren","Directive","NgModule","setLines","MatLine","MatLineModule","MatCommonModule","coerceNumberProperty","Directionality","ɵngcc0","ɵngcc1","_c0","_c1","_c2","_c3","TileCoordinator","constructor","columnIndex","rowIndex","rowCount","rowspan","lastRowMax","Math","max","tracker","update","numColumns","tiles","Array","fill","length","positions","map","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","ngDevMode","Error","gapEndIndex","_nextRow","indexOf","_findGapEndIndex","i","start","row","col","MAT_GRID_LIST","MatGridTile","_element","_gridList","_rowspan","_colspan","value","round","_setStyle","property","nativeElement","style","ɵfac","MatGridTile_Factory","t","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","hostVars","hostBindings","MatGridTile_HostBindings","rf","ctx","ɵɵattribute","inputs","exportAs","ngContentSelectors","decls","vars","consts","template","MatGridTile_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","styles","encapsulation","changeDetection","ctorParameters","undefined","decorators","args","propDecorators","ɵsetClassMetadata","selector","host","None","OnPush","MatGridTileText","ngAfterContentInit","_lines","MatGridTileText_Factory","contentQueries","MatGridTileText_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","MatGridTileText_Template","descendants","MatGridAvatarCssMatStyler","MatGridAvatarCssMatStyler_Factory","ɵdir","ɵɵdefineDirective","MatGridTileHeaderCssMatStyler","MatGridTileHeaderCssMatStyler_Factory","MatGridTileFooterCssMatStyler","MatGridTileFooterCssMatStyler_Factory","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","direction","_gutterSize","normalizeUnits","_cols","_direction","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","offset","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","test","reset","list","_setListStyle","_tiles","forEach","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","split","parseFloat","FitTileStyler","gutterHeightPerTile","exp","match","MAT_FIT_MODE","MatGridList","_dir","_gutter","rowHeight","_rowHeight","newValue","_setTileStyler","ngOnInit","_checkCols","_checkRowHeight","ngAfterContentChecked","_layoutTiles","_tileStyler","_tileCoordinator","filter","index","pos","MatGridList_Factory","MatGridList_ContentQueries","MatGridList_HostBindings","features","ɵɵProvidersFeature","provide","useExisting","MatGridList_Template","providers","MatGridListModule","MatGridListModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope","ɵTileCoordinator","ɵangular_material_src_material_grid_list_grid_list_a"],"sources":["C:/Team-43-IMOS/Team-43-IMOS/Imos/node_modules/@angular/material/__ivy_ngcc__/fesm2015/grid-list.js"],"sourcesContent":["import { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Optional, Inject, Input, ContentChildren, Directive, NgModule } from '@angular/core';\nimport { setLines, MatLine, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\n\nconst _c0 = [\"*\"];\nconst _c1 = [[[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], \"*\"];\nconst _c2 = [\"[mat-grid-avatar], [matGridAvatar]\", \"[mat-line], [matLine]\", \"*\"];\nconst _c3 = \".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\\n\";\nclass TileCoordinator {\n    constructor() {\n        /** Index at which the search for the next gap will start. */\n        this.columnIndex = 0;\n        /** The current row index. */\n        this.rowIndex = 0;\n    }\n    /** Gets the total number of rows occupied by tiles */\n    get rowCount() { return this.rowIndex + 1; }\n    /**\n     * Gets the total span of rows occupied by tiles.\n     * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n     */\n    get rowspan() {\n        const lastRowMax = Math.max(...this.tracker);\n        // if any of the tiles has a rowspan that pushes it beyond the total row count,\n        // add the difference to the rowcount\n        return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n    }\n    /**\n     * Updates the tile positions.\n     * @param numColumns Amount of columns in the grid.\n     * @param tiles Tiles to be positioned.\n     */\n    update(numColumns, tiles) {\n        this.columnIndex = 0;\n        this.rowIndex = 0;\n        this.tracker = new Array(numColumns);\n        this.tracker.fill(0, 0, this.tracker.length);\n        this.positions = tiles.map(tile => this._trackTile(tile));\n    }\n    /** Calculates the row and col position of a tile. */\n    _trackTile(tile) {\n        // Find a gap large enough for this tile.\n        const gapStartIndex = this._findMatchingGap(tile.colspan);\n        // Place tile in the resulting gap.\n        this._markTilePosition(gapStartIndex, tile);\n        // The next time we look for a gap, the search will start at columnIndex, which should be\n        // immediately after the tile that has just been placed.\n        this.columnIndex = gapStartIndex + tile.colspan;\n        return new TilePosition(this.rowIndex, gapStartIndex);\n    }\n    /** Finds the next available space large enough to fit the tile. */\n    _findMatchingGap(tileCols) {\n        if (tileCols > this.tracker.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                `grid with cols=\"${this.tracker.length}\".`);\n        }\n        // Start index is inclusive, end index is exclusive.\n        let gapStartIndex = -1;\n        let gapEndIndex = -1;\n        // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n        do {\n            // If we've reached the end of the row, go to the next row.\n            if (this.columnIndex + tileCols > this.tracker.length) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n            // If there are no more empty spaces in this row at all, move on to the next row.\n            if (gapStartIndex == -1) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapEndIndex = this._findGapEndIndex(gapStartIndex);\n            // If a gap large enough isn't found, we want to start looking immediately after the current\n            // gap on the next iteration.\n            this.columnIndex = gapStartIndex + 1;\n            // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n            // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n        } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n        // If we still didn't manage to find a gap, ensure that the index is\n        // at least zero so the tile doesn't get pulled out of the grid.\n        return Math.max(gapStartIndex, 0);\n    }\n    /** Move \"down\" to the next row. */\n    _nextRow() {\n        this.columnIndex = 0;\n        this.rowIndex++;\n        // Decrement all spaces by one to reflect moving down one row.\n        for (let i = 0; i < this.tracker.length; i++) {\n            this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n        }\n    }\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     */\n    _findGapEndIndex(gapStartIndex) {\n        for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n            if (this.tracker[i] != 0) {\n                return i;\n            }\n        }\n        // The gap ends with the end of the row.\n        return this.tracker.length;\n    }\n    /** Update the tile tracker to account for the given tile in the given space. */\n    _markTilePosition(start, tile) {\n        for (let i = 0; i < tile.colspan; i++) {\n            this.tracker[start + i] = tile.rowspan;\n        }\n    }\n}\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nclass TilePosition {\n    constructor(row, col) {\n        this.row = row;\n        this.col = col;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nconst MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatGridTile {\n    constructor(_element, _gridList) {\n        this._element = _element;\n        this._gridList = _gridList;\n        this._rowspan = 1;\n        this._colspan = 1;\n    }\n    /** Amount of rows that the grid tile takes up. */\n    get rowspan() { return this._rowspan; }\n    set rowspan(value) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n    /** Amount of columns that the grid tile takes up. */\n    get colspan() { return this._colspan; }\n    set colspan(value) { this._colspan = Math.round(coerceNumberProperty(value)); }\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     */\n    _setStyle(property, value) {\n        this._element.nativeElement.style[property] = value;\n    }\n}\nMatGridTile.ɵfac = function MatGridTile_Factory(t) { return new (t || MatGridTile)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_GRID_LIST, 8)); };\nMatGridTile.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatGridTile, selectors: [[\"mat-grid-tile\"]], hostAttrs: [1, \"mat-grid-tile\"], hostVars: 2, hostBindings: function MatGridTile_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"rowspan\", ctx.rowspan)(\"colspan\", ctx.colspan);\n    } }, inputs: { rowspan: \"rowspan\", colspan: \"colspan\" }, exportAs: [\"matGridTile\"], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-grid-tile-content\"]], template: function MatGridTile_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [_c3], encapsulation: 2, changeDetection: 0 });\nMatGridTile.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_GRID_LIST,] }] }\n];\nMatGridTile.propDecorators = {\n    rowspan: [{ type: Input }],\n    colspan: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTile, [{\n        type: Component,\n        args: [{ selector: 'mat-grid-tile', exportAs: 'matGridTile', host: {\n                    'class': 'mat-grid-tile',\n                    // Ensures that the \"rowspan\" and \"colspan\" input value is reflected in\n                    // the DOM. This is needed for the grid-tile harness.\n                    '[attr.rowspan]': 'rowspan',\n                    '[attr.colspan]': 'colspan'\n                }, template: \"<div class=\\\"mat-grid-tile-content\\\">\\n  <ng-content></ng-content>\\n</div>\\n\", encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\\n\"] }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_GRID_LIST]\n            }] }]; }, { rowspan: [{\n            type: Input\n        }], colspan: [{\n            type: Input\n        }] }); })();\nclass MatGridTileText {\n    constructor(_element) {\n        this._element = _element;\n    }\n    ngAfterContentInit() {\n        setLines(this._lines, this._element);\n    }\n}\nMatGridTileText.ɵfac = function MatGridTileText_Factory(t) { return new (t || MatGridTileText)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatGridTileText.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatGridTileText, selectors: [[\"mat-grid-tile-header\"], [\"mat-grid-tile-footer\"]], contentQueries: function MatGridTileText_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatLine, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lines = _t);\n    } }, ngContentSelectors: _c2, decls: 4, vars: 0, consts: [[1, \"mat-grid-list-text\"]], template: function MatGridTileText_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(3, 2);\n    } }, encapsulation: 2, changeDetection: 0 });\nMatGridTileText.ctorParameters = () => [\n    { type: ElementRef }\n];\nMatGridTileText.propDecorators = {\n    _lines: [{ type: ContentChildren, args: [MatLine, { descendants: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileText, [{\n        type: Component,\n        args: [{\n                selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n                template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { _lines: [{\n            type: ContentChildren,\n            args: [MatLine, { descendants: true }]\n        }] }); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridAvatarCssMatStyler {\n}\nMatGridAvatarCssMatStyler.ɵfac = function MatGridAvatarCssMatStyler_Factory(t) { return new (t || MatGridAvatarCssMatStyler)(); };\nMatGridAvatarCssMatStyler.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatGridAvatarCssMatStyler, selectors: [[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], hostAttrs: [1, \"mat-grid-avatar\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridAvatarCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-grid-avatar], [matGridAvatar]',\n                host: { 'class': 'mat-grid-avatar' }\n            }]\n    }], null, null); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileHeaderCssMatStyler {\n}\nMatGridTileHeaderCssMatStyler.ɵfac = function MatGridTileHeaderCssMatStyler_Factory(t) { return new (t || MatGridTileHeaderCssMatStyler)(); };\nMatGridTileHeaderCssMatStyler.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatGridTileHeaderCssMatStyler, selectors: [[\"mat-grid-tile-header\"]], hostAttrs: [1, \"mat-grid-tile-header\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileHeaderCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-grid-tile-header',\n                host: { 'class': 'mat-grid-tile-header' }\n            }]\n    }], null, null); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileFooterCssMatStyler {\n}\nMatGridTileFooterCssMatStyler.ɵfac = function MatGridTileFooterCssMatStyler_Factory(t) { return new (t || MatGridTileFooterCssMatStyler)(); };\nMatGridTileFooterCssMatStyler.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatGridTileFooterCssMatStyler, selectors: [[\"mat-grid-tile-footer\"]], hostAttrs: [1, \"mat-grid-tile-footer\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileFooterCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-grid-tile-footer',\n                host: { 'class': 'mat-grid-tile-footer' }\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nclass TileStyler {\n    constructor() {\n        this._rows = 0;\n        this._rowspan = 0;\n    }\n    /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param gutterSize Size of the grid's gutter.\n     * @param tracker Instance of the TileCoordinator.\n     * @param cols Amount of columns in the grid.\n     * @param direction Layout direction of the grid.\n     */\n    init(gutterSize, tracker, cols, direction) {\n        this._gutterSize = normalizeUnits(gutterSize);\n        this._rows = tracker.rowCount;\n        this._rowspan = tracker.rowspan;\n        this._cols = cols;\n        this._direction = direction;\n    }\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n    getBaseTileSize(sizePercent, gutterFraction) {\n        // Take the base size percent (as would be if evenly dividing the size between cells),\n        // and then subtracting the size of one gutter. However, since there are no gutters on the\n        // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n        // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n        // edge evenly among the cells).\n        return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n    }\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param offset Number of tiles that have already been rendered in the row/column.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @return Position of the tile as a CSS calc() expression.\n     */\n    getTilePosition(baseSize, offset) {\n        // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n        // row/column (offset).\n        return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n    }\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param span The tile's rowspan or colspan.\n     * @return Size of the tile as a CSS calc() expression.\n     */\n    getTileSize(baseSize, span) {\n        return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n    }\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param tile Tile to which to apply the styling.\n     * @param rowIndex Index of the tile's row.\n     * @param colIndex Index of the tile's column.\n     */\n    setStyle(tile, rowIndex, colIndex) {\n        // Percent of the available horizontal space that one column takes up.\n        let percentWidthPerTile = 100 / this._cols;\n        // Fraction of the vertical gutter size that each column takes up.\n        // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n        let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n        this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n        this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    }\n    /** Sets the horizontal placement of the tile in the list. */\n    setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n        // Base horizontal size of a column.\n        let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n        // The width and horizontal position of each tile is always calculated the same way, but the\n        // height and vertical position depends on the rowMode.\n        let side = this._direction === 'rtl' ? 'right' : 'left';\n        tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n        tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n    }\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     */\n    getGutterSpan() {\n        return `${this._gutterSize} * (${this._rowspan} - 1)`;\n    }\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param tileHeight Height of the tile.\n     */\n    getTileSpan(tileHeight) {\n        return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n    }\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * @docs-private\n     */\n    getComputedHeight() { return null; }\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nclass FixedTileStyler extends TileStyler {\n    constructor(fixedRowHeight) {\n        super();\n        this.fixedRowHeight = fixedRowHeight;\n    }\n    init(gutterSize, tracker, cols, direction) {\n        super.init(gutterSize, tracker, cols, direction);\n        this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n        if (!cssCalcAllowedValue.test(this.fixedRowHeight) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n        }\n    }\n    setRowStyles(tile, rowIndex) {\n        tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n    }\n    getComputedHeight() {\n        return [\n            'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    reset(list) {\n        list._setListStyle(['height', null]);\n        if (list._tiles) {\n            list._tiles.forEach(tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            });\n        }\n    }\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nclass RatioTileStyler extends TileStyler {\n    constructor(value) {\n        super();\n        this._parseRatio(value);\n    }\n    setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n        let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n        this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n        // Use padding-top and margin-top to maintain the given aspect ratio, as\n        // a percentage-based value for these properties is applied versus the *width* of the\n        // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n        tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n        tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n    }\n    getComputedHeight() {\n        return [\n            'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    reset(list) {\n        list._setListStyle(['paddingBottom', null]);\n        list._tiles.forEach(tile => {\n            tile._setStyle('marginTop', null);\n            tile._setStyle('paddingTop', null);\n        });\n    }\n    _parseRatio(value) {\n        const ratioParts = value.split(':');\n        if (ratioParts.length !== 2 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n        }\n        this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n    }\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nclass FitTileStyler extends TileStyler {\n    setRowStyles(tile, rowIndex) {\n        // Percent of the available vertical space that one row takes up.\n        let percentHeightPerTile = 100 / this._rowspan;\n        // Fraction of the horizontal gutter size that each column takes up.\n        let gutterHeightPerTile = (this._rows - 1) / this._rows;\n        // Base vertical size of a column.\n        let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n        tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n    }\n    reset(list) {\n        if (list._tiles) {\n            list._tiles.forEach(tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            });\n        }\n    }\n}\n/** Wraps a CSS string in a calc function */\nfunction calc(exp) {\n    return `calc(${exp})`;\n}\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value) {\n    return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\nconst MAT_FIT_MODE = 'fit';\nclass MatGridList {\n    constructor(_element, _dir) {\n        this._element = _element;\n        this._dir = _dir;\n        /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n        this._gutter = '1px';\n    }\n    /** Amount of columns in the grid list. */\n    get cols() { return this._cols; }\n    set cols(value) {\n        this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n    }\n    /** Size of the grid list's gutter in pixels. */\n    get gutterSize() { return this._gutter; }\n    set gutterSize(value) { this._gutter = `${value == null ? '' : value}`; }\n    /** Set internal representation of row height from the user-provided value. */\n    get rowHeight() { return this._rowHeight; }\n    set rowHeight(value) {\n        const newValue = `${value == null ? '' : value}`;\n        if (newValue !== this._rowHeight) {\n            this._rowHeight = newValue;\n            this._setTileStyler(this._rowHeight);\n        }\n    }\n    ngOnInit() {\n        this._checkCols();\n        this._checkRowHeight();\n    }\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     */\n    ngAfterContentChecked() {\n        this._layoutTiles();\n    }\n    /** Throw a friendly error if cols property is missing */\n    _checkCols() {\n        if (!this.cols && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: must pass in number of columns. ` +\n                `Example: <mat-grid-list cols=\"3\">`);\n        }\n    }\n    /** Default to equal width:height if rowHeight property is missing */\n    _checkRowHeight() {\n        if (!this._rowHeight) {\n            this._setTileStyler('1:1');\n        }\n    }\n    /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n    _setTileStyler(rowHeight) {\n        if (this._tileStyler) {\n            this._tileStyler.reset(this);\n        }\n        if (rowHeight === MAT_FIT_MODE) {\n            this._tileStyler = new FitTileStyler();\n        }\n        else if (rowHeight && rowHeight.indexOf(':') > -1) {\n            this._tileStyler = new RatioTileStyler(rowHeight);\n        }\n        else {\n            this._tileStyler = new FixedTileStyler(rowHeight);\n        }\n    }\n    /** Computes and applies the size and position for all children grid tiles. */\n    _layoutTiles() {\n        if (!this._tileCoordinator) {\n            this._tileCoordinator = new TileCoordinator();\n        }\n        const tracker = this._tileCoordinator;\n        const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._tileCoordinator.update(this.cols, tiles);\n        this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n        tiles.forEach((tile, index) => {\n            const pos = tracker.positions[index];\n            this._tileStyler.setStyle(tile, pos.row, pos.col);\n        });\n        this._setListStyle(this._tileStyler.getComputedHeight());\n    }\n    /** Sets style on the main grid-list element, given the style name and value. */\n    _setListStyle(style) {\n        if (style) {\n            this._element.nativeElement.style[style[0]] = style[1];\n        }\n    }\n}\nMatGridList.ɵfac = function MatGridList_Factory(t) { return new (t || MatGridList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8)); };\nMatGridList.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatGridList, selectors: [[\"mat-grid-list\"]], contentQueries: function MatGridList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatGridTile, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tiles = _t);\n    } }, hostAttrs: [1, \"mat-grid-list\"], hostVars: 1, hostBindings: function MatGridList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"cols\", ctx.cols);\n    } }, inputs: { cols: \"cols\", gutterSize: \"gutterSize\", rowHeight: \"rowHeight\" }, exportAs: [\"matGridList\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: MAT_GRID_LIST,\n                useExisting: MatGridList\n            }])], ngContentSelectors: _c0, decls: 2, vars: 0, template: function MatGridList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\");\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [_c3], encapsulation: 2, changeDetection: 0 });\nMatGridList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatGridList.propDecorators = {\n    _tiles: [{ type: ContentChildren, args: [MatGridTile, { descendants: true },] }],\n    cols: [{ type: Input }],\n    gutterSize: [{ type: Input }],\n    rowHeight: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridList, [{\n        type: Component,\n        args: [{ selector: 'mat-grid-list', exportAs: 'matGridList', template: \"<div>\\n  <ng-content></ng-content>\\n</div>\", host: {\n                    'class': 'mat-grid-list',\n                    // Ensures that the \"cols\" input value is reflected in the DOM. This is\n                    // needed for the grid-list harness.\n                    '[attr.cols]': 'cols'\n                }, providers: [{\n                        provide: MAT_GRID_LIST,\n                        useExisting: MatGridList\n                    }], changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\\n\"] }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { cols: [{\n            type: Input\n        }], gutterSize: [{\n            type: Input\n        }], rowHeight: [{\n            type: Input\n        }], _tiles: [{\n            type: ContentChildren,\n            args: [MatGridTile, { descendants: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatGridListModule {\n}\nMatGridListModule.ɵfac = function MatGridListModule_Factory(t) { return new (t || MatGridListModule)(); };\nMatGridListModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatGridListModule });\nMatGridListModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [MatLineModule, MatCommonModule, MatLineModule,\n        MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridListModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatLineModule, MatCommonModule],\n                exports: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatLineModule,\n                    MatCommonModule,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ],\n                declarations: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatGridListModule, { declarations: function () { return [MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]; }, imports: function () { return [MatLineModule, MatCommonModule]; }, exports: function () { return [MatGridList, MatGridTile, MatGridTileText, MatLineModule,\n        MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Privately exported for the grid-list harness.\nconst ɵTileCoordinator = TileCoordinator;\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatGridAvatarCssMatStyler, MatGridList, MatGridListModule, MatGridTile, MatGridTileFooterCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileText, ɵTileCoordinator, MAT_GRID_LIST as ɵangular_material_src_material_grid_list_grid_list_a };\n\n"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,SAAzB,EAAoCC,iBAApC,EAAuDC,uBAAvD,EAAgFC,UAAhF,EAA4FC,QAA5F,EAAsGC,MAAtG,EAA8GC,KAA9G,EAAqHC,eAArH,EAAsIC,SAAtI,EAAiJC,QAAjJ,QAAiK,eAAjK;AACA,SAASC,QAAT,EAAmBC,OAAnB,EAA4BC,aAA5B,EAA2CC,eAA3C,QAAkE,wBAAlE;AACA,SAASC,oBAAT,QAAqC,uBAArC;AACA,SAASC,cAAT,QAA+B,mBAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,mBAAxB;AAEA,MAAMC,GAAG,GAAG,CAAC,GAAD,CAAZ;AACA,MAAMC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAD,EAAK,iBAAL,EAAwB,EAAxB,CAAD,EAA8B,CAAC,EAAD,EAAK,eAAL,EAAsB,EAAtB,CAA9B,CAAD,EAA2D,CAAC,CAAC,EAAD,EAAK,UAAL,EAAiB,EAAjB,CAAD,EAAuB,CAAC,EAAD,EAAK,SAAL,EAAgB,EAAhB,CAAvB,CAA3D,EAAwG,GAAxG,CAAZ;AACA,MAAMC,GAAG,GAAG,CAAC,oCAAD,EAAuC,uBAAvC,EAAgE,GAAhE,CAAZ;AACA,MAAMC,GAAG,GAAG,ivCAAZ;;AACA,MAAMC,eAAN,CAAsB;EAClBC,WAAW,GAAG;IACV;IACA,KAAKC,WAAL,GAAmB,CAAnB;IACA;;IACA,KAAKC,QAAL,GAAgB,CAAhB;EACH;EACD;;;EACY,IAARC,QAAQ,GAAG;IAAE,OAAO,KAAKD,QAAL,GAAgB,CAAvB;EAA2B;EAC5C;AACJ;AACA;AACA;;;EACe,IAAPE,OAAO,GAAG;IACV,MAAMC,UAAU,GAAGC,IAAI,CAACC,GAAL,CAAS,GAAG,KAAKC,OAAjB,CAAnB,CADU,CAEV;IACA;;IACA,OAAOH,UAAU,GAAG,CAAb,GAAiB,KAAKF,QAAL,GAAgBE,UAAhB,GAA6B,CAA9C,GAAkD,KAAKF,QAA9D;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIM,MAAM,CAACC,UAAD,EAAaC,KAAb,EAAoB;IACtB,KAAKV,WAAL,GAAmB,CAAnB;IACA,KAAKC,QAAL,GAAgB,CAAhB;IACA,KAAKM,OAAL,GAAe,IAAII,KAAJ,CAAUF,UAAV,CAAf;IACA,KAAKF,OAAL,CAAaK,IAAb,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,KAAKL,OAAL,CAAaM,MAArC;IACA,KAAKC,SAAL,GAAiBJ,KAAK,CAACK,GAAN,CAAUC,IAAI,IAAI,KAAKC,UAAL,CAAgBD,IAAhB,CAAlB,CAAjB;EACH;EACD;;;EACAC,UAAU,CAACD,IAAD,EAAO;IACb;IACA,MAAME,aAAa,GAAG,KAAKC,gBAAL,CAAsBH,IAAI,CAACI,OAA3B,CAAtB,CAFa,CAGb;;;IACA,KAAKC,iBAAL,CAAuBH,aAAvB,EAAsCF,IAAtC,EAJa,CAKb;IACA;;;IACA,KAAKhB,WAAL,GAAmBkB,aAAa,GAAGF,IAAI,CAACI,OAAxC;IACA,OAAO,IAAIE,YAAJ,CAAiB,KAAKrB,QAAtB,EAAgCiB,aAAhC,CAAP;EACH;EACD;;;EACAC,gBAAgB,CAACI,QAAD,EAAW;IACvB,IAAIA,QAAQ,GAAG,KAAKhB,OAAL,CAAaM,MAAxB,KAAmC,OAAOW,SAAP,KAAqB,WAArB,IAAoCA,SAAvE,CAAJ,EAAuF;MACnF,MAAMC,KAAK,CAAE,oCAAmCF,QAAS,iBAA7C,GACP,mBAAkB,KAAKhB,OAAL,CAAaM,MAAO,IADhC,CAAX;IAEH,CAJsB,CAKvB;;;IACA,IAAIK,aAAa,GAAG,CAAC,CAArB;IACA,IAAIQ,WAAW,GAAG,CAAC,CAAnB,CAPuB,CAQvB;;IACA,GAAG;MACC;MACA,IAAI,KAAK1B,WAAL,GAAmBuB,QAAnB,GAA8B,KAAKhB,OAAL,CAAaM,MAA/C,EAAuD;QACnD,KAAKc,QAAL;;QACAT,aAAa,GAAG,KAAKX,OAAL,CAAaqB,OAAb,CAAqB,CAArB,EAAwB,KAAK5B,WAA7B,CAAhB;QACA0B,WAAW,GAAG,KAAKG,gBAAL,CAAsBX,aAAtB,CAAd;QACA;MACH;;MACDA,aAAa,GAAG,KAAKX,OAAL,CAAaqB,OAAb,CAAqB,CAArB,EAAwB,KAAK5B,WAA7B,CAAhB,CARD,CASC;;MACA,IAAIkB,aAAa,IAAI,CAAC,CAAtB,EAAyB;QACrB,KAAKS,QAAL;;QACAT,aAAa,GAAG,KAAKX,OAAL,CAAaqB,OAAb,CAAqB,CAArB,EAAwB,KAAK5B,WAA7B,CAAhB;QACA0B,WAAW,GAAG,KAAKG,gBAAL,CAAsBX,aAAtB,CAAd;QACA;MACH;;MACDQ,WAAW,GAAG,KAAKG,gBAAL,CAAsBX,aAAtB,CAAd,CAhBD,CAiBC;MACA;;MACA,KAAKlB,WAAL,GAAmBkB,aAAa,GAAG,CAAnC,CAnBD,CAoBC;MACA;IACH,CAtBD,QAsBUQ,WAAW,GAAGR,aAAd,GAA8BK,QAA/B,IAA6CG,WAAW,IAAI,CAtBrE,EATuB,CAgCvB;IACA;;;IACA,OAAOrB,IAAI,CAACC,GAAL,CAASY,aAAT,EAAwB,CAAxB,CAAP;EACH;EACD;;;EACAS,QAAQ,GAAG;IACP,KAAK3B,WAAL,GAAmB,CAAnB;IACA,KAAKC,QAAL,GAFO,CAGP;;IACA,KAAK,IAAI6B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKvB,OAAL,CAAaM,MAAjC,EAAyCiB,CAAC,EAA1C,EAA8C;MAC1C,KAAKvB,OAAL,CAAauB,CAAb,IAAkBzB,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,KAAKC,OAAL,CAAauB,CAAb,IAAkB,CAA9B,CAAlB;IACH;EACJ;EACD;AACJ;AACA;AACA;;;EACID,gBAAgB,CAACX,aAAD,EAAgB;IAC5B,KAAK,IAAIY,CAAC,GAAGZ,aAAa,GAAG,CAA7B,EAAgCY,CAAC,GAAG,KAAKvB,OAAL,CAAaM,MAAjD,EAAyDiB,CAAC,EAA1D,EAA8D;MAC1D,IAAI,KAAKvB,OAAL,CAAauB,CAAb,KAAmB,CAAvB,EAA0B;QACtB,OAAOA,CAAP;MACH;IACJ,CAL2B,CAM5B;;;IACA,OAAO,KAAKvB,OAAL,CAAaM,MAApB;EACH;EACD;;;EACAQ,iBAAiB,CAACU,KAAD,EAAQf,IAAR,EAAc;IAC3B,KAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,IAAI,CAACI,OAAzB,EAAkCU,CAAC,EAAnC,EAAuC;MACnC,KAAKvB,OAAL,CAAawB,KAAK,GAAGD,CAArB,IAA0Bd,IAAI,CAACb,OAA/B;IACH;EACJ;;AA1GiB;AA4GtB;AACA;AACA;AACA;;;AACA,MAAMmB,YAAN,CAAmB;EACfvB,WAAW,CAACiC,GAAD,EAAMC,GAAN,EAAW;IAClB,KAAKD,GAAL,GAAWA,GAAX;IACA,KAAKC,GAAL,GAAWA,GAAX;EACH;;AAJc;AAOnB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,MAAMC,aAAa,GAAG,IAAI3D,cAAJ,CAAmB,eAAnB,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAM4D,WAAN,CAAkB;EACdpC,WAAW,CAACqC,QAAD,EAAWC,SAAX,EAAsB;IAC7B,KAAKD,QAAL,GAAgBA,QAAhB;IACA,KAAKC,SAAL,GAAiBA,SAAjB;IACA,KAAKC,QAAL,GAAgB,CAAhB;IACA,KAAKC,QAAL,GAAgB,CAAhB;EACH;EACD;;;EACW,IAAPpC,OAAO,GAAG;IAAE,OAAO,KAAKmC,QAAZ;EAAuB;;EAC5B,IAAPnC,OAAO,CAACqC,KAAD,EAAQ;IAAE,KAAKF,QAAL,GAAgBjC,IAAI,CAACoC,KAAL,CAAWnD,oBAAoB,CAACkD,KAAD,CAA/B,CAAhB;EAA0D;EAC/E;;;EACW,IAAPpB,OAAO,GAAG;IAAE,OAAO,KAAKmB,QAAZ;EAAuB;;EAC5B,IAAPnB,OAAO,CAACoB,KAAD,EAAQ;IAAE,KAAKD,QAAL,GAAgBlC,IAAI,CAACoC,KAAL,CAAWnD,oBAAoB,CAACkD,KAAD,CAA/B,CAAhB;EAA0D;EAC/E;AACJ;AACA;AACA;;;EACIE,SAAS,CAACC,QAAD,EAAWH,KAAX,EAAkB;IACvB,KAAKJ,QAAL,CAAcQ,aAAd,CAA4BC,KAA5B,CAAkCF,QAAlC,IAA8CH,KAA9C;EACH;;AAnBa;;AAqBlBL,WAAW,CAACW,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;EAAE,OAAO,KAAKA,CAAC,IAAIb,WAAV,EAAuB3C,MAAM,CAACyD,iBAAP,CAAyBzD,MAAM,CAACb,UAAhC,CAAvB,EAAoEa,MAAM,CAACyD,iBAAP,CAAyBf,aAAzB,EAAwC,CAAxC,CAApE,CAAP;AAAyH,CAA9K;;AACAC,WAAW,CAACe,IAAZ,GAAmB,aAAc1D,MAAM,CAAC2D,iBAAP,CAAyB;EAAEC,IAAI,EAAEjB,WAAR;EAAqBkB,SAAS,EAAE,CAAC,CAAC,eAAD,CAAD,CAAhC;EAAqDC,SAAS,EAAE,CAAC,CAAD,EAAI,eAAJ,CAAhE;EAAsFC,QAAQ,EAAE,CAAhG;EAAmGC,YAAY,EAAE,SAASC,wBAAT,CAAkCC,EAAlC,EAAsCC,GAAtC,EAA2C;IAAE,IAAID,EAAE,GAAG,CAAT,EAAY;MAC5NlE,MAAM,CAACoE,WAAP,CAAmB,SAAnB,EAA8BD,GAAG,CAACxD,OAAlC,EAA2C,SAA3C,EAAsDwD,GAAG,CAACvC,OAA1D;IACH;EAAE,CAFmD;EAEjDyC,MAAM,EAAE;IAAE1D,OAAO,EAAE,SAAX;IAAsBiB,OAAO,EAAE;EAA/B,CAFyC;EAEG0C,QAAQ,EAAE,CAAC,aAAD,CAFb;EAE8BC,kBAAkB,EAAErE,GAFlD;EAEuDsE,KAAK,EAAE,CAF9D;EAEiEC,IAAI,EAAE,CAFvE;EAE0EC,MAAM,EAAE,CAAC,CAAC,CAAD,EAAI,uBAAJ,CAAD,CAFlF;EAEkHC,QAAQ,EAAE,SAASC,oBAAT,CAA8BV,EAA9B,EAAkCC,GAAlC,EAAuC;IAAE,IAAID,EAAE,GAAG,CAAT,EAAY;MACnOlE,MAAM,CAAC6E,eAAP;MACA7E,MAAM,CAAC8E,cAAP,CAAsB,CAAtB,EAAyB,KAAzB,EAAgC,CAAhC;MACA9E,MAAM,CAAC+E,YAAP,CAAoB,CAApB;MACA/E,MAAM,CAACgF,YAAP;IACH;EAAE,CAPmD;EAOjDC,MAAM,EAAE,CAAC5E,GAAD,CAPyC;EAOlC6E,aAAa,EAAE,CAPmB;EAOhBC,eAAe,EAAE;AAPD,CAAzB,CAAjC;;AAQAxC,WAAW,CAACyC,cAAZ,GAA6B,MAAM,CAC/B;EAAExB,IAAI,EAAEzE;AAAR,CAD+B,EAE/B;EAAEyE,IAAI,EAAEyB,SAAR;EAAmBC,UAAU,EAAE,CAAC;IAAE1B,IAAI,EAAExE;EAAR,CAAD,EAAqB;IAAEwE,IAAI,EAAEvE,MAAR;IAAgBkG,IAAI,EAAE,CAAC7C,aAAD;EAAtB,CAArB;AAA/B,CAF+B,CAAnC;;AAIAC,WAAW,CAAC6C,cAAZ,GAA6B;EACzB7E,OAAO,EAAE,CAAC;IAAEiD,IAAI,EAAEtE;EAAR,CAAD,CADgB;EAEzBsC,OAAO,EAAE,CAAC;IAAEgC,IAAI,EAAEtE;EAAR,CAAD;AAFgB,CAA7B;;AAIA,CAAC,YAAY;EAAE,CAAC,OAAO0C,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDhC,MAAM,CAACyF,iBAAP,CAAyB9C,WAAzB,EAAsC,CAAC;IACjGiB,IAAI,EAAE5E,SAD2F;IAEjGuG,IAAI,EAAE,CAAC;MAAEG,QAAQ,EAAE,eAAZ;MAA6BpB,QAAQ,EAAE,aAAvC;MAAsDqB,IAAI,EAAE;QACvD,SAAS,eAD8C;QAEvD;QACA;QACA,kBAAkB,SAJqC;QAKvD,kBAAkB;MALqC,CAA5D;MAMIhB,QAAQ,EAAE,8EANd;MAM8FO,aAAa,EAAEjG,iBAAiB,CAAC2G,IAN/H;MAMqIT,eAAe,EAAEjG,uBAAuB,CAAC2G,MAN9K;MAMsLZ,MAAM,EAAE,CAAC,ivCAAD;IAN9L,CAAD;EAF2F,CAAD,CAAtC,EAS1D,YAAY;IAAE,OAAO,CAAC;MAAErB,IAAI,EAAE5D,MAAM,CAACb;IAAf,CAAD,EAA8B;MAAEyE,IAAI,EAAEyB,SAAR;MAAmBC,UAAU,EAAE,CAAC;QAC3E1B,IAAI,EAAExE;MADqE,CAAD,EAE3E;QACCwE,IAAI,EAAEvE,MADP;QAECkG,IAAI,EAAE,CAAC7C,aAAD;MAFP,CAF2E;IAA/B,CAA9B,CAAP;EAKF,CAd8C,EAc5C;IAAE/B,OAAO,EAAE,CAAC;MACtBiD,IAAI,EAAEtE;IADgB,CAAD,CAAX;IAEVsC,OAAO,EAAE,CAAC;MACVgC,IAAI,EAAEtE;IADI,CAAD;EAFC,CAd4C,CAAnD;AAkBC,CAlBhB;;AAmBA,MAAMwG,eAAN,CAAsB;EAClBvF,WAAW,CAACqC,QAAD,EAAW;IAClB,KAAKA,QAAL,GAAgBA,QAAhB;EACH;;EACDmD,kBAAkB,GAAG;IACjBrG,QAAQ,CAAC,KAAKsG,MAAN,EAAc,KAAKpD,QAAnB,CAAR;EACH;;AANiB;;AAQtBkD,eAAe,CAACxC,IAAhB,GAAuB,SAAS2C,uBAAT,CAAiCzC,CAAjC,EAAoC;EAAE,OAAO,KAAKA,CAAC,IAAIsC,eAAV,EAA2B9F,MAAM,CAACyD,iBAAP,CAAyBzD,MAAM,CAACb,UAAhC,CAA3B,CAAP;AAAiF,CAA9I;;AACA2G,eAAe,CAACpC,IAAhB,GAAuB,aAAc1D,MAAM,CAAC2D,iBAAP,CAAyB;EAAEC,IAAI,EAAEkC,eAAR;EAAyBjC,SAAS,EAAE,CAAC,CAAC,sBAAD,CAAD,EAA2B,CAAC,sBAAD,CAA3B,CAApC;EAA0FqC,cAAc,EAAE,SAASC,8BAAT,CAAwCjC,EAAxC,EAA4CC,GAA5C,EAAiDiC,QAAjD,EAA2D;IAAE,IAAIlC,EAAE,GAAG,CAAT,EAAY;MACzOlE,MAAM,CAACqG,cAAP,CAAsBD,QAAtB,EAAgCzG,OAAhC,EAAyC,CAAzC;IACH;;IAAC,IAAIuE,EAAE,GAAG,CAAT,EAAY;MACV,IAAIoC,EAAJ;;MACAtG,MAAM,CAACuG,cAAP,CAAsBD,EAAE,GAAGtG,MAAM,CAACwG,WAAP,EAA3B,MAAqDrC,GAAG,CAAC6B,MAAJ,GAAaM,EAAlE;IACH;EAAE,CALuD;EAKrD/B,kBAAkB,EAAEnE,GALiC;EAK5BoE,KAAK,EAAE,CALqB;EAKlBC,IAAI,EAAE,CALY;EAKTC,MAAM,EAAE,CAAC,CAAC,CAAD,EAAI,oBAAJ,CAAD,CALC;EAK4BC,QAAQ,EAAE,SAAS8B,wBAAT,CAAkCvC,EAAlC,EAAsCC,GAAtC,EAA2C;IAAE,IAAID,EAAE,GAAG,CAAT,EAAY;MACrJlE,MAAM,CAAC6E,eAAP,CAAuB1E,GAAvB;MACAH,MAAM,CAAC+E,YAAP,CAAoB,CAApB;MACA/E,MAAM,CAAC8E,cAAP,CAAsB,CAAtB,EAAyB,KAAzB,EAAgC,CAAhC;MACA9E,MAAM,CAAC+E,YAAP,CAAoB,CAApB,EAAuB,CAAvB;MACA/E,MAAM,CAACgF,YAAP;MACAhF,MAAM,CAAC+E,YAAP,CAAoB,CAApB,EAAuB,CAAvB;IACH;EAAE,CAZuD;EAYrDG,aAAa,EAAE,CAZsC;EAYnCC,eAAe,EAAE;AAZkB,CAAzB,CAArC;;AAaAW,eAAe,CAACV,cAAhB,GAAiC,MAAM,CACnC;EAAExB,IAAI,EAAEzE;AAAR,CADmC,CAAvC;;AAGA2G,eAAe,CAACN,cAAhB,GAAiC;EAC7BQ,MAAM,EAAE,CAAC;IAAEpC,IAAI,EAAErE,eAAR;IAAyBgG,IAAI,EAAE,CAAC5F,OAAD,EAAU;MAAE+G,WAAW,EAAE;IAAf,CAAV;EAA/B,CAAD;AADqB,CAAjC;;AAGA,CAAC,YAAY;EAAE,CAAC,OAAO1E,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDhC,MAAM,CAACyF,iBAAP,CAAyBK,eAAzB,EAA0C,CAAC;IACrGlC,IAAI,EAAE5E,SAD+F;IAErGuG,IAAI,EAAE,CAAC;MACCG,QAAQ,EAAE,4CADX;MAECf,QAAQ,EAAE,0MAFX;MAGCQ,eAAe,EAAEjG,uBAAuB,CAAC2G,MAH1C;MAICX,aAAa,EAAEjG,iBAAiB,CAAC2G;IAJlC,CAAD;EAF+F,CAAD,CAA1C,EAQ1D,YAAY;IAAE,OAAO,CAAC;MAAEhC,IAAI,EAAE5D,MAAM,CAACb;IAAf,CAAD,CAAP;EAAuC,CARK,EAQH;IAAE6G,MAAM,EAAE,CAAC;MAC9DpC,IAAI,EAAErE,eADwD;MAE9DgG,IAAI,EAAE,CAAC5F,OAAD,EAAU;QAAE+G,WAAW,EAAE;MAAf,CAAV;IAFwD,CAAD;EAAV,CARG,CAAnD;AAWC,CAXhB;AAYA;AACA;AACA;AACA;;;AACA,MAAMC,yBAAN,CAAgC;;AAEhCA,yBAAyB,CAACrD,IAA1B,GAAiC,SAASsD,iCAAT,CAA2CpD,CAA3C,EAA8C;EAAE,OAAO,KAAKA,CAAC,IAAImD,yBAAV,GAAP;AAAgD,CAAjI;;AACAA,yBAAyB,CAACE,IAA1B,GAAiC,aAAc7G,MAAM,CAAC8G,iBAAP,CAAyB;EAAElD,IAAI,EAAE+C,yBAAR;EAAmC9C,SAAS,EAAE,CAAC,CAAC,EAAD,EAAK,iBAAL,EAAwB,EAAxB,CAAD,EAA8B,CAAC,EAAD,EAAK,eAAL,EAAsB,EAAtB,CAA9B,CAA9C;EAAwGC,SAAS,EAAE,CAAC,CAAD,EAAI,iBAAJ;AAAnH,CAAzB,CAA/C;;AACA,CAAC,YAAY;EAAE,CAAC,OAAO9B,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDhC,MAAM,CAACyF,iBAAP,CAAyBkB,yBAAzB,EAAoD,CAAC;IAC/G/C,IAAI,EAAEpE,SADyG;IAE/G+F,IAAI,EAAE,CAAC;MACCG,QAAQ,EAAE,oCADX;MAECC,IAAI,EAAE;QAAE,SAAS;MAAX;IAFP,CAAD;EAFyG,CAAD,CAApD,EAM1D,IAN0D,EAMpD,IANoD,CAAnD;AAMO,CANtB;AAOA;AACA;AACA;AACA;;;AACA,MAAMoB,6BAAN,CAAoC;;AAEpCA,6BAA6B,CAACzD,IAA9B,GAAqC,SAAS0D,qCAAT,CAA+CxD,CAA/C,EAAkD;EAAE,OAAO,KAAKA,CAAC,IAAIuD,6BAAV,GAAP;AAAoD,CAA7I;;AACAA,6BAA6B,CAACF,IAA9B,GAAqC,aAAc7G,MAAM,CAAC8G,iBAAP,CAAyB;EAAElD,IAAI,EAAEmD,6BAAR;EAAuClD,SAAS,EAAE,CAAC,CAAC,sBAAD,CAAD,CAAlD;EAA8EC,SAAS,EAAE,CAAC,CAAD,EAAI,sBAAJ;AAAzF,CAAzB,CAAnD;;AACA,CAAC,YAAY;EAAE,CAAC,OAAO9B,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDhC,MAAM,CAACyF,iBAAP,CAAyBsB,6BAAzB,EAAwD,CAAC;IACnHnD,IAAI,EAAEpE,SAD6G;IAEnH+F,IAAI,EAAE,CAAC;MACCG,QAAQ,EAAE,sBADX;MAECC,IAAI,EAAE;QAAE,SAAS;MAAX;IAFP,CAAD;EAF6G,CAAD,CAAxD,EAM1D,IAN0D,EAMpD,IANoD,CAAnD;AAMO,CANtB;AAOA;AACA;AACA;AACA;;;AACA,MAAMsB,6BAAN,CAAoC;;AAEpCA,6BAA6B,CAAC3D,IAA9B,GAAqC,SAAS4D,qCAAT,CAA+C1D,CAA/C,EAAkD;EAAE,OAAO,KAAKA,CAAC,IAAIyD,6BAAV,GAAP;AAAoD,CAA7I;;AACAA,6BAA6B,CAACJ,IAA9B,GAAqC,aAAc7G,MAAM,CAAC8G,iBAAP,CAAyB;EAAElD,IAAI,EAAEqD,6BAAR;EAAuCpD,SAAS,EAAE,CAAC,CAAC,sBAAD,CAAD,CAAlD;EAA8EC,SAAS,EAAE,CAAC,CAAD,EAAI,sBAAJ;AAAzF,CAAzB,CAAnD;;AACA,CAAC,YAAY;EAAE,CAAC,OAAO9B,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDhC,MAAM,CAACyF,iBAAP,CAAyBwB,6BAAzB,EAAwD,CAAC;IACnHrD,IAAI,EAAEpE,SAD6G;IAEnH+F,IAAI,EAAE,CAAC;MACCG,QAAQ,EAAE,sBADX;MAECC,IAAI,EAAE;QAAE,SAAS;MAAX;IAFP,CAAD;EAF6G,CAAD,CAAxD,EAM1D,IAN0D,EAMpD,IANoD,CAAnD;AAMO,CANtB;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,MAAMwB,mBAAmB,GAAG,+BAA5B;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,UAAN,CAAiB;EACb7G,WAAW,GAAG;IACV,KAAK8G,KAAL,GAAa,CAAb;IACA,KAAKvE,QAAL,GAAgB,CAAhB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIwE,IAAI,CAACC,UAAD,EAAaxG,OAAb,EAAsByG,IAAtB,EAA4BC,SAA5B,EAAuC;IACvC,KAAKC,WAAL,GAAmBC,cAAc,CAACJ,UAAD,CAAjC;IACA,KAAKF,KAAL,GAAatG,OAAO,CAACL,QAArB;IACA,KAAKoC,QAAL,GAAgB/B,OAAO,CAACJ,OAAxB;IACA,KAAKiH,KAAL,GAAaJ,IAAb;IACA,KAAKK,UAAL,GAAkBJ,SAAlB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIK,eAAe,CAACC,WAAD,EAAcC,cAAd,EAA8B;IACzC;IACA;IACA;IACA;IACA;IACA,OAAQ,IAAGD,WAAY,QAAO,KAAKL,WAAY,MAAKM,cAAe,IAAnE;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIC,eAAe,CAACC,QAAD,EAAWC,MAAX,EAAmB;IAC9B;IACA;IACA,OAAOA,MAAM,KAAK,CAAX,GAAe,GAAf,GAAqBC,IAAI,CAAE,IAAGF,QAAS,MAAK,KAAKR,WAAY,OAAMS,MAAO,EAAjD,CAAhC;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIE,WAAW,CAACH,QAAD,EAAWI,IAAX,EAAiB;IACxB,OAAQ,IAAGJ,QAAS,MAAKI,IAAK,QAAOA,IAAI,GAAG,CAAE,MAAK,KAAKZ,WAAY,GAApE;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIa,QAAQ,CAAC/G,IAAD,EAAOf,QAAP,EAAiB+H,QAAjB,EAA2B;IAC/B;IACA,IAAIC,mBAAmB,GAAG,MAAM,KAAKb,KAArC,CAF+B,CAG/B;IACA;;IACA,IAAIc,0BAA0B,GAAG,CAAC,KAAKd,KAAL,GAAa,CAAd,IAAmB,KAAKA,KAAzD;IACA,KAAKe,YAAL,CAAkBnH,IAAlB,EAAwBgH,QAAxB,EAAkCC,mBAAlC,EAAuDC,0BAAvD;IACA,KAAKE,YAAL,CAAkBpH,IAAlB,EAAwBf,QAAxB,EAAkCgI,mBAAlC,EAAuDC,0BAAvD;EACH;EACD;;;EACAC,YAAY,CAACnH,IAAD,EAAOgH,QAAP,EAAiBK,YAAjB,EAA+BC,WAA/B,EAA4C;IACpD;IACA,IAAIC,aAAa,GAAG,KAAKjB,eAAL,CAAqBe,YAArB,EAAmCC,WAAnC,CAApB,CAFoD,CAGpD;IACA;;IACA,IAAIE,IAAI,GAAG,KAAKnB,UAAL,KAAoB,KAApB,GAA4B,OAA5B,GAAsC,MAAjD;;IACArG,IAAI,CAAC0B,SAAL,CAAe8F,IAAf,EAAqB,KAAKf,eAAL,CAAqBc,aAArB,EAAoCP,QAApC,CAArB;;IACAhH,IAAI,CAAC0B,SAAL,CAAe,OAAf,EAAwBkF,IAAI,CAAC,KAAKC,WAAL,CAAiBU,aAAjB,EAAgCvH,IAAI,CAACI,OAArC,CAAD,CAA5B;EACH;EACD;AACJ;AACA;;;EACIqH,aAAa,GAAG;IACZ,OAAQ,GAAE,KAAKvB,WAAY,OAAM,KAAK5E,QAAS,OAA/C;EACH;EACD;AACJ;AACA;AACA;;;EACIoG,WAAW,CAACC,UAAD,EAAa;IACpB,OAAQ,GAAE,KAAKrG,QAAS,MAAK,KAAKuF,WAAL,CAAiBc,UAAjB,EAA6B,CAA7B,CAAgC,EAA7D;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIC,iBAAiB,GAAG;IAAE,OAAO,IAAP;EAAc;;AAnGvB;AAqGjB;AACA;AACA;AACA;AACA;;;AACA,MAAMC,eAAN,SAA8BjC,UAA9B,CAAyC;EACrC7G,WAAW,CAAC+I,cAAD,EAAiB;IACxB;IACA,KAAKA,cAAL,GAAsBA,cAAtB;EACH;;EACDhC,IAAI,CAACC,UAAD,EAAaxG,OAAb,EAAsByG,IAAtB,EAA4BC,SAA5B,EAAuC;IACvC,MAAMH,IAAN,CAAWC,UAAX,EAAuBxG,OAAvB,EAAgCyG,IAAhC,EAAsCC,SAAtC;IACA,KAAK6B,cAAL,GAAsB3B,cAAc,CAAC,KAAK2B,cAAN,CAApC;;IACA,IAAI,CAACnC,mBAAmB,CAACoC,IAApB,CAAyB,KAAKD,cAA9B,CAAD,KACC,OAAOtH,SAAP,KAAqB,WAArB,IAAoCA,SADrC,CAAJ,EACqD;MACjD,MAAMC,KAAK,CAAE,kBAAiB,KAAKqH,cAAe,qBAAvC,CAAX;IACH;EACJ;;EACDV,YAAY,CAACpH,IAAD,EAAOf,QAAP,EAAiB;IACzBe,IAAI,CAAC0B,SAAL,CAAe,KAAf,EAAsB,KAAK+E,eAAL,CAAqB,KAAKqB,cAA1B,EAA0C7I,QAA1C,CAAtB;;IACAe,IAAI,CAAC0B,SAAL,CAAe,QAAf,EAAyBkF,IAAI,CAAC,KAAKC,WAAL,CAAiB,KAAKiB,cAAtB,EAAsC9H,IAAI,CAACb,OAA3C,CAAD,CAA7B;EACH;;EACDyI,iBAAiB,GAAG;IAChB,OAAO,CACH,QADG,EACOhB,IAAI,CAAE,GAAE,KAAKc,WAAL,CAAiB,KAAKI,cAAtB,CAAsC,MAAK,KAAKL,aAAL,EAAqB,EAApE,CADX,CAAP;EAGH;;EACDO,KAAK,CAACC,IAAD,EAAO;IACRA,IAAI,CAACC,aAAL,CAAmB,CAAC,QAAD,EAAW,IAAX,CAAnB;;IACA,IAAID,IAAI,CAACE,MAAT,EAAiB;MACbF,IAAI,CAACE,MAAL,CAAYC,OAAZ,CAAoBpI,IAAI,IAAI;QACxBA,IAAI,CAAC0B,SAAL,CAAe,KAAf,EAAsB,IAAtB;;QACA1B,IAAI,CAAC0B,SAAL,CAAe,QAAf,EAAyB,IAAzB;MACH,CAHD;IAIH;EACJ;;AA9BoC;AAgCzC;AACA;AACA;AACA;AACA;;;AACA,MAAM2G,eAAN,SAA8BzC,UAA9B,CAAyC;EACrC7G,WAAW,CAACyC,KAAD,EAAQ;IACf;;IACA,KAAK8G,WAAL,CAAiB9G,KAAjB;EACH;;EACD4F,YAAY,CAACpH,IAAD,EAAOf,QAAP,EAAiBoI,YAAjB,EAA+BC,WAA/B,EAA4C;IACpD,IAAIiB,oBAAoB,GAAGlB,YAAY,GAAG,KAAKmB,cAA/C;IACA,KAAKC,cAAL,GAAsB,KAAKnC,eAAL,CAAqBiC,oBAArB,EAA2CjB,WAA3C,CAAtB,CAFoD,CAGpD;IACA;IACA;;IACAtH,IAAI,CAAC0B,SAAL,CAAe,WAAf,EAA4B,KAAK+E,eAAL,CAAqB,KAAKgC,cAA1B,EAA0CxJ,QAA1C,CAA5B;;IACAe,IAAI,CAAC0B,SAAL,CAAe,YAAf,EAA6BkF,IAAI,CAAC,KAAKC,WAAL,CAAiB,KAAK4B,cAAtB,EAAsCzI,IAAI,CAACb,OAA3C,CAAD,CAAjC;EACH;;EACDyI,iBAAiB,GAAG;IAChB,OAAO,CACH,eADG,EACchB,IAAI,CAAE,GAAE,KAAKc,WAAL,CAAiB,KAAKe,cAAtB,CAAsC,MAAK,KAAKhB,aAAL,EAAqB,EAApE,CADlB,CAAP;EAGH;;EACDO,KAAK,CAACC,IAAD,EAAO;IACRA,IAAI,CAACC,aAAL,CAAmB,CAAC,eAAD,EAAkB,IAAlB,CAAnB;;IACAD,IAAI,CAACE,MAAL,CAAYC,OAAZ,CAAoBpI,IAAI,IAAI;MACxBA,IAAI,CAAC0B,SAAL,CAAe,WAAf,EAA4B,IAA5B;;MACA1B,IAAI,CAAC0B,SAAL,CAAe,YAAf,EAA6B,IAA7B;IACH,CAHD;EAIH;;EACD4G,WAAW,CAAC9G,KAAD,EAAQ;IACf,MAAMkH,UAAU,GAAGlH,KAAK,CAACmH,KAAN,CAAY,GAAZ,CAAnB;;IACA,IAAID,UAAU,CAAC7I,MAAX,KAAsB,CAAtB,KAA4B,OAAOW,SAAP,KAAqB,WAArB,IAAoCA,SAAhE,CAAJ,EAAgF;MAC5E,MAAMC,KAAK,CAAE,uDAAsDe,KAAM,GAA9D,CAAX;IACH;;IACD,KAAKgH,cAAL,GAAsBI,UAAU,CAACF,UAAU,CAAC,CAAD,CAAX,CAAV,GAA4BE,UAAU,CAACF,UAAU,CAAC,CAAD,CAAX,CAA5D;EACH;;AAhCoC;AAkCzC;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,aAAN,SAA4BjD,UAA5B,CAAuC;EACnCwB,YAAY,CAACpH,IAAD,EAAOf,QAAP,EAAiB;IACzB;IACA,IAAIsJ,oBAAoB,GAAG,MAAM,KAAKjH,QAAtC,CAFyB,CAGzB;;IACA,IAAIwH,mBAAmB,GAAG,CAAC,KAAKjD,KAAL,GAAa,CAAd,IAAmB,KAAKA,KAAlD,CAJyB,CAKzB;;IACA,IAAI4C,cAAc,GAAG,KAAKnC,eAAL,CAAqBiC,oBAArB,EAA2CO,mBAA3C,CAArB;;IACA9I,IAAI,CAAC0B,SAAL,CAAe,KAAf,EAAsB,KAAK+E,eAAL,CAAqBgC,cAArB,EAAqCxJ,QAArC,CAAtB;;IACAe,IAAI,CAAC0B,SAAL,CAAe,QAAf,EAAyBkF,IAAI,CAAC,KAAKC,WAAL,CAAiB4B,cAAjB,EAAiCzI,IAAI,CAACb,OAAtC,CAAD,CAA7B;EACH;;EACD6I,KAAK,CAACC,IAAD,EAAO;IACR,IAAIA,IAAI,CAACE,MAAT,EAAiB;MACbF,IAAI,CAACE,MAAL,CAAYC,OAAZ,CAAoBpI,IAAI,IAAI;QACxBA,IAAI,CAAC0B,SAAL,CAAe,KAAf,EAAsB,IAAtB;;QACA1B,IAAI,CAAC0B,SAAL,CAAe,QAAf,EAAyB,IAAzB;MACH,CAHD;IAIH;EACJ;;AAlBkC;AAoBvC;;;AACA,SAASkF,IAAT,CAAcmC,GAAd,EAAmB;EACf,OAAQ,QAAOA,GAAI,GAAnB;AACH;AACD;;;AACA,SAAS5C,cAAT,CAAwB3E,KAAxB,EAA+B;EAC3B,OAAOA,KAAK,CAACwH,KAAN,CAAY,eAAZ,IAA+BxH,KAA/B,GAAwC,GAAEA,KAAM,IAAvD;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMyH,YAAY,GAAG,KAArB;;AACA,MAAMC,WAAN,CAAkB;EACdnK,WAAW,CAACqC,QAAD,EAAW+H,IAAX,EAAiB;IACxB,KAAK/H,QAAL,GAAgBA,QAAhB;IACA,KAAK+H,IAAL,GAAYA,IAAZ;IACA;;IACA,KAAKC,OAAL,GAAe,KAAf;EACH;EACD;;;EACQ,IAAJpD,IAAI,GAAG;IAAE,OAAO,KAAKI,KAAZ;EAAoB;;EACzB,IAAJJ,IAAI,CAACxE,KAAD,EAAQ;IACZ,KAAK4E,KAAL,GAAa/G,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACoC,KAAL,CAAWnD,oBAAoB,CAACkD,KAAD,CAA/B,CAAZ,CAAb;EACH;EACD;;;EACc,IAAVuE,UAAU,GAAG;IAAE,OAAO,KAAKqD,OAAZ;EAAsB;;EAC3B,IAAVrD,UAAU,CAACvE,KAAD,EAAQ;IAAE,KAAK4H,OAAL,GAAgB,GAAE5H,KAAK,IAAI,IAAT,GAAgB,EAAhB,GAAqBA,KAAM,EAA7C;EAAiD;EACzE;;;EACa,IAAT6H,SAAS,GAAG;IAAE,OAAO,KAAKC,UAAZ;EAAyB;;EAC9B,IAATD,SAAS,CAAC7H,KAAD,EAAQ;IACjB,MAAM+H,QAAQ,GAAI,GAAE/H,KAAK,IAAI,IAAT,GAAgB,EAAhB,GAAqBA,KAAM,EAA/C;;IACA,IAAI+H,QAAQ,KAAK,KAAKD,UAAtB,EAAkC;MAC9B,KAAKA,UAAL,GAAkBC,QAAlB;;MACA,KAAKC,cAAL,CAAoB,KAAKF,UAAzB;IACH;EACJ;;EACDG,QAAQ,GAAG;IACP,KAAKC,UAAL;;IACA,KAAKC,eAAL;EACH;EACD;AACJ;AACA;AACA;;;EACIC,qBAAqB,GAAG;IACpB,KAAKC,YAAL;EACH;EACD;;;EACAH,UAAU,GAAG;IACT,IAAI,CAAC,KAAK1D,IAAN,KAAe,OAAOxF,SAAP,KAAqB,WAArB,IAAoCA,SAAnD,CAAJ,EAAmE;MAC/D,MAAMC,KAAK,CAAE,iDAAD,GACP,mCADM,CAAX;IAEH;EACJ;EACD;;;EACAkJ,eAAe,GAAG;IACd,IAAI,CAAC,KAAKL,UAAV,EAAsB;MAClB,KAAKE,cAAL,CAAoB,KAApB;IACH;EACJ;EACD;;;EACAA,cAAc,CAACH,SAAD,EAAY;IACtB,IAAI,KAAKS,WAAT,EAAsB;MAClB,KAAKA,WAAL,CAAiB9B,KAAjB,CAAuB,IAAvB;IACH;;IACD,IAAIqB,SAAS,KAAKJ,YAAlB,EAAgC;MAC5B,KAAKa,WAAL,GAAmB,IAAIjB,aAAJ,EAAnB;IACH,CAFD,MAGK,IAAIQ,SAAS,IAAIA,SAAS,CAACzI,OAAV,CAAkB,GAAlB,IAAyB,CAAC,CAA3C,EAA8C;MAC/C,KAAKkJ,WAAL,GAAmB,IAAIzB,eAAJ,CAAoBgB,SAApB,CAAnB;IACH,CAFI,MAGA;MACD,KAAKS,WAAL,GAAmB,IAAIjC,eAAJ,CAAoBwB,SAApB,CAAnB;IACH;EACJ;EACD;;;EACAQ,YAAY,GAAG;IACX,IAAI,CAAC,KAAKE,gBAAV,EAA4B;MACxB,KAAKA,gBAAL,GAAwB,IAAIjL,eAAJ,EAAxB;IACH;;IACD,MAAMS,OAAO,GAAG,KAAKwK,gBAArB;;IACA,MAAMrK,KAAK,GAAG,KAAKyI,MAAL,CAAY6B,MAAZ,CAAmBhK,IAAI,IAAI,CAACA,IAAI,CAACqB,SAAN,IAAmBrB,IAAI,CAACqB,SAAL,KAAmB,IAAjE,CAAd;;IACA,MAAM4E,SAAS,GAAG,KAAKkD,IAAL,GAAY,KAAKA,IAAL,CAAU3H,KAAtB,GAA8B,KAAhD;;IACA,KAAKuI,gBAAL,CAAsBvK,MAAtB,CAA6B,KAAKwG,IAAlC,EAAwCtG,KAAxC;;IACA,KAAKoK,WAAL,CAAiBhE,IAAjB,CAAsB,KAAKC,UAA3B,EAAuCxG,OAAvC,EAAgD,KAAKyG,IAArD,EAA2DC,SAA3D;;IACAvG,KAAK,CAAC0I,OAAN,CAAc,CAACpI,IAAD,EAAOiK,KAAP,KAAiB;MAC3B,MAAMC,GAAG,GAAG3K,OAAO,CAACO,SAAR,CAAkBmK,KAAlB,CAAZ;;MACA,KAAKH,WAAL,CAAiB/C,QAAjB,CAA0B/G,IAA1B,EAAgCkK,GAAG,CAAClJ,GAApC,EAAyCkJ,GAAG,CAACjJ,GAA7C;IACH,CAHD;;IAIA,KAAKiH,aAAL,CAAmB,KAAK4B,WAAL,CAAiBlC,iBAAjB,EAAnB;EACH;EACD;;;EACAM,aAAa,CAACrG,KAAD,EAAQ;IACjB,IAAIA,KAAJ,EAAW;MACP,KAAKT,QAAL,CAAcQ,aAAd,CAA4BC,KAA5B,CAAkCA,KAAK,CAAC,CAAD,CAAvC,IAA8CA,KAAK,CAAC,CAAD,CAAnD;IACH;EACJ;;AApFa;;AAsFlBqH,WAAW,CAACpH,IAAZ,GAAmB,SAASqI,mBAAT,CAA6BnI,CAA7B,EAAgC;EAAE,OAAO,KAAKA,CAAC,IAAIkH,WAAV,EAAuB1K,MAAM,CAACyD,iBAAP,CAAyBzD,MAAM,CAACb,UAAhC,CAAvB,EAAoEa,MAAM,CAACyD,iBAAP,CAAyBxD,MAAM,CAACF,cAAhC,EAAgD,CAAhD,CAApE,CAAP;AAAiI,CAAtL;;AACA2K,WAAW,CAAChH,IAAZ,GAAmB,aAAc1D,MAAM,CAAC2D,iBAAP,CAAyB;EAAEC,IAAI,EAAE8G,WAAR;EAAqB7G,SAAS,EAAE,CAAC,CAAC,eAAD,CAAD,CAAhC;EAAqDqC,cAAc,EAAE,SAAS0F,0BAAT,CAAoC1H,EAApC,EAAwCC,GAAxC,EAA6CiC,QAA7C,EAAuD;IAAE,IAAIlC,EAAE,GAAG,CAAT,EAAY;MAC5LlE,MAAM,CAACqG,cAAP,CAAsBD,QAAtB,EAAgCzD,WAAhC,EAA6C,CAA7C;IACH;;IAAC,IAAIuB,EAAE,GAAG,CAAT,EAAY;MACV,IAAIoC,EAAJ;;MACAtG,MAAM,CAACuG,cAAP,CAAsBD,EAAE,GAAGtG,MAAM,CAACwG,WAAP,EAA3B,MAAqDrC,GAAG,CAACwF,MAAJ,GAAarD,EAAlE;IACH;EAAE,CALmD;EAKjDxC,SAAS,EAAE,CAAC,CAAD,EAAI,eAAJ,CALsC;EAKhBC,QAAQ,EAAE,CALM;EAKHC,YAAY,EAAE,SAAS6H,wBAAT,CAAkC3H,EAAlC,EAAsCC,GAAtC,EAA2C;IAAE,IAAID,EAAE,GAAG,CAAT,EAAY;MACtHlE,MAAM,CAACoE,WAAP,CAAmB,MAAnB,EAA2BD,GAAG,CAACqD,IAA/B;IACH;EAAE,CAPmD;EAOjDnD,MAAM,EAAE;IAAEmD,IAAI,EAAE,MAAR;IAAgBD,UAAU,EAAE,YAA5B;IAA0CsD,SAAS,EAAE;EAArD,CAPyC;EAO2BvG,QAAQ,EAAE,CAAC,aAAD,CAPrC;EAOsDwH,QAAQ,EAAE,CAAC9L,MAAM,CAAC+L,kBAAP,CAA0B,CAAC;IACtIC,OAAO,EAAEtJ,aAD6H;IAEtIuJ,WAAW,EAAEvB;EAFyH,CAAD,CAA1B,CAAD,CAPhE;EAUxCnG,kBAAkB,EAAErE,GAVoB;EAUfsE,KAAK,EAAE,CAVQ;EAULC,IAAI,EAAE,CAVD;EAUIE,QAAQ,EAAE,SAASuH,oBAAT,CAA8BhI,EAA9B,EAAkCC,GAAlC,EAAuC;IAAE,IAAID,EAAE,GAAG,CAAT,EAAY;MACrHlE,MAAM,CAAC6E,eAAP;MACA7E,MAAM,CAAC8E,cAAP,CAAsB,CAAtB,EAAyB,KAAzB;MACA9E,MAAM,CAAC+E,YAAP,CAAoB,CAApB;MACA/E,MAAM,CAACgF,YAAP;IACH;EAAE,CAfmD;EAejDC,MAAM,EAAE,CAAC5E,GAAD,CAfyC;EAelC6E,aAAa,EAAE,CAfmB;EAehBC,eAAe,EAAE;AAfD,CAAzB,CAAjC;;AAgBAuF,WAAW,CAACtF,cAAZ,GAA6B,MAAM,CAC/B;EAAExB,IAAI,EAAEzE;AAAR,CAD+B,EAE/B;EAAEyE,IAAI,EAAE7D,cAAR;EAAwBuF,UAAU,EAAE,CAAC;IAAE1B,IAAI,EAAExE;EAAR,CAAD;AAApC,CAF+B,CAAnC;;AAIAsL,WAAW,CAAClF,cAAZ,GAA6B;EACzBmE,MAAM,EAAE,CAAC;IAAE/F,IAAI,EAAErE,eAAR;IAAyBgG,IAAI,EAAE,CAAC5C,WAAD,EAAc;MAAE+D,WAAW,EAAE;IAAf,CAAd;EAA/B,CAAD,CADiB;EAEzBc,IAAI,EAAE,CAAC;IAAE5D,IAAI,EAAEtE;EAAR,CAAD,CAFmB;EAGzBiI,UAAU,EAAE,CAAC;IAAE3D,IAAI,EAAEtE;EAAR,CAAD,CAHa;EAIzBuL,SAAS,EAAE,CAAC;IAAEjH,IAAI,EAAEtE;EAAR,CAAD;AAJc,CAA7B;;AAMA,CAAC,YAAY;EAAE,CAAC,OAAO0C,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDhC,MAAM,CAACyF,iBAAP,CAAyBiF,WAAzB,EAAsC,CAAC;IACjG9G,IAAI,EAAE5E,SAD2F;IAEjGuG,IAAI,EAAE,CAAC;MAAEG,QAAQ,EAAE,eAAZ;MAA6BpB,QAAQ,EAAE,aAAvC;MAAsDK,QAAQ,EAAE,4CAAhE;MAA8GgB,IAAI,EAAE;QAC/G,SAAS,eADsG;QAE/G;QACA;QACA,eAAe;MAJgG,CAApH;MAKIwG,SAAS,EAAE,CAAC;QACPH,OAAO,EAAEtJ,aADF;QAEPuJ,WAAW,EAAEvB;MAFN,CAAD,CALf;MAQSvF,eAAe,EAAEjG,uBAAuB,CAAC2G,MARlD;MAQ0DX,aAAa,EAAEjG,iBAAiB,CAAC2G,IAR3F;MAQiGX,MAAM,EAAE,CAAC,ivCAAD;IARzG,CAAD;EAF2F,CAAD,CAAtC,EAW1D,YAAY;IAAE,OAAO,CAAC;MAAErB,IAAI,EAAE5D,MAAM,CAACb;IAAf,CAAD,EAA8B;MAAEyE,IAAI,EAAE3D,MAAM,CAACF,cAAf;MAA+BuF,UAAU,EAAE,CAAC;QACvF1B,IAAI,EAAExE;MADiF,CAAD;IAA3C,CAA9B,CAAP;EAEF,CAb8C,EAa5C;IAAEoI,IAAI,EAAE,CAAC;MACnB5D,IAAI,EAAEtE;IADa,CAAD,CAAR;IAEViI,UAAU,EAAE,CAAC;MACb3D,IAAI,EAAEtE;IADO,CAAD,CAFF;IAIVuL,SAAS,EAAE,CAAC;MACZjH,IAAI,EAAEtE;IADM,CAAD,CAJD;IAMVqK,MAAM,EAAE,CAAC;MACT/F,IAAI,EAAErE,eADG;MAETgG,IAAI,EAAE,CAAC5C,WAAD,EAAc;QAAE+D,WAAW,EAAE;MAAf,CAAd;IAFG,CAAD;EANE,CAb4C,CAAnD;AAsBC,CAtBhB;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAM0F,iBAAN,CAAwB;;AAExBA,iBAAiB,CAAC9I,IAAlB,GAAyB,SAAS+I,yBAAT,CAAmC7I,CAAnC,EAAsC;EAAE,OAAO,KAAKA,CAAC,IAAI4I,iBAAV,GAAP;AAAwC,CAAzG;;AACAA,iBAAiB,CAACE,IAAlB,GAAyB,aAActM,MAAM,CAACuM,gBAAP,CAAwB;EAAE3I,IAAI,EAAEwI;AAAR,CAAxB,CAAvC;AACAA,iBAAiB,CAACI,IAAlB,GAAyB,aAAcxM,MAAM,CAACyM,gBAAP,CAAwB;EAAEC,OAAO,EAAE,CAAC9M,aAAD,EAAgBC,eAAhB,EAAiCD,aAAjC,EAClEC,eADkE;AAAX,CAAxB,CAAvC;;AAEA,CAAC,YAAY;EAAE,CAAC,OAAOmC,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDhC,MAAM,CAACyF,iBAAP,CAAyB2G,iBAAzB,EAA4C,CAAC;IACvGxI,IAAI,EAAEnE,QADiG;IAEvG8F,IAAI,EAAE,CAAC;MACCmH,OAAO,EAAE,CAAC9M,aAAD,EAAgBC,eAAhB,CADV;MAEC8M,OAAO,EAAE,CACLjC,WADK,EAEL/H,WAFK,EAGLmD,eAHK,EAILlG,aAJK,EAKLC,eALK,EAMLkH,6BANK,EAOLE,6BAPK,EAQLN,yBARK,CAFV;MAYCiG,YAAY,EAAE,CACVlC,WADU,EAEV/H,WAFU,EAGVmD,eAHU,EAIViB,6BAJU,EAKVE,6BALU,EAMVN,yBANU;IAZf,CAAD;EAFiG,CAAD,CAA5C,EAuB1D,IAvB0D,EAuBpD,IAvBoD,CAAnD;AAuBO,CAvBtB;;AAwBA,CAAC,YAAY;EAAE,CAAC,OAAOkG,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD7M,MAAM,CAAC8M,kBAAP,CAA0BV,iBAA1B,EAA6C;IAAEQ,YAAY,EAAE,YAAY;MAAE,OAAO,CAAClC,WAAD,EAAc/H,WAAd,EAA2BmD,eAA3B,EAA4CiB,6BAA5C,EAA2EE,6BAA3E,EAA0GN,yBAA1G,CAAP;IAA8I,CAA5K;IAA8K+F,OAAO,EAAE,YAAY;MAAE,OAAO,CAAC9M,aAAD,EAAgBC,eAAhB,CAAP;IAA0C,CAA/O;IAAiP8M,OAAO,EAAE,YAAY;MAAE,OAAO,CAACjC,WAAD,EAAc/H,WAAd,EAA2BmD,eAA3B,EAA4ClG,aAA5C,EACtXC,eADsX,EACrWkH,6BADqW,EACtUE,6BADsU,EACvSN,yBADuS,CAAP;IACnQ;EADL,CAA7C,CAAnD;AAC2G,CAD1H;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMoG,gBAAgB,GAAGzM,eAAzB;AAEA;AACA;AACA;;AAEA,SAASqG,yBAAT,EAAoC+D,WAApC,EAAiD0B,iBAAjD,EAAoEzJ,WAApE,EAAiFsE,6BAAjF,EAAgHF,6BAAhH,EAA+IjB,eAA/I,EAAgKiH,gBAAhK,EAAkLrK,aAAa,IAAIsK,oDAAnM"},"metadata":{},"sourceType":"module"}