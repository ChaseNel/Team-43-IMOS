{"ast":null,"code":"import * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, QueryList, NgZone, Directive, ElementRef, Input, InjectionToken, Optional, EventEmitter, Output, NgModule } from '@angular/core';\nimport { Subject, Subscription, BehaviorSubject, of } from 'rxjs';\nimport { hasModifierKey, A, Z, ZERO, NINE, END, HOME, LEFT_ARROW, RIGHT_ARROW, UP_ARROW, DOWN_ARROW, TAB, ALT, CONTROL, MAC_META, META, SHIFT } from '@angular/cdk/keycodes';\nimport { tap, debounceTime, filter, map, take, skip, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceElement } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { Platform, _getFocusedElementPierceShadowDom, normalizePassiveListenerOptions, _getEventTarget, _getShadowRoot, PlatformModule } from '@angular/cdk/platform';\nimport { ContentObserver, ObserversModule } from '@angular/cdk/observers';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** IDs are delimited by an empty space, as per the spec. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/observers';\nconst ID_DELIMITER = ' ';\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\n\nfunction addAriaReferencedId(el, attr, id) {\n  const ids = getAriaReferenceIds(el, attr);\n\n  if (ids.some(existingId => existingId.trim() == id.trim())) {\n    return;\n  }\n\n  ids.push(id.trim());\n  el.setAttribute(attr, ids.join(ID_DELIMITER));\n}\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\n\n\nfunction removeAriaReferencedId(el, attr, id) {\n  const ids = getAriaReferenceIds(el, attr);\n  const filteredIds = ids.filter(val => val != id.trim());\n\n  if (filteredIds.length) {\n    el.setAttribute(attr, filteredIds.join(ID_DELIMITER));\n  } else {\n    el.removeAttribute(attr);\n  }\n}\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\n\n\nfunction getAriaReferenceIds(el, attr) {\n  // Get string array of all individual ids (whitespace delimited) in the attribute value\n  return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** ID used for the body container where all messages are appended. */\n\n\nconst MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/** ID prefix used for each created message element. */\n\nconst CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/** Attribute given to each host element that is described by a message element. */\n\nconst CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/** Global incremental identifier for each registered message element. */\n\nlet nextId = 0;\n/** Global map of all registered message elements that have been placed into the document. */\n\nconst messageRegistry = new Map();\n/** Container for all registered messages. */\n\nlet messagesContainer = null;\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n */\n\nclass AriaDescriber {\n  constructor(_document) {\n    this._document = _document;\n  }\n\n  describe(hostElement, message, role) {\n    if (!this._canBeDescribed(hostElement, message)) {\n      return;\n    }\n\n    const key = getKey(message, role);\n\n    if (typeof message !== 'string') {\n      // We need to ensure that the element has an ID.\n      setMessageId(message);\n      messageRegistry.set(key, {\n        messageElement: message,\n        referenceCount: 0\n      });\n    } else if (!messageRegistry.has(key)) {\n      this._createMessageElement(message, role);\n    }\n\n    if (!this._isElementDescribedByMessage(hostElement, key)) {\n      this._addMessageReference(hostElement, key);\n    }\n  }\n\n  removeDescription(hostElement, message, role) {\n    if (!message || !this._isElementNode(hostElement)) {\n      return;\n    }\n\n    const key = getKey(message, role);\n\n    if (this._isElementDescribedByMessage(hostElement, key)) {\n      this._removeMessageReference(hostElement, key);\n    } // If the message is a string, it means that it's one that we created for the\n    // consumer so we can remove it safely, otherwise we should leave it in place.\n\n\n    if (typeof message === 'string') {\n      const registeredMessage = messageRegistry.get(key);\n\n      if (registeredMessage && registeredMessage.referenceCount === 0) {\n        this._deleteMessageElement(key);\n      }\n    }\n\n    if (messagesContainer && messagesContainer.childNodes.length === 0) {\n      this._deleteMessagesContainer();\n    }\n  }\n  /** Unregisters all created message elements and removes the message container. */\n\n\n  ngOnDestroy() {\n    const describedElements = this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}]`);\n\n    for (let i = 0; i < describedElements.length; i++) {\n      this._removeCdkDescribedByReferenceIds(describedElements[i]);\n\n      describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n\n    if (messagesContainer) {\n      this._deleteMessagesContainer();\n    }\n\n    messageRegistry.clear();\n  }\n  /**\n   * Creates a new element in the visually hidden message container element with the message\n   * as its content and adds it to the message registry.\n   */\n\n\n  _createMessageElement(message, role) {\n    const messageElement = this._document.createElement('div');\n\n    setMessageId(messageElement);\n    messageElement.textContent = message;\n\n    if (role) {\n      messageElement.setAttribute('role', role);\n    }\n\n    this._createMessagesContainer();\n\n    messagesContainer.appendChild(messageElement);\n    messageRegistry.set(getKey(message, role), {\n      messageElement,\n      referenceCount: 0\n    });\n  }\n  /** Deletes the message element from the global messages container. */\n\n\n  _deleteMessageElement(key) {\n    const registeredMessage = messageRegistry.get(key);\n    const messageElement = registeredMessage && registeredMessage.messageElement;\n\n    if (messagesContainer && messageElement) {\n      messagesContainer.removeChild(messageElement);\n    }\n\n    messageRegistry.delete(key);\n  }\n  /** Creates the global container for all aria-describedby messages. */\n\n\n  _createMessagesContainer() {\n    if (!messagesContainer) {\n      const preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID); // When going from the server to the client, we may end up in a situation where there's\n      // already a container on the page, but we don't have a reference to it. Clear the\n      // old container so we don't get duplicates. Doing this, instead of emptying the previous\n      // container, should be slightly faster.\n\n\n      if (preExistingContainer && preExistingContainer.parentNode) {\n        preExistingContainer.parentNode.removeChild(preExistingContainer);\n      }\n\n      messagesContainer = this._document.createElement('div');\n      messagesContainer.id = MESSAGES_CONTAINER_ID; // We add `visibility: hidden` in order to prevent text in this container from\n      // being searchable by the browser's Ctrl + F functionality.\n      // Screen-readers will still read the description for elements with aria-describedby even\n      // when the description element is not visible.\n\n      messagesContainer.style.visibility = 'hidden'; // Even though we use `visibility: hidden`, we still apply `cdk-visually-hidden` so that\n      // the description element doesn't impact page layout.\n\n      messagesContainer.classList.add('cdk-visually-hidden');\n\n      this._document.body.appendChild(messagesContainer);\n    }\n  }\n  /** Deletes the global messages container. */\n\n\n  _deleteMessagesContainer() {\n    if (messagesContainer && messagesContainer.parentNode) {\n      messagesContainer.parentNode.removeChild(messagesContainer);\n      messagesContainer = null;\n    }\n  }\n  /** Removes all cdk-describedby messages that are hosted through the element. */\n\n\n  _removeCdkDescribedByReferenceIds(element) {\n    // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n    const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\n    element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n  }\n  /**\n   * Adds a message reference to the element using aria-describedby and increments the registered\n   * message's reference count.\n   */\n\n\n  _addMessageReference(element, key) {\n    const registeredMessage = messageRegistry.get(key); // Add the aria-describedby reference and set the\n    // describedby_host attribute to mark the element.\n\n    addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n    registeredMessage.referenceCount++;\n  }\n  /**\n   * Removes a message reference from the element using aria-describedby\n   * and decrements the registered message's reference count.\n   */\n\n\n  _removeMessageReference(element, key) {\n    const registeredMessage = messageRegistry.get(key);\n    registeredMessage.referenceCount--;\n    removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n  }\n  /** Returns true if the element has been described by the provided message ID. */\n\n\n  _isElementDescribedByMessage(element, key) {\n    const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n    const registeredMessage = messageRegistry.get(key);\n    const messageId = registeredMessage && registeredMessage.messageElement.id;\n    return !!messageId && referenceIds.indexOf(messageId) != -1;\n  }\n  /** Determines whether a message can be described on a particular element. */\n\n\n  _canBeDescribed(element, message) {\n    if (!this._isElementNode(element)) {\n      return false;\n    }\n\n    if (message && typeof message === 'object') {\n      // We'd have to make some assumptions about the description element's text, if the consumer\n      // passed in an element. Assume that if an element is passed in, the consumer has verified\n      // that it can be used as a description.\n      return true;\n    }\n\n    const trimmedMessage = message == null ? '' : `${message}`.trim();\n    const ariaLabel = element.getAttribute('aria-label'); // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\n    // element, because screen readers will end up reading out the same text twice in a row.\n\n    return trimmedMessage ? !ariaLabel || ariaLabel.trim() !== trimmedMessage : false;\n  }\n  /** Checks whether a node is an Element node. */\n\n\n  _isElementNode(element) {\n    return element.nodeType === this._document.ELEMENT_NODE;\n  }\n\n}\n\nAriaDescriber.ɵfac = function AriaDescriber_Factory(t) {\n  return new (t || AriaDescriber)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nAriaDescriber.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function AriaDescriber_Factory() {\n    return new AriaDescriber(i0.ɵɵinject(i2.DOCUMENT));\n  },\n  token: AriaDescriber,\n  providedIn: \"root\"\n});\n\nAriaDescriber.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AriaDescriber, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/** Gets a key that can be used to look messages up in the registry. */\n\n\nfunction getKey(message, role) {\n  return typeof message === 'string' ? `${role || ''}/${message}` : message;\n}\n/** Assigns a unique ID to an element, if it doesn't have one already. */\n\n\nfunction setMessageId(element) {\n  if (!element.id) {\n    element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`;\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\n\n\nclass ListKeyManager {\n  constructor(_items) {\n    this._items = _items;\n    this._activeItemIndex = -1;\n    this._activeItem = null;\n    this._wrap = false;\n    this._letterKeyStream = new Subject();\n    this._typeaheadSubscription = Subscription.EMPTY;\n    this._vertical = true;\n    this._allowedModifierKeys = [];\n    this._homeAndEnd = false;\n    /**\n     * Predicate function that can be used to check whether an item should be skipped\n     * by the key manager. By default, disabled items are skipped.\n     */\n\n    this._skipPredicateFn = item => item.disabled; // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n\n\n    this._pressedLetters = [];\n    /**\n     * Stream that emits any time the TAB key is pressed, so components can react\n     * when focus is shifted off of the list.\n     */\n\n    this.tabOut = new Subject();\n    /** Stream that emits whenever the active item of the list manager changes. */\n\n    this.change = new Subject(); // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n\n    if (_items instanceof QueryList) {\n      _items.changes.subscribe(newItems => {\n        if (this._activeItem) {\n          const itemArray = newItems.toArray();\n          const newIndex = itemArray.indexOf(this._activeItem);\n\n          if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n            this._activeItemIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n  /**\n   * Sets the predicate function that determines which items should be skipped by the\n   * list key manager.\n   * @param predicate Function that determines whether the given item should be skipped.\n   */\n\n\n  skipPredicate(predicate) {\n    this._skipPredicateFn = predicate;\n    return this;\n  }\n  /**\n   * Configures wrapping mode, which determines whether the active item will wrap to\n   * the other end of list when there are no more items in the given direction.\n   * @param shouldWrap Whether the list should wrap when reaching the end.\n   */\n\n\n  withWrap(shouldWrap = true) {\n    this._wrap = shouldWrap;\n    return this;\n  }\n  /**\n   * Configures whether the key manager should be able to move the selection vertically.\n   * @param enabled Whether vertical selection should be enabled.\n   */\n\n\n  withVerticalOrientation(enabled = true) {\n    this._vertical = enabled;\n    return this;\n  }\n  /**\n   * Configures the key manager to move the selection horizontally.\n   * Passing in `null` will disable horizontal movement.\n   * @param direction Direction in which the selection can be moved.\n   */\n\n\n  withHorizontalOrientation(direction) {\n    this._horizontal = direction;\n    return this;\n  }\n  /**\n   * Modifier keys which are allowed to be held down and whose default actions will be prevented\n   * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n   */\n\n\n  withAllowedModifierKeys(keys) {\n    this._allowedModifierKeys = keys;\n    return this;\n  }\n  /**\n   * Turns on typeahead mode which allows users to set the active item by typing.\n   * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n   */\n\n\n  withTypeAhead(debounceInterval = 200) {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && this._items.length && this._items.some(item => typeof item.getLabel !== 'function')) {\n      throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n    }\n\n    this._typeaheadSubscription.unsubscribe(); // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n    // and convert those letters back into a string. Afterwards find the first item that starts\n    // with that string and select it.\n\n\n    this._typeaheadSubscription = this._letterKeyStream.pipe(tap(letter => this._pressedLetters.push(letter)), debounceTime(debounceInterval), filter(() => this._pressedLetters.length > 0), map(() => this._pressedLetters.join(''))).subscribe(inputString => {\n      const items = this._getItemsArray(); // Start at 1 because we want to start searching at the item immediately\n      // following the current active item.\n\n\n      for (let i = 1; i < items.length + 1; i++) {\n        const index = (this._activeItemIndex + i) % items.length;\n        const item = items[index];\n\n        if (!this._skipPredicateFn(item) && item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {\n          this.setActiveItem(index);\n          break;\n        }\n      }\n\n      this._pressedLetters = [];\n    });\n    return this;\n  }\n  /**\n   * Configures the key manager to activate the first and last items\n   * respectively when the Home or End key is pressed.\n   * @param enabled Whether pressing the Home or End key activates the first/last item.\n   */\n\n\n  withHomeAndEnd(enabled = true) {\n    this._homeAndEnd = enabled;\n    return this;\n  }\n\n  setActiveItem(item) {\n    const previousActiveItem = this._activeItem;\n    this.updateActiveItem(item);\n\n    if (this._activeItem !== previousActiveItem) {\n      this.change.next(this._activeItemIndex);\n    }\n  }\n  /**\n   * Sets the active item depending on the key event passed in.\n   * @param event Keyboard event to be used for determining which element should be active.\n   */\n\n\n  onKeydown(event) {\n    const keyCode = event.keyCode;\n    const modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n    const isModifierAllowed = modifiers.every(modifier => {\n      return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n    });\n\n    switch (keyCode) {\n      case TAB:\n        this.tabOut.next();\n        return;\n\n      case DOWN_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case UP_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case RIGHT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case LEFT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case HOME:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setFirstItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case END:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setLastItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      default:\n        if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n          // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n          // otherwise fall back to resolving alphanumeric characters via the keyCode.\n          if (event.key && event.key.length === 1) {\n            this._letterKeyStream.next(event.key.toLocaleUpperCase());\n          } else if (keyCode >= A && keyCode <= Z || keyCode >= ZERO && keyCode <= NINE) {\n            this._letterKeyStream.next(String.fromCharCode(keyCode));\n          }\n        } // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n\n\n        return;\n    }\n\n    this._pressedLetters = [];\n    event.preventDefault();\n  }\n  /** Index of the currently active item. */\n\n\n  get activeItemIndex() {\n    return this._activeItemIndex;\n  }\n  /** The active item. */\n\n\n  get activeItem() {\n    return this._activeItem;\n  }\n  /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n\n\n  isTyping() {\n    return this._pressedLetters.length > 0;\n  }\n  /** Sets the active item to the first enabled item in the list. */\n\n\n  setFirstItemActive() {\n    this._setActiveItemByIndex(0, 1);\n  }\n  /** Sets the active item to the last enabled item in the list. */\n\n\n  setLastItemActive() {\n    this._setActiveItemByIndex(this._items.length - 1, -1);\n  }\n  /** Sets the active item to the next enabled item in the list. */\n\n\n  setNextItemActive() {\n    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n  /** Sets the active item to a previous enabled item in the list. */\n\n\n  setPreviousItemActive() {\n    this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive() : this._setActiveItemByDelta(-1);\n  }\n\n  updateActiveItem(item) {\n    const itemArray = this._getItemsArray();\n\n    const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n    const activeItem = itemArray[index]; // Explicitly check for `null` and `undefined` because other falsy values are valid.\n\n    this._activeItem = activeItem == null ? null : activeItem;\n    this._activeItemIndex = index;\n  }\n  /**\n   * This method sets the active item, given a list of items and the delta between the\n   * currently active item and the new active item. It will calculate differently\n   * depending on whether wrap mode is turned on.\n   */\n\n\n  _setActiveItemByDelta(delta) {\n    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n  }\n  /**\n   * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n   * down the list until it finds an item that is not disabled, and it will wrap if it\n   * encounters either end of the list.\n   */\n\n\n  _setActiveInWrapMode(delta) {\n    const items = this._getItemsArray();\n\n    for (let i = 1; i <= items.length; i++) {\n      const index = (this._activeItemIndex + delta * i + items.length) % items.length;\n      const item = items[index];\n\n      if (!this._skipPredicateFn(item)) {\n        this.setActiveItem(index);\n        return;\n      }\n    }\n  }\n  /**\n   * Sets the active item properly given the default mode. In other words, it will\n   * continue to move down the list until it finds an item that is not disabled. If\n   * it encounters either end of the list, it will stop and not wrap.\n   */\n\n\n  _setActiveInDefaultMode(delta) {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n  }\n  /**\n   * Sets the active item to the first enabled item starting at the index specified. If the\n   * item is disabled, it will move in the fallbackDelta direction until it either\n   * finds an enabled item or encounters the end of the list.\n   */\n\n\n  _setActiveItemByIndex(index, fallbackDelta) {\n    const items = this._getItemsArray();\n\n    if (!items[index]) {\n      return;\n    }\n\n    while (this._skipPredicateFn(items[index])) {\n      index += fallbackDelta;\n\n      if (!items[index]) {\n        return;\n      }\n    }\n\n    this.setActiveItem(index);\n  }\n  /** Returns the items as an array. */\n\n\n  _getItemsArray() {\n    return this._items instanceof QueryList ? this._items.toArray() : this._items;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass ActiveDescendantKeyManager extends ListKeyManager {\n  setActiveItem(index) {\n    if (this.activeItem) {\n      this.activeItem.setInactiveStyles();\n    }\n\n    super.setActiveItem(index);\n\n    if (this.activeItem) {\n      this.activeItem.setActiveStyles();\n    }\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass FocusKeyManager extends ListKeyManager {\n  constructor() {\n    super(...arguments);\n    this._origin = 'program';\n  }\n  /**\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n   * @param origin Focus origin to be used when focusing items.\n   */\n\n\n  setFocusOrigin(origin) {\n    this._origin = origin;\n    return this;\n  }\n\n  setActiveItem(item) {\n    super.setActiveItem(item);\n\n    if (this.activeItem) {\n      this.activeItem.focus(this._origin);\n    }\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Configuration for the isFocusable method.\n */\n\n\nclass IsFocusableConfig {\n  constructor() {\n    /**\n     * Whether to count an element as focusable even if it is not currently visible.\n     */\n    this.ignoreVisibility = false;\n  }\n\n} // The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\n\n\nclass InteractivityChecker {\n  constructor(_platform) {\n    this._platform = _platform;\n  }\n  /**\n   * Gets whether an element is disabled.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is disabled.\n   */\n\n\n  isDisabled(element) {\n    // This does not capture some cases, such as a non-form control with a disabled attribute or\n    // a form control inside of a disabled form, but should capture the most common cases.\n    return element.hasAttribute('disabled');\n  }\n  /**\n   * Gets whether an element is visible for the purposes of interactivity.\n   *\n   * This will capture states like `display: none` and `visibility: hidden`, but not things like\n   * being clipped by an `overflow: hidden` parent or being outside the viewport.\n   *\n   * @returns Whether the element is visible.\n   */\n\n\n  isVisible(element) {\n    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n  }\n  /**\n   * Gets whether an element can be reached via Tab key.\n   * Assumes that the element has already been checked with isFocusable.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is tabbable.\n   */\n\n\n  isTabbable(element) {\n    // Nothing is tabbable on the server 😎\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    const frameElement = getFrameElement(getWindow(element));\n\n    if (frameElement) {\n      // Frame elements inherit their tabindex onto all child elements.\n      if (getTabIndexValue(frameElement) === -1) {\n        return false;\n      } // Browsers disable tabbing to an element inside of an invisible frame.\n\n\n      if (!this.isVisible(frameElement)) {\n        return false;\n      }\n    }\n\n    let nodeName = element.nodeName.toLowerCase();\n    let tabIndexValue = getTabIndexValue(element);\n\n    if (element.hasAttribute('contenteditable')) {\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'iframe' || nodeName === 'object') {\n      // The frame or object's content may be tabbable depending on the content, but it's\n      // not possibly to reliably detect the content of the frames. We always consider such\n      // elements as non-tabbable.\n      return false;\n    } // In iOS, the browser only considers some specific elements as tabbable.\n\n\n    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n      return false;\n    }\n\n    if (nodeName === 'audio') {\n      // Audio elements without controls enabled are never tabbable, regardless\n      // of the tabindex attribute explicitly being set.\n      if (!element.hasAttribute('controls')) {\n        return false;\n      } // Audio elements with controls are by default tabbable unless the\n      // tabindex attribute is set to `-1` explicitly.\n\n\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'video') {\n      // For all video elements, if the tabindex attribute is set to `-1`, the video\n      // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`\n      // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The\n      // tabindex attribute is the source of truth here.\n      if (tabIndexValue === -1) {\n        return false;\n      } // If the tabindex is explicitly set, and not `-1` (as per check before), the\n      // video element is always tabbable (regardless of whether it has controls or not).\n\n\n      if (tabIndexValue !== null) {\n        return true;\n      } // Otherwise (when no explicit tabindex is set), a video is only tabbable if it\n      // has controls enabled. Firefox is special as videos are always tabbable regardless\n      // of whether there are controls or not.\n\n\n      return this._platform.FIREFOX || element.hasAttribute('controls');\n    }\n\n    return element.tabIndex >= 0;\n  }\n  /**\n   * Gets whether an element can be focused by the user.\n   *\n   * @param element Element to be checked.\n   * @param config The config object with options to customize this method's behavior\n   * @returns Whether the element is focusable.\n   */\n\n\n  isFocusable(element, config) {\n    // Perform checks in order of left to most expensive.\n    // Again, naive approach that does not capture many edge cases and browser quirks.\n    return isPotentiallyFocusable(element) && !this.isDisabled(element) && ((config === null || config === void 0 ? void 0 : config.ignoreVisibility) || this.isVisible(element));\n  }\n\n}\n\nInteractivityChecker.ɵfac = function InteractivityChecker_Factory(t) {\n  return new (t || InteractivityChecker)(ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n};\n\nInteractivityChecker.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function InteractivityChecker_Factory() {\n    return new InteractivityChecker(i0.ɵɵinject(i1.Platform));\n  },\n  token: InteractivityChecker,\n  providedIn: \"root\"\n});\n\nInteractivityChecker.ctorParameters = () => [{\n  type: Platform\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InteractivityChecker, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Platform\n    }];\n  }, null);\n})();\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n */\n\n\nfunction getFrameElement(window) {\n  try {\n    return window.frameElement;\n  } catch (_a) {\n    return null;\n  }\n}\n/** Checks whether the specified element has any geometry / rectangles. */\n\n\nfunction hasGeometry(element) {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight || typeof element.getClientRects === 'function' && element.getClientRects().length);\n}\n/** Gets whether an element's  */\n\n\nfunction isNativeFormElement(element) {\n  let nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' || nodeName === 'select' || nodeName === 'button' || nodeName === 'textarea';\n}\n/** Gets whether an element is an `<input type=\"hidden\">`. */\n\n\nfunction isHiddenInput(element) {\n  return isInputElement(element) && element.type == 'hidden';\n}\n/** Gets whether an element is an anchor that has an href attribute. */\n\n\nfunction isAnchorWithHref(element) {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n/** Gets whether an element is an input element. */\n\n\nfunction isInputElement(element) {\n  return element.nodeName.toLowerCase() == 'input';\n}\n/** Gets whether an element is an anchor element. */\n\n\nfunction isAnchorElement(element) {\n  return element.nodeName.toLowerCase() == 'a';\n}\n/** Gets whether an element has a valid tabindex. */\n\n\nfunction hasValidTabIndex(element) {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n\n  let tabIndex = element.getAttribute('tabindex'); // IE11 parses tabindex=\"\" as the value \"-32768\"\n\n  if (tabIndex == '-32768') {\n    return false;\n  }\n\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n */\n\n\nfunction getTabIndexValue(element) {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  } // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n\n\n  const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/** Checks whether the specified element is potentially tabbable on iOS */\n\n\nfunction isPotentiallyTabbableIOS(element) {\n  let nodeName = element.nodeName.toLowerCase();\n  let inputType = nodeName === 'input' && element.type;\n  return inputType === 'text' || inputType === 'password' || nodeName === 'select' || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n */\n\n\nfunction isPotentiallyFocusable(element) {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return isNativeFormElement(element) || isAnchorWithHref(element) || element.hasAttribute('contenteditable') || hasValidTabIndex(element);\n}\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\n\n\nfunction getWindow(node) {\n  // ownerDocument is null if `node` itself *is* a document.\n  return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to be misaligned.\n *\n * @deprecated Use `ConfigurableFocusTrap` instead.\n * @breaking-change 11.0.0\n */\n\n\nclass FocusTrap {\n  constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {\n    this._element = _element;\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._document = _document;\n    this._hasAttached = false; // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n\n    this.startAnchorListener = () => this.focusLastTabbableElement();\n\n    this.endAnchorListener = () => this.focusFirstTabbableElement();\n\n    this._enabled = true;\n\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n  /** Whether the focus trap is active. */\n\n\n  get enabled() {\n    return this._enabled;\n  }\n\n  set enabled(value) {\n    this._enabled = value;\n\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(value, this._startAnchor);\n\n      this._toggleAnchorTabIndex(value, this._endAnchor);\n    }\n  }\n  /** Destroys the focus trap by cleaning up the anchors. */\n\n\n  destroy() {\n    const startAnchor = this._startAnchor;\n    const endAnchor = this._endAnchor;\n\n    if (startAnchor) {\n      startAnchor.removeEventListener('focus', this.startAnchorListener);\n\n      if (startAnchor.parentNode) {\n        startAnchor.parentNode.removeChild(startAnchor);\n      }\n    }\n\n    if (endAnchor) {\n      endAnchor.removeEventListener('focus', this.endAnchorListener);\n\n      if (endAnchor.parentNode) {\n        endAnchor.parentNode.removeChild(endAnchor);\n      }\n    }\n\n    this._startAnchor = this._endAnchor = null;\n    this._hasAttached = false;\n  }\n  /**\n   * Inserts the anchors into the DOM. This is usually done automatically\n   * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n   * @returns Whether the focus trap managed to attach successfully. This may not be the case\n   * if the target element isn't currently in the DOM.\n   */\n\n\n  attachAnchors() {\n    // If we're not on the browser, there can be no focus to trap.\n    if (this._hasAttached) {\n      return true;\n    }\n\n    this._ngZone.runOutsideAngular(() => {\n      if (!this._startAnchor) {\n        this._startAnchor = this._createAnchor();\n\n        this._startAnchor.addEventListener('focus', this.startAnchorListener);\n      }\n\n      if (!this._endAnchor) {\n        this._endAnchor = this._createAnchor();\n\n        this._endAnchor.addEventListener('focus', this.endAnchorListener);\n      }\n    });\n\n    if (this._element.parentNode) {\n      this._element.parentNode.insertBefore(this._startAnchor, this._element);\n\n      this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);\n\n      this._hasAttached = true;\n    }\n\n    return this._hasAttached;\n  }\n  /**\n   * Waits for the zone to stabilize, then either focuses the first element that the\n   * user specified, or the first tabbable element.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n\n\n  focusInitialElementWhenReady(options) {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusInitialElement(options)));\n    });\n  }\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the first tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n\n\n  focusFirstTabbableElementWhenReady(options) {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusFirstTabbableElement(options)));\n    });\n  }\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the last tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n\n\n  focusLastTabbableElementWhenReady(options) {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusLastTabbableElement(options)));\n    });\n  }\n  /**\n   * Get the specified boundary element of the trapped region.\n   * @param bound The boundary to get (start or end of trapped region).\n   * @returns The boundary element.\n   */\n\n\n  _getRegionBoundary(bound) {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    let markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` + `[cdkFocusRegion${bound}], ` + `[cdk-focus-${bound}]`);\n\n    for (let i = 0; i < markers.length; i++) {\n      // @breaking-change 8.0.0\n      if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` + `use 'cdkFocusRegion${bound}' instead. The deprecated ` + `attribute will be removed in 8.0.0.`, markers[i]);\n      } else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` + `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` + `will be removed in 8.0.0.`, markers[i]);\n      }\n    }\n\n    if (bound == 'start') {\n      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n    }\n\n    return markers.length ? markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n  }\n  /**\n   * Focuses the element that should be focused when the focus trap is initialized.\n   * @returns Whether focus was moved successfully.\n   */\n\n\n  focusInitialElement(options) {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    const redirectToElement = this._element.querySelector(`[cdk-focus-initial], ` + `[cdkFocusInitial]`);\n\n    if (redirectToElement) {\n      // @breaking-change 8.0.0\n      if (redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` + `use 'cdkFocusInitial' instead. The deprecated attribute ` + `will be removed in 8.0.0`, redirectToElement);\n      } // Warn the consumer if the element they've pointed to\n      // isn't focusable, when not in production mode.\n\n\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._checker.isFocusable(redirectToElement)) {\n        console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\n      }\n\n      if (!this._checker.isFocusable(redirectToElement)) {\n        const focusableChild = this._getFirstTabbableElement(redirectToElement);\n\n        focusableChild === null || focusableChild === void 0 ? void 0 : focusableChild.focus(options);\n        return !!focusableChild;\n      }\n\n      redirectToElement.focus(options);\n      return true;\n    }\n\n    return this.focusFirstTabbableElement(options);\n  }\n  /**\n   * Focuses the first tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfully.\n   */\n\n\n  focusFirstTabbableElement(options) {\n    const redirectToElement = this._getRegionBoundary('start');\n\n    if (redirectToElement) {\n      redirectToElement.focus(options);\n    }\n\n    return !!redirectToElement;\n  }\n  /**\n   * Focuses the last tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfully.\n   */\n\n\n  focusLastTabbableElement(options) {\n    const redirectToElement = this._getRegionBoundary('end');\n\n    if (redirectToElement) {\n      redirectToElement.focus(options);\n    }\n\n    return !!redirectToElement;\n  }\n  /**\n   * Checks whether the focus trap has successfully been attached.\n   */\n\n\n  hasAttached() {\n    return this._hasAttached;\n  }\n  /** Get the first tabbable element from a DOM subtree (inclusive). */\n\n\n  _getFirstTabbableElement(root) {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    } // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\n    // back to `childNodes` which includes text nodes, comments etc.\n\n\n    let children = root.children || root.childNodes;\n\n    for (let i = 0; i < children.length; i++) {\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getFirstTabbableElement(children[i]) : null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n  /** Get the last tabbable element from a DOM subtree (inclusive). */\n\n\n  _getLastTabbableElement(root) {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    } // Iterate in reverse DOM order.\n\n\n    let children = root.children || root.childNodes;\n\n    for (let i = children.length - 1; i >= 0; i--) {\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getLastTabbableElement(children[i]) : null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n  /** Creates an anchor element. */\n\n\n  _createAnchor() {\n    const anchor = this._document.createElement('div');\n\n    this._toggleAnchorTabIndex(this._enabled, anchor);\n\n    anchor.classList.add('cdk-visually-hidden');\n    anchor.classList.add('cdk-focus-trap-anchor');\n    anchor.setAttribute('aria-hidden', 'true');\n    return anchor;\n  }\n  /**\n   * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n   * @param isEnabled Whether the focus trap is enabled.\n   * @param anchor Anchor on which to toggle the tabindex.\n   */\n\n\n  _toggleAnchorTabIndex(isEnabled, anchor) {\n    // Remove the tabindex completely, rather than setting it to -1, because if the\n    // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n    isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n  }\n  /**\n   * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\n   * @param enabled: Whether the anchors should trap Tab.\n   */\n\n\n  toggleAnchors(enabled) {\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(enabled, this._startAnchor);\n\n      this._toggleAnchorTabIndex(enabled, this._endAnchor);\n    }\n  }\n  /** Executes a function when the zone is stable. */\n\n\n  _executeOnStable(fn) {\n    if (this._ngZone.isStable) {\n      fn();\n    } else {\n      this._ngZone.onStable.pipe(take(1)).subscribe(fn);\n    }\n  }\n\n}\n/**\n * Factory that allows easy instantiation of focus traps.\n * @deprecated Use `ConfigurableFocusTrapFactory` instead.\n * @breaking-change 11.0.0\n */\n\n\nclass FocusTrapFactory {\n  constructor(_checker, _ngZone, _document) {\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._document = _document;\n  }\n  /**\n   * Creates a focus-trapped region around the given element.\n   * @param element The element around which focus will be trapped.\n   * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\n   *     manually by the user.\n   * @returns The created focus trap instance.\n   */\n\n\n  create(element, deferCaptureElements = false) {\n    return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n  }\n\n}\n\nFocusTrapFactory.ɵfac = function FocusTrapFactory_Factory(t) {\n  return new (t || FocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nFocusTrapFactory.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function FocusTrapFactory_Factory() {\n    return new FocusTrapFactory(i0.ɵɵinject(InteractivityChecker), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.DOCUMENT));\n  },\n  token: FocusTrapFactory,\n  providedIn: \"root\"\n});\n\nFocusTrapFactory.ctorParameters = () => [{\n  type: InteractivityChecker\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusTrapFactory, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: InteractivityChecker\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/** Directive for trapping focus within a region. */\n\n\nclass CdkTrapFocus {\n  constructor(_elementRef, _focusTrapFactory,\n  /**\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 13.0.0\n   */\n  _document) {\n    this._elementRef = _elementRef;\n    this._focusTrapFactory = _focusTrapFactory;\n    /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n\n    this._previouslyFocusedElement = null;\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n  /** Whether the focus trap is active. */\n\n\n  get enabled() {\n    return this.focusTrap.enabled;\n  }\n\n  set enabled(value) {\n    this.focusTrap.enabled = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the directive should automatically move focus into the trapped region upon\n   * initialization and return focus to the previous activeElement upon destruction.\n   */\n\n\n  get autoCapture() {\n    return this._autoCapture;\n  }\n\n  set autoCapture(value) {\n    this._autoCapture = coerceBooleanProperty(value);\n  }\n\n  ngOnDestroy() {\n    this.focusTrap.destroy(); // If we stored a previously focused element when using autoCapture, return focus to that\n    // element now that the trapped region is being destroyed.\n\n    if (this._previouslyFocusedElement) {\n      this._previouslyFocusedElement.focus();\n\n      this._previouslyFocusedElement = null;\n    }\n  }\n\n  ngAfterContentInit() {\n    this.focusTrap.attachAnchors();\n\n    if (this.autoCapture) {\n      this._captureFocus();\n    }\n  }\n\n  ngDoCheck() {\n    if (!this.focusTrap.hasAttached()) {\n      this.focusTrap.attachAnchors();\n    }\n  }\n\n  ngOnChanges(changes) {\n    const autoCaptureChange = changes['autoCapture'];\n\n    if (autoCaptureChange && !autoCaptureChange.firstChange && this.autoCapture && this.focusTrap.hasAttached()) {\n      this._captureFocus();\n    }\n  }\n\n  _captureFocus() {\n    this._previouslyFocusedElement = _getFocusedElementPierceShadowDom();\n    this.focusTrap.focusInitialElementWhenReady();\n  }\n\n}\n\nCdkTrapFocus.ɵfac = function CdkTrapFocus_Factory(t) {\n  return new (t || CdkTrapFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n};\n\nCdkTrapFocus.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkTrapFocus,\n  selectors: [[\"\", \"cdkTrapFocus\", \"\"]],\n  inputs: {\n    enabled: [\"cdkTrapFocus\", \"enabled\"],\n    autoCapture: [\"cdkTrapFocusAutoCapture\", \"autoCapture\"]\n  },\n  exportAs: [\"cdkTrapFocus\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nCdkTrapFocus.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: FocusTrapFactory\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n\nCdkTrapFocus.propDecorators = {\n  enabled: [{\n    type: Input,\n    args: ['cdkTrapFocus']\n  }],\n  autoCapture: [{\n    type: Input,\n    args: ['cdkTrapFocusAutoCapture']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTrapFocus, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTrapFocus]',\n      exportAs: 'cdkTrapFocus'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: FocusTrapFactory\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    enabled: [{\n      type: Input,\n      args: ['cdkTrapFocus']\n    }],\n    autoCapture: [{\n      type: Input,\n      args: ['cdkTrapFocusAutoCapture']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class uses a strategy pattern that determines how it traps focus.\n * See FocusTrapInertStrategy.\n */\n\n\nclass ConfigurableFocusTrap extends FocusTrap {\n  constructor(_element, _checker, _ngZone, _document, _focusTrapManager, _inertStrategy, config) {\n    super(_element, _checker, _ngZone, _document, config.defer);\n    this._focusTrapManager = _focusTrapManager;\n    this._inertStrategy = _inertStrategy;\n\n    this._focusTrapManager.register(this);\n  }\n  /** Whether the FocusTrap is enabled. */\n\n\n  get enabled() {\n    return this._enabled;\n  }\n\n  set enabled(value) {\n    this._enabled = value;\n\n    if (this._enabled) {\n      this._focusTrapManager.register(this);\n    } else {\n      this._focusTrapManager.deregister(this);\n    }\n  }\n  /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */\n\n\n  destroy() {\n    this._focusTrapManager.deregister(this);\n\n    super.destroy();\n  }\n  /** @docs-private Implemented as part of ManagedFocusTrap. */\n\n\n  _enable() {\n    this._inertStrategy.preventFocus(this);\n\n    this.toggleAnchors(true);\n  }\n  /** @docs-private Implemented as part of ManagedFocusTrap. */\n\n\n  _disable() {\n    this._inertStrategy.allowFocus(this);\n\n    this.toggleAnchors(false);\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The injection token used to specify the inert strategy. */\n\n\nconst FOCUS_TRAP_INERT_STRATEGY = new InjectionToken('FOCUS_TRAP_INERT_STRATEGY');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** IE 11 compatible closest implementation that is able to start from non-Element Nodes. */\n\nfunction closest(element, selector) {\n  if (!(element instanceof Node)) {\n    return null;\n  }\n\n  let curr = element;\n\n  while (curr != null && !(curr instanceof Element)) {\n    curr = curr.parentNode;\n  }\n\n  return curr && (hasNativeClosest ? curr.closest(selector) : polyfillClosest(curr, selector));\n}\n/** Polyfill for browsers without Element.closest. */\n\n\nfunction polyfillClosest(element, selector) {\n  let curr = element;\n\n  while (curr != null && !(curr instanceof Element && matches(curr, selector))) {\n    curr = curr.parentNode;\n  }\n\n  return curr || null;\n}\n\nconst hasNativeClosest = typeof Element != 'undefined' && !!Element.prototype.closest;\n/** IE 11 compatible matches implementation. */\n\nfunction matches(element, selector) {\n  return element.matches ? element.matches(selector) : element['msMatchesSelector'](selector);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Lightweight FocusTrapInertStrategy that adds a document focus event\n * listener to redirect focus back inside the FocusTrap.\n */\n\n\nclass EventListenerFocusTrapInertStrategy {\n  constructor() {\n    /** Focus event handler. */\n    this._listener = null;\n  }\n  /** Adds a document event listener that keeps focus inside the FocusTrap. */\n\n\n  preventFocus(focusTrap) {\n    // Ensure there's only one listener per document\n    if (this._listener) {\n      focusTrap._document.removeEventListener('focus', this._listener, true);\n    }\n\n    this._listener = e => this._trapFocus(focusTrap, e);\n\n    focusTrap._ngZone.runOutsideAngular(() => {\n      focusTrap._document.addEventListener('focus', this._listener, true);\n    });\n  }\n  /** Removes the event listener added in preventFocus. */\n\n\n  allowFocus(focusTrap) {\n    if (!this._listener) {\n      return;\n    }\n\n    focusTrap._document.removeEventListener('focus', this._listener, true);\n\n    this._listener = null;\n  }\n  /**\n   * Refocuses the first element in the FocusTrap if the focus event target was outside\n   * the FocusTrap.\n   *\n   * This is an event listener callback. The event listener is added in runOutsideAngular,\n   * so all this code runs outside Angular as well.\n   */\n\n\n  _trapFocus(focusTrap, event) {\n    const target = event.target;\n    const focusTrapRoot = focusTrap._element; // Don't refocus if target was in an overlay, because the overlay might be associated\n    // with an element inside the FocusTrap, ex. mat-select.\n\n    if (!focusTrapRoot.contains(target) && closest(target, 'div.cdk-overlay-pane') === null) {\n      // Some legacy FocusTrap usages have logic that focuses some element on the page\n      // just before FocusTrap is destroyed. For backwards compatibility, wait\n      // to be sure FocusTrap is still enabled before refocusing.\n      setTimeout(() => {\n        // Check whether focus wasn't put back into the focus trap while the timeout was pending.\n        if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {\n          focusTrap.focusFirstTabbableElement();\n        }\n      });\n    }\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injectable that ensures only the most recently enabled FocusTrap is active. */\n\n\nclass FocusTrapManager {\n  constructor() {\n    // A stack of the FocusTraps on the page. Only the FocusTrap at the\n    // top of the stack is active.\n    this._focusTrapStack = [];\n  }\n  /**\n   * Disables the FocusTrap at the top of the stack, and then pushes\n   * the new FocusTrap onto the stack.\n   */\n\n\n  register(focusTrap) {\n    // Dedupe focusTraps that register multiple times.\n    this._focusTrapStack = this._focusTrapStack.filter(ft => ft !== focusTrap);\n    let stack = this._focusTrapStack;\n\n    if (stack.length) {\n      stack[stack.length - 1]._disable();\n    }\n\n    stack.push(focusTrap);\n\n    focusTrap._enable();\n  }\n  /**\n   * Removes the FocusTrap from the stack, and activates the\n   * FocusTrap that is the new top of the stack.\n   */\n\n\n  deregister(focusTrap) {\n    focusTrap._disable();\n\n    const stack = this._focusTrapStack;\n    const i = stack.indexOf(focusTrap);\n\n    if (i !== -1) {\n      stack.splice(i, 1);\n\n      if (stack.length) {\n        stack[stack.length - 1]._enable();\n      }\n    }\n  }\n\n}\n\nFocusTrapManager.ɵfac = function FocusTrapManager_Factory(t) {\n  return new (t || FocusTrapManager)();\n};\n\nFocusTrapManager.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function FocusTrapManager_Factory() {\n    return new FocusTrapManager();\n  },\n  token: FocusTrapManager,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusTrapManager, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Factory that allows easy instantiation of configurable focus traps. */\n\n\nclass ConfigurableFocusTrapFactory {\n  constructor(_checker, _ngZone, _focusTrapManager, _document, _inertStrategy) {\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._focusTrapManager = _focusTrapManager;\n    this._document = _document; // TODO split up the strategies into different modules, similar to DateAdapter.\n\n    this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();\n  }\n\n  create(element, config = {\n    defer: false\n  }) {\n    let configObject;\n\n    if (typeof config === 'boolean') {\n      configObject = {\n        defer: config\n      };\n    } else {\n      configObject = config;\n    }\n\n    return new ConfigurableFocusTrap(element, this._checker, this._ngZone, this._document, this._focusTrapManager, this._inertStrategy, configObject);\n  }\n\n}\n\nConfigurableFocusTrapFactory.ɵfac = function ConfigurableFocusTrapFactory_Factory(t) {\n  return new (t || ConfigurableFocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(FocusTrapManager), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(FOCUS_TRAP_INERT_STRATEGY, 8));\n};\n\nConfigurableFocusTrapFactory.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function ConfigurableFocusTrapFactory_Factory() {\n    return new ConfigurableFocusTrapFactory(i0.ɵɵinject(InteractivityChecker), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(FocusTrapManager), i0.ɵɵinject(i2.DOCUMENT), i0.ɵɵinject(FOCUS_TRAP_INERT_STRATEGY, 8));\n  },\n  token: ConfigurableFocusTrapFactory,\n  providedIn: \"root\"\n});\n\nConfigurableFocusTrapFactory.ctorParameters = () => [{\n  type: InteractivityChecker\n}, {\n  type: NgZone\n}, {\n  type: FocusTrapManager\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [FOCUS_TRAP_INERT_STRATEGY]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ConfigurableFocusTrapFactory, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: InteractivityChecker\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: FocusTrapManager\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [FOCUS_TRAP_INERT_STRATEGY]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Gets whether an event could be a faked `mousedown` event dispatched by a screen reader. */\n\n\nfunction isFakeMousedownFromScreenReader(event) {\n  // Some screen readers will dispatch a fake `mousedown` event when pressing enter or space on\n  // a clickable element. We can distinguish these events when both `offsetX` and `offsetY` are\n  // zero. Note that there's an edge case where the user could click the 0x0 spot of the screen\n  // themselves, but that is unlikely to contain interaction elements. Historially we used to check\n  // `event.buttons === 0`, however that no longer works on recent versions of NVDA.\n  return event.offsetX === 0 && event.offsetY === 0;\n}\n/** Gets whether an event could be a faked `touchstart` event dispatched by a screen reader. */\n\n\nfunction isFakeTouchstartFromScreenReader(event) {\n  const touch = event.touches && event.touches[0] || event.changedTouches && event.changedTouches[0]; // A fake `touchstart` can be distinguished from a real one by looking at the `identifier`\n  // which is typically >= 0 on a real device versus -1 from a screen reader. Just to be safe,\n  // we can also look at `radiusX` and `radiusY`. This behavior was observed against a Windows 10\n  // device with a touch screen running NVDA v2020.4 and Firefox 85 or Chrome 88.\n\n  return !!touch && touch.identifier === -1 && (touch.radiusX == null || touch.radiusX === 1) && (touch.radiusY == null || touch.radiusY === 1);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injectable options for the InputModalityDetector. These are shallowly merged with the default\n * options.\n */\n\n\nconst INPUT_MODALITY_DETECTOR_OPTIONS = new InjectionToken('cdk-input-modality-detector-options');\n/**\n * Default options for the InputModalityDetector.\n *\n * Modifier keys are ignored by default (i.e. when pressed won't cause the service to detect\n * keyboard input modality) for two reasons:\n *\n * 1. Modifier keys are commonly used with mouse to perform actions such as 'right click' or 'open\n *    in new tab', and are thus less representative of actual keyboard interaction.\n * 2. VoiceOver triggers some keyboard events when linearly navigating with Control + Option (but\n *    confusingly not with Caps Lock). Thus, to have parity with other screen readers, we ignore\n *    these keys so as to not update the input modality.\n *\n * Note that we do not by default ignore the right Meta key on Safari because it has the same key\n * code as the ContextMenu key on other browsers. When we switch to using event.key, we can\n * distinguish between the two.\n */\n\nconst INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS = {\n  ignoreKeys: [ALT, CONTROL, MAC_META, META, SHIFT]\n};\n/**\n * The amount of time needed to pass after a touchstart event in order for a subsequent mousedown\n * event to be attributed as mouse and not touch.\n *\n * This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n * that a value of around 650ms seems appropriate.\n */\n\nconst TOUCH_BUFFER_MS = 650;\n/**\n * Event listener options that enable capturing and also mark the listener as passive if the browser\n * supports it.\n */\n\nconst modalityEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true,\n  capture: true\n});\n/**\n * Service that detects the user's input modality.\n *\n * This service does not update the input modality when a user navigates with a screen reader\n * (e.g. linear navigation with VoiceOver, object navigation / browse mode with NVDA, virtual PC\n * cursor mode with JAWS). This is in part due to technical limitations (i.e. keyboard events do not\n * fire as expected in these modes) but is also arguably the correct behavior. Navigating with a\n * screen reader is akin to visually scanning a page, and should not be interpreted as actual user\n * input interaction.\n *\n * When a user is not navigating but *interacting* with a screen reader, this service attempts to\n * update the input modality to keyboard, but in general this service's behavior is largely\n * undefined.\n */\n\nclass InputModalityDetector {\n  constructor(_platform, ngZone, document, options) {\n    this._platform = _platform;\n    /**\n     * The most recently detected input modality event target. Is null if no input modality has been\n     * detected or if the associated event target is null for some unknown reason.\n     */\n\n    this._mostRecentTarget = null;\n    /** The underlying BehaviorSubject that emits whenever an input modality is detected. */\n\n    this._modality = new BehaviorSubject(null);\n    /**\n     * The timestamp of the last touch input modality. Used to determine whether mousedown events\n     * should be attributed to mouse or touch.\n     */\n\n    this._lastTouchMs = 0;\n    /**\n     * Handles keydown events. Must be an arrow function in order to preserve the context when it gets\n     * bound.\n     */\n\n    this._onKeydown = event => {\n      var _a, _b; // If this is one of the keys we should ignore, then ignore it and don't update the input\n      // modality to keyboard.\n\n\n      if ((_b = (_a = this._options) === null || _a === void 0 ? void 0 : _a.ignoreKeys) === null || _b === void 0 ? void 0 : _b.some(keyCode => keyCode === event.keyCode)) {\n        return;\n      }\n\n      this._modality.next('keyboard');\n\n      this._mostRecentTarget = _getEventTarget(event);\n    };\n    /**\n     * Handles mousedown events. Must be an arrow function in order to preserve the context when it\n     * gets bound.\n     */\n\n\n    this._onMousedown = event => {\n      // Touches trigger both touch and mouse events, so we need to distinguish between mouse events\n      // that were triggered via mouse vs touch. To do so, check if the mouse event occurs closely\n      // after the previous touch event.\n      if (Date.now() - this._lastTouchMs < TOUCH_BUFFER_MS) {\n        return;\n      } // Fake mousedown events are fired by some screen readers when controls are activated by the\n      // screen reader. Attribute them to keyboard input modality.\n\n\n      this._modality.next(isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse');\n\n      this._mostRecentTarget = _getEventTarget(event);\n    };\n    /**\n     * Handles touchstart events. Must be an arrow function in order to preserve the context when it\n     * gets bound.\n     */\n\n\n    this._onTouchstart = event => {\n      // Same scenario as mentioned in _onMousedown, but on touch screen devices, fake touchstart\n      // events are fired. Again, attribute to keyboard input modality.\n      if (isFakeTouchstartFromScreenReader(event)) {\n        this._modality.next('keyboard');\n\n        return;\n      } // Store the timestamp of this touch event, as it's used to distinguish between mouse events\n      // triggered via mouse vs touch.\n\n\n      this._lastTouchMs = Date.now();\n\n      this._modality.next('touch');\n\n      this._mostRecentTarget = _getEventTarget(event);\n    };\n\n    this._options = Object.assign(Object.assign({}, INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS), options); // Skip the first emission as it's null.\n\n    this.modalityDetected = this._modality.pipe(skip(1));\n    this.modalityChanged = this.modalityDetected.pipe(distinctUntilChanged()); // If we're not in a browser, this service should do nothing, as there's no relevant input\n    // modality to detect.\n\n    if (_platform.isBrowser) {\n      ngZone.runOutsideAngular(() => {\n        document.addEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\n        document.addEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\n        document.addEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\n      });\n    }\n  }\n  /** The most recently detected input modality. */\n\n\n  get mostRecentModality() {\n    return this._modality.value;\n  }\n\n  ngOnDestroy() {\n    this._modality.complete();\n\n    if (this._platform.isBrowser) {\n      document.removeEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\n      document.removeEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\n      document.removeEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\n    }\n  }\n\n}\n\nInputModalityDetector.ɵfac = function InputModalityDetector_Factory(t) {\n  return new (t || InputModalityDetector)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(INPUT_MODALITY_DETECTOR_OPTIONS, 8));\n};\n\nInputModalityDetector.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function InputModalityDetector_Factory() {\n    return new InputModalityDetector(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.DOCUMENT), i0.ɵɵinject(INPUT_MODALITY_DETECTOR_OPTIONS, 8));\n  },\n  token: InputModalityDetector,\n  providedIn: \"root\"\n});\n\nInputModalityDetector.ctorParameters = () => [{\n  type: Platform\n}, {\n  type: NgZone\n}, {\n  type: Document,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [INPUT_MODALITY_DETECTOR_OPTIONS]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InputModalityDetector, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Platform\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [INPUT_MODALITY_DETECTOR_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken('liveAnnouncerElement', {\n  providedIn: 'root',\n  factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY\n});\n/** @docs-private */\n\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n  return null;\n}\n/** Injection token that can be used to configure the default options for the LiveAnnouncer. */\n\n\nconst LIVE_ANNOUNCER_DEFAULT_OPTIONS = new InjectionToken('LIVE_ANNOUNCER_DEFAULT_OPTIONS');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nclass LiveAnnouncer {\n  constructor(elementToken, _ngZone, _document, _defaultOptions) {\n    this._ngZone = _ngZone;\n    this._defaultOptions = _defaultOptions; // We inject the live element and document as `any` because the constructor signature cannot\n    // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n    // a class decorator causes TypeScript to preserve the constructor signature types.\n\n    this._document = _document;\n    this._liveElement = elementToken || this._createLiveElement();\n  }\n\n  announce(message, ...args) {\n    const defaultOptions = this._defaultOptions;\n    let politeness;\n    let duration;\n\n    if (args.length === 1 && typeof args[0] === 'number') {\n      duration = args[0];\n    } else {\n      [politeness, duration] = args;\n    }\n\n    this.clear();\n    clearTimeout(this._previousTimeout);\n\n    if (!politeness) {\n      politeness = defaultOptions && defaultOptions.politeness ? defaultOptions.politeness : 'polite';\n    }\n\n    if (duration == null && defaultOptions) {\n      duration = defaultOptions.duration;\n    } // TODO: ensure changing the politeness works on all environments we support.\n\n\n    this._liveElement.setAttribute('aria-live', politeness); // This 100ms timeout is necessary for some browser + screen-reader combinations:\n    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n    //   second time without clearing and then using a non-zero delay.\n    // (using JAWS 17 at time of this writing).\n\n\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        clearTimeout(this._previousTimeout);\n        this._previousTimeout = setTimeout(() => {\n          this._liveElement.textContent = message;\n          resolve();\n\n          if (typeof duration === 'number') {\n            this._previousTimeout = setTimeout(() => this.clear(), duration);\n          }\n        }, 100);\n      });\n    });\n  }\n  /**\n   * Clears the current text from the announcer element. Can be used to prevent\n   * screen readers from reading the text out again while the user is going\n   * through the page landmarks.\n   */\n\n\n  clear() {\n    if (this._liveElement) {\n      this._liveElement.textContent = '';\n    }\n  }\n\n  ngOnDestroy() {\n    clearTimeout(this._previousTimeout);\n\n    if (this._liveElement && this._liveElement.parentNode) {\n      this._liveElement.parentNode.removeChild(this._liveElement);\n\n      this._liveElement = null;\n    }\n  }\n\n  _createLiveElement() {\n    const elementClass = 'cdk-live-announcer-element';\n\n    const previousElements = this._document.getElementsByClassName(elementClass);\n\n    const liveEl = this._document.createElement('div'); // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n\n\n    for (let i = 0; i < previousElements.length; i++) {\n      previousElements[i].parentNode.removeChild(previousElements[i]);\n    }\n\n    liveEl.classList.add(elementClass);\n    liveEl.classList.add('cdk-visually-hidden');\n    liveEl.setAttribute('aria-atomic', 'true');\n    liveEl.setAttribute('aria-live', 'polite');\n\n    this._document.body.appendChild(liveEl);\n\n    return liveEl;\n  }\n\n}\n\nLiveAnnouncer.ɵfac = function LiveAnnouncer_Factory(t) {\n  return new (t || LiveAnnouncer)(ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8));\n};\n\nLiveAnnouncer.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function LiveAnnouncer_Factory() {\n    return new LiveAnnouncer(i0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.DOCUMENT), i0.ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8));\n  },\n  token: LiveAnnouncer,\n  providedIn: \"root\"\n});\n\nLiveAnnouncer.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n  }]\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LiveAnnouncer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\n\n\nclass CdkAriaLive {\n  constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n    this._elementRef = _elementRef;\n    this._liveAnnouncer = _liveAnnouncer;\n    this._contentObserver = _contentObserver;\n    this._ngZone = _ngZone;\n    this._politeness = 'polite';\n  }\n  /** The aria-live politeness level to use when announcing messages. */\n\n\n  get politeness() {\n    return this._politeness;\n  }\n\n  set politeness(value) {\n    this._politeness = value === 'off' || value === 'assertive' ? value : 'polite';\n\n    if (this._politeness === 'off') {\n      if (this._subscription) {\n        this._subscription.unsubscribe();\n\n        this._subscription = null;\n      }\n    } else if (!this._subscription) {\n      this._subscription = this._ngZone.runOutsideAngular(() => {\n        return this._contentObserver.observe(this._elementRef).subscribe(() => {\n          // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n          const elementText = this._elementRef.nativeElement.textContent; // The `MutationObserver` fires also for attribute\n          // changes which we don't want to announce.\n\n          if (elementText !== this._previousAnnouncedText) {\n            this._liveAnnouncer.announce(elementText, this._politeness);\n\n            this._previousAnnouncedText = elementText;\n          }\n        });\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n\n}\n\nCdkAriaLive.ɵfac = function CdkAriaLive_Factory(t) {\n  return new (t || CdkAriaLive)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nCdkAriaLive.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkAriaLive,\n  selectors: [[\"\", \"cdkAriaLive\", \"\"]],\n  inputs: {\n    politeness: [\"cdkAriaLive\", \"politeness\"]\n  },\n  exportAs: [\"cdkAriaLive\"]\n});\n\nCdkAriaLive.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: LiveAnnouncer\n}, {\n  type: ContentObserver\n}, {\n  type: NgZone\n}];\n\nCdkAriaLive.propDecorators = {\n  politeness: [{\n    type: Input,\n    args: ['cdkAriaLive']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAriaLive, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkAriaLive]',\n      exportAs: 'cdkAriaLive'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: LiveAnnouncer\n    }, {\n      type: ɵngcc2.ContentObserver\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    politeness: [{\n      type: Input,\n      args: ['cdkAriaLive']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** InjectionToken for FocusMonitorOptions. */\n\n\nconst FOCUS_MONITOR_DEFAULT_OPTIONS = new InjectionToken('cdk-focus-monitor-default-options');\n/**\n * Event listener options that enable capturing and also\n * mark the listener as passive if the browser supports it.\n */\n\nconst captureEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true,\n  capture: true\n});\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\n\nclass FocusMonitor {\n  constructor(_ngZone, _platform, _inputModalityDetector,\n  /** @breaking-change 11.0.0 make document required */\n  document, options) {\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    this._inputModalityDetector = _inputModalityDetector;\n    /** The focus origin that the next focus event is a result of. */\n\n    this._origin = null;\n    /** Whether the window has just been focused. */\n\n    this._windowFocused = false;\n    /**\n     * Whether the origin was determined via a touch interaction. Necessary as properly attributing\n     * focus events to touch interactions requires special logic.\n     */\n\n    this._originFromTouchInteraction = false;\n    /** Map of elements being monitored to their info. */\n\n    this._elementInfo = new Map();\n    /** The number of elements currently being monitored. */\n\n    this._monitoredElementCount = 0;\n    /**\n     * Keeps track of the root nodes to which we've currently bound a focus/blur handler,\n     * as well as the number of monitored elements that they contain. We have to treat focus/blur\n     * handlers differently from the rest of the events, because the browser won't emit events\n     * to the document when focus moves inside of a shadow root.\n     */\n\n    this._rootNodeFocusListenerCount = new Map();\n    /**\n     * Event listener for `focus` events on the window.\n     * Needs to be an arrow function in order to preserve the context when it gets bound.\n     */\n\n    this._windowFocusListener = () => {\n      // Make a note of when the window regains focus, so we can\n      // restore the origin info for the focused element.\n      this._windowFocused = true;\n      this._windowFocusTimeoutId = setTimeout(() => this._windowFocused = false);\n    };\n    /** Subject for stopping our InputModalityDetector subscription. */\n\n\n    this._stopInputModalityDetector = new Subject();\n    /**\n     * Event listener for `focus` and 'blur' events on the document.\n     * Needs to be an arrow function in order to preserve the context when it gets bound.\n     */\n\n    this._rootNodeFocusAndBlurListener = event => {\n      const target = _getEventTarget(event);\n\n      const handler = event.type === 'focus' ? this._onFocus : this._onBlur; // We need to walk up the ancestor chain in order to support `checkChildren`.\n\n      for (let element = target; element; element = element.parentElement) {\n        handler.call(this, event, element);\n      }\n    };\n\n    this._document = document;\n    this._detectionMode = (options === null || options === void 0 ? void 0 : options.detectionMode) || 0\n    /* IMMEDIATE */\n    ;\n  }\n\n  monitor(element, checkChildren = false) {\n    const nativeElement = coerceElement(element); // Do nothing if we're not on the browser platform or the passed in node isn't an element.\n\n    if (!this._platform.isBrowser || nativeElement.nodeType !== 1) {\n      return of(null);\n    } // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to\n    // the shadow root, rather than the `document`, because the browser won't emit focus events\n    // to the `document`, if focus is moving within the same shadow root.\n\n\n    const rootNode = _getShadowRoot(nativeElement) || this._getDocument();\n\n    const cachedInfo = this._elementInfo.get(nativeElement); // Check if we're already monitoring this element.\n\n\n    if (cachedInfo) {\n      if (checkChildren) {\n        // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren\n        // observers into ones that behave as if `checkChildren` was turned on. We need a more\n        // robust solution.\n        cachedInfo.checkChildren = true;\n      }\n\n      return cachedInfo.subject;\n    } // Create monitored element info.\n\n\n    const info = {\n      checkChildren: checkChildren,\n      subject: new Subject(),\n      rootNode\n    };\n\n    this._elementInfo.set(nativeElement, info);\n\n    this._registerGlobalListeners(info);\n\n    return info.subject;\n  }\n\n  stopMonitoring(element) {\n    const nativeElement = coerceElement(element);\n\n    const elementInfo = this._elementInfo.get(nativeElement);\n\n    if (elementInfo) {\n      elementInfo.subject.complete();\n\n      this._setClasses(nativeElement);\n\n      this._elementInfo.delete(nativeElement);\n\n      this._removeGlobalListeners(elementInfo);\n    }\n  }\n\n  focusVia(element, origin, options) {\n    const nativeElement = coerceElement(element);\n\n    const focusedElement = this._getDocument().activeElement; // If the element is focused already, calling `focus` again won't trigger the event listener\n    // which means that the focus classes won't be updated. If that's the case, update the classes\n    // directly without waiting for an event.\n\n\n    if (nativeElement === focusedElement) {\n      this._getClosestElementsInfo(nativeElement).forEach(([currentElement, info]) => this._originChanged(currentElement, origin, info));\n    } else {\n      this._setOrigin(origin); // `focus` isn't available on the server\n\n\n      if (typeof nativeElement.focus === 'function') {\n        nativeElement.focus(options);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n  }\n  /** Access injected document if available or fallback to global document reference */\n\n\n  _getDocument() {\n    return this._document || document;\n  }\n  /** Use defaultView of injected document if available or fallback to global window reference */\n\n\n  _getWindow() {\n    const doc = this._getDocument();\n\n    return doc.defaultView || window;\n  }\n\n  _toggleClass(element, className, shouldSet) {\n    if (shouldSet) {\n      element.classList.add(className);\n    } else {\n      element.classList.remove(className);\n    }\n  }\n\n  _getFocusOrigin(focusEventTarget) {\n    if (this._origin) {\n      // If the origin was realized via a touch interaction, we need to perform additional checks\n      // to determine whether the focus origin should be attributed to touch or program.\n      if (this._originFromTouchInteraction) {\n        return this._shouldBeAttributedToTouch(focusEventTarget) ? 'touch' : 'program';\n      } else {\n        return this._origin;\n      }\n    } // If the window has just regained focus, we can restore the most recent origin from before the\n    // window blurred. Otherwise, we've reached the point where we can't identify the source of the\n    // focus. This typically means one of two things happened:\n    //\n    // 1) The element was programmatically focused, or\n    // 2) The element was focused via screen reader navigation (which generally doesn't fire\n    //    events).\n    //\n    // Because we can't distinguish between these two cases, we default to setting `program`.\n\n\n    return this._windowFocused && this._lastFocusOrigin ? this._lastFocusOrigin : 'program';\n  }\n  /**\n   * Returns whether the focus event should be attributed to touch. Recall that in IMMEDIATE mode, a\n   * touch origin isn't immediately reset at the next tick (see _setOrigin). This means that when we\n   * handle a focus event following a touch interaction, we need to determine whether (1) the focus\n   * event was directly caused by the touch interaction or (2) the focus event was caused by a\n   * subsequent programmatic focus call triggered by the touch interaction.\n   * @param focusEventTarget The target of the focus event under examination.\n   */\n\n\n  _shouldBeAttributedToTouch(focusEventTarget) {\n    // Please note that this check is not perfect. Consider the following edge case:\n    //\n    // <div #parent tabindex=\"0\">\n    //   <div #child tabindex=\"0\" (click)=\"#parent.focus()\"></div>\n    // </div>\n    //\n    // Suppose there is a FocusMonitor in IMMEDIATE mode attached to #parent. When the user touches\n    // #child, #parent is programmatically focused. This code will attribute the focus to touch\n    // instead of program. This is a relatively minor edge-case that can be worked around by using\n    // focusVia(parent, 'program') to focus #parent.\n    return this._detectionMode === 1\n    /* EVENTUAL */\n    || !!(focusEventTarget === null || focusEventTarget === void 0 ? void 0 : focusEventTarget.contains(this._inputModalityDetector._mostRecentTarget));\n  }\n  /**\n   * Sets the focus classes on the element based on the given focus origin.\n   * @param element The element to update the classes on.\n   * @param origin The focus origin.\n   */\n\n\n  _setClasses(element, origin) {\n    this._toggleClass(element, 'cdk-focused', !!origin);\n\n    this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n\n    this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n\n    this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n\n    this._toggleClass(element, 'cdk-program-focused', origin === 'program');\n  }\n  /**\n   * Updates the focus origin. If we're using immediate detection mode, we schedule an async\n   * function to clear the origin at the end of a timeout. The duration of the timeout depends on\n   * the origin being set.\n   * @param origin The origin to set.\n   * @param isFromInteraction Whether we are setting the origin from an interaction event.\n   */\n\n\n  _setOrigin(origin, isFromInteraction = false) {\n    this._ngZone.runOutsideAngular(() => {\n      this._origin = origin;\n      this._originFromTouchInteraction = origin === 'touch' && isFromInteraction; // If we're in IMMEDIATE mode, reset the origin at the next tick (or in `TOUCH_BUFFER_MS` ms\n      // for a touch event). We reset the origin at the next tick because Firefox focuses one tick\n      // after the interaction event. We wait `TOUCH_BUFFER_MS` ms before resetting the origin for\n      // a touch event because when a touch event is fired, the associated focus event isn't yet in\n      // the event queue. Before doing so, clear any pending timeouts.\n\n      if (this._detectionMode === 0\n      /* IMMEDIATE */\n      ) {\n        clearTimeout(this._originTimeoutId);\n        const ms = this._originFromTouchInteraction ? TOUCH_BUFFER_MS : 1;\n        this._originTimeoutId = setTimeout(() => this._origin = null, ms);\n      }\n    });\n  }\n  /**\n   * Handles focus events on a registered element.\n   * @param event The focus event.\n   * @param element The monitored element.\n   */\n\n\n  _onFocus(event, element) {\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n    // focus event affecting the monitored element. If we want to use the origin of the first event\n    // instead we should check for the cdk-focused class here and return if the element already has\n    // it. (This only matters for elements that have includesChildren = true).\n    // If we are not counting child-element-focus as focused, make sure that the event target is the\n    // monitored element itself.\n    const elementInfo = this._elementInfo.get(element);\n\n    const focusEventTarget = _getEventTarget(event);\n\n    if (!elementInfo || !elementInfo.checkChildren && element !== focusEventTarget) {\n      return;\n    }\n\n    this._originChanged(element, this._getFocusOrigin(focusEventTarget), elementInfo);\n  }\n  /**\n   * Handles blur events on a registered element.\n   * @param event The blur event.\n   * @param element The monitored element.\n   */\n\n\n  _onBlur(event, element) {\n    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n    // order to focus another child of the monitored element.\n    const elementInfo = this._elementInfo.get(element);\n\n    if (!elementInfo || elementInfo.checkChildren && event.relatedTarget instanceof Node && element.contains(event.relatedTarget)) {\n      return;\n    }\n\n    this._setClasses(element);\n\n    this._emitOrigin(elementInfo.subject, null);\n  }\n\n  _emitOrigin(subject, origin) {\n    this._ngZone.run(() => subject.next(origin));\n  }\n\n  _registerGlobalListeners(elementInfo) {\n    if (!this._platform.isBrowser) {\n      return;\n    }\n\n    const rootNode = elementInfo.rootNode;\n    const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;\n\n    if (!rootNodeFocusListeners) {\n      this._ngZone.runOutsideAngular(() => {\n        rootNode.addEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n        rootNode.addEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n      });\n    }\n\n    this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1); // Register global listeners when first element is monitored.\n\n\n    if (++this._monitoredElementCount === 1) {\n      // Note: we listen to events in the capture phase so we\n      // can detect them even if the user stops propagation.\n      this._ngZone.runOutsideAngular(() => {\n        const window = this._getWindow();\n\n        window.addEventListener('focus', this._windowFocusListener);\n      }); // The InputModalityDetector is also just a collection of global listeners.\n\n\n      this._inputModalityDetector.modalityDetected.pipe(takeUntil(this._stopInputModalityDetector)).subscribe(modality => {\n        this._setOrigin(modality, true\n        /* isFromInteraction */\n        );\n      });\n    }\n  }\n\n  _removeGlobalListeners(elementInfo) {\n    const rootNode = elementInfo.rootNode;\n\n    if (this._rootNodeFocusListenerCount.has(rootNode)) {\n      const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode);\n\n      if (rootNodeFocusListeners > 1) {\n        this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);\n      } else {\n        rootNode.removeEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n        rootNode.removeEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n\n        this._rootNodeFocusListenerCount.delete(rootNode);\n      }\n    } // Unregister global listeners when last element is unmonitored.\n\n\n    if (! --this._monitoredElementCount) {\n      const window = this._getWindow();\n\n      window.removeEventListener('focus', this._windowFocusListener); // Equivalently, stop our InputModalityDetector subscription.\n\n      this._stopInputModalityDetector.next(); // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n\n\n      clearTimeout(this._windowFocusTimeoutId);\n      clearTimeout(this._originTimeoutId);\n    }\n  }\n  /** Updates all the state on an element once its focus origin has changed. */\n\n\n  _originChanged(element, origin, elementInfo) {\n    this._setClasses(element, origin);\n\n    this._emitOrigin(elementInfo.subject, origin);\n\n    this._lastFocusOrigin = origin;\n  }\n  /**\n   * Collects the `MonitoredElementInfo` of a particular element and\n   * all of its ancestors that have enabled `checkChildren`.\n   * @param element Element from which to start the search.\n   */\n\n\n  _getClosestElementsInfo(element) {\n    const results = [];\n\n    this._elementInfo.forEach((info, currentElement) => {\n      if (currentElement === element || info.checkChildren && currentElement.contains(element)) {\n        results.push([currentElement, info]);\n      }\n    });\n\n    return results;\n  }\n\n}\n\nFocusMonitor.ɵfac = function FocusMonitor_Factory(t) {\n  return new (t || FocusMonitor)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(InputModalityDetector), ɵngcc0.ɵɵinject(DOCUMENT, 8), ɵngcc0.ɵɵinject(FOCUS_MONITOR_DEFAULT_OPTIONS, 8));\n};\n\nFocusMonitor.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function FocusMonitor_Factory() {\n    return new FocusMonitor(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.Platform), i0.ɵɵinject(InputModalityDetector), i0.ɵɵinject(i2.DOCUMENT, 8), i0.ɵɵinject(FOCUS_MONITOR_DEFAULT_OPTIONS, 8));\n  },\n  token: FocusMonitor,\n  providedIn: \"root\"\n});\n\nFocusMonitor.ctorParameters = () => [{\n  type: NgZone\n}, {\n  type: Platform\n}, {\n  type: InputModalityDetector\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [FOCUS_MONITOR_DEFAULT_OPTIONS]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusMonitor, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: InputModalityDetector\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [FOCUS_MONITOR_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\n\n\nclass CdkMonitorFocus {\n  constructor(_elementRef, _focusMonitor) {\n    this._elementRef = _elementRef;\n    this._focusMonitor = _focusMonitor;\n    this.cdkFocusChange = new EventEmitter();\n  }\n\n  ngAfterViewInit() {\n    const element = this._elementRef.nativeElement;\n    this._monitorSubscription = this._focusMonitor.monitor(element, element.nodeType === 1 && element.hasAttribute('cdkMonitorSubtreeFocus')).subscribe(origin => this.cdkFocusChange.emit(origin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    if (this._monitorSubscription) {\n      this._monitorSubscription.unsubscribe();\n    }\n  }\n\n}\n\nCdkMonitorFocus.ɵfac = function CdkMonitorFocus_Factory(t) {\n  return new (t || CdkMonitorFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusMonitor));\n};\n\nCdkMonitorFocus.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkMonitorFocus,\n  selectors: [[\"\", \"cdkMonitorElementFocus\", \"\"], [\"\", \"cdkMonitorSubtreeFocus\", \"\"]],\n  outputs: {\n    cdkFocusChange: \"cdkFocusChange\"\n  }\n});\n\nCdkMonitorFocus.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: FocusMonitor\n}];\n\nCdkMonitorFocus.propDecorators = {\n  cdkFocusChange: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkMonitorFocus, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: FocusMonitor\n    }];\n  }, {\n    cdkFocusChange: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** CSS class applied to the document body when in black-on-white high-contrast mode. */\n\n\nconst BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';\n/** CSS class applied to the document body when in white-on-black high-contrast mode. */\n\nconst WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';\n/** CSS class applied to the document body when in high-contrast mode. */\n\nconst HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';\n/**\n * Service to determine whether the browser is currently in a high-contrast-mode environment.\n *\n * Microsoft Windows supports an accessibility feature called \"High Contrast Mode\". This mode\n * changes the appearance of all applications, including web applications, to dramatically increase\n * contrast.\n *\n * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast\n * Mode. This service does not detect high-contrast mode as added by the Chrome \"High Contrast\"\n * browser extension.\n */\n\nclass HighContrastModeDetector {\n  constructor(_platform, document) {\n    this._platform = _platform;\n    this._document = document;\n  }\n  /** Gets the current high-contrast-mode for the page. */\n\n\n  getHighContrastMode() {\n    if (!this._platform.isBrowser) {\n      return 0\n      /* NONE */\n      ;\n    } // Create a test element with an arbitrary background-color that is neither black nor\n    // white; high-contrast mode will coerce the color to either black or white. Also ensure that\n    // appending the test element to the DOM does not affect layout by absolutely positioning it\n\n\n    const testElement = this._document.createElement('div');\n\n    testElement.style.backgroundColor = 'rgb(1,2,3)';\n    testElement.style.position = 'absolute';\n\n    this._document.body.appendChild(testElement); // Get the computed style for the background color, collapsing spaces to normalize between\n    // browsers. Once we get this color, we no longer need the test element. Access the `window`\n    // via the document so we can fake it in tests. Note that we have extra null checks, because\n    // this logic will likely run during app bootstrap and throwing can break the entire app.\n\n\n    const documentWindow = this._document.defaultView || window;\n    const computedStyle = documentWindow && documentWindow.getComputedStyle ? documentWindow.getComputedStyle(testElement) : null;\n    const computedColor = (computedStyle && computedStyle.backgroundColor || '').replace(/ /g, '');\n\n    this._document.body.removeChild(testElement);\n\n    switch (computedColor) {\n      case 'rgb(0,0,0)':\n        return 2\n        /* WHITE_ON_BLACK */\n        ;\n\n      case 'rgb(255,255,255)':\n        return 1\n        /* BLACK_ON_WHITE */\n        ;\n    }\n\n    return 0\n    /* NONE */\n    ;\n  }\n  /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */\n\n\n  _applyBodyHighContrastModeCssClasses() {\n    if (!this._hasCheckedHighContrastMode && this._platform.isBrowser && this._document.body) {\n      const bodyClasses = this._document.body.classList; // IE11 doesn't support `classList` operations with multiple arguments\n\n      bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n      bodyClasses.remove(BLACK_ON_WHITE_CSS_CLASS);\n      bodyClasses.remove(WHITE_ON_BLACK_CSS_CLASS);\n      this._hasCheckedHighContrastMode = true;\n      const mode = this.getHighContrastMode();\n\n      if (mode === 1\n      /* BLACK_ON_WHITE */\n      ) {\n        bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n        bodyClasses.add(BLACK_ON_WHITE_CSS_CLASS);\n      } else if (mode === 2\n      /* WHITE_ON_BLACK */\n      ) {\n        bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n        bodyClasses.add(WHITE_ON_BLACK_CSS_CLASS);\n      }\n    }\n  }\n\n}\n\nHighContrastModeDetector.ɵfac = function HighContrastModeDetector_Factory(t) {\n  return new (t || HighContrastModeDetector)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nHighContrastModeDetector.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function HighContrastModeDetector_Factory() {\n    return new HighContrastModeDetector(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i2.DOCUMENT));\n  },\n  token: HighContrastModeDetector,\n  providedIn: \"root\"\n});\n\nHighContrastModeDetector.ctorParameters = () => [{\n  type: Platform\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HighContrastModeDetector, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass A11yModule {\n  constructor(highContrastModeDetector) {\n    highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n  }\n\n}\n\nA11yModule.ɵfac = function A11yModule_Factory(t) {\n  return new (t || A11yModule)(ɵngcc0.ɵɵinject(HighContrastModeDetector));\n};\n\nA11yModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: A11yModule\n});\nA11yModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [PlatformModule, ObserversModule]\n});\n\nA11yModule.ctorParameters = () => [{\n  type: HighContrastModeDetector\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(A11yModule, [{\n    type: NgModule,\n    args: [{\n      imports: [PlatformModule, ObserversModule],\n      declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n      exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]\n    }]\n  }], function () {\n    return [{\n      type: HighContrastModeDetector\n    }];\n  }, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(A11yModule, {\n    declarations: function () {\n      return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus];\n    },\n    imports: function () {\n      return [PlatformModule, ObserversModule];\n    },\n    exports: function () {\n      return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { A11yModule, ActiveDescendantKeyManager, AriaDescriber, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, CDK_DESCRIBEDBY_ID_PREFIX, CdkAriaLive, CdkMonitorFocus, CdkTrapFocus, ConfigurableFocusTrap, ConfigurableFocusTrapFactory, EventListenerFocusTrapInertStrategy, FOCUS_MONITOR_DEFAULT_OPTIONS, FOCUS_TRAP_INERT_STRATEGY, FocusKeyManager, FocusMonitor, FocusTrap, FocusTrapFactory, HighContrastModeDetector, INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS, INPUT_MODALITY_DETECTOR_OPTIONS, InputModalityDetector, InteractivityChecker, IsFocusableConfig, LIVE_ANNOUNCER_DEFAULT_OPTIONS, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, ListKeyManager, LiveAnnouncer, MESSAGES_CONTAINER_ID, isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader, FocusTrapManager as ɵangular_material_src_cdk_a11y_a11y_a };","map":{"version":3,"names":["i2","DOCUMENT","i0","Injectable","Inject","QueryList","NgZone","Directive","ElementRef","Input","InjectionToken","Optional","EventEmitter","Output","NgModule","Subject","Subscription","BehaviorSubject","of","hasModifierKey","A","Z","ZERO","NINE","END","HOME","LEFT_ARROW","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","TAB","ALT","CONTROL","MAC_META","META","SHIFT","tap","debounceTime","filter","map","take","skip","distinctUntilChanged","takeUntil","coerceBooleanProperty","coerceElement","i1","Platform","_getFocusedElementPierceShadowDom","normalizePassiveListenerOptions","_getEventTarget","_getShadowRoot","PlatformModule","ContentObserver","ObserversModule","ɵngcc0","ɵngcc1","ɵngcc2","ID_DELIMITER","addAriaReferencedId","el","attr","id","ids","getAriaReferenceIds","some","existingId","trim","push","setAttribute","join","removeAriaReferencedId","filteredIds","val","length","removeAttribute","getAttribute","match","MESSAGES_CONTAINER_ID","CDK_DESCRIBEDBY_ID_PREFIX","CDK_DESCRIBEDBY_HOST_ATTRIBUTE","nextId","messageRegistry","Map","messagesContainer","AriaDescriber","constructor","_document","describe","hostElement","message","role","_canBeDescribed","key","getKey","setMessageId","set","messageElement","referenceCount","has","_createMessageElement","_isElementDescribedByMessage","_addMessageReference","removeDescription","_isElementNode","_removeMessageReference","registeredMessage","get","_deleteMessageElement","childNodes","_deleteMessagesContainer","ngOnDestroy","describedElements","querySelectorAll","i","_removeCdkDescribedByReferenceIds","clear","createElement","textContent","_createMessagesContainer","appendChild","removeChild","delete","preExistingContainer","getElementById","parentNode","style","visibility","classList","add","body","element","originalReferenceIds","indexOf","referenceIds","messageId","trimmedMessage","ariaLabel","nodeType","ELEMENT_NODE","ɵfac","AriaDescriber_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","factory","token","providedIn","ctorParameters","type","undefined","decorators","args","ngDevMode","ɵsetClassMetadata","ListKeyManager","_items","_activeItemIndex","_activeItem","_wrap","_letterKeyStream","_typeaheadSubscription","EMPTY","_vertical","_allowedModifierKeys","_homeAndEnd","_skipPredicateFn","item","disabled","_pressedLetters","tabOut","change","changes","subscribe","newItems","itemArray","toArray","newIndex","skipPredicate","predicate","withWrap","shouldWrap","withVerticalOrientation","enabled","withHorizontalOrientation","direction","_horizontal","withAllowedModifierKeys","keys","withTypeAhead","debounceInterval","getLabel","Error","unsubscribe","pipe","letter","inputString","items","_getItemsArray","index","toUpperCase","setActiveItem","withHomeAndEnd","previousActiveItem","updateActiveItem","next","onKeydown","event","keyCode","modifiers","isModifierAllowed","every","modifier","setNextItemActive","setPreviousItemActive","setFirstItemActive","setLastItemActive","toLocaleUpperCase","String","fromCharCode","preventDefault","activeItemIndex","activeItem","isTyping","_setActiveItemByIndex","_setActiveItemByDelta","delta","_setActiveInWrapMode","_setActiveInDefaultMode","fallbackDelta","ActiveDescendantKeyManager","setInactiveStyles","setActiveStyles","FocusKeyManager","arguments","_origin","setFocusOrigin","origin","focus","IsFocusableConfig","ignoreVisibility","InteractivityChecker","_platform","isDisabled","hasAttribute","isVisible","hasGeometry","getComputedStyle","isTabbable","isBrowser","frameElement","getFrameElement","getWindow","getTabIndexValue","nodeName","toLowerCase","tabIndexValue","WEBKIT","IOS","isPotentiallyTabbableIOS","FIREFOX","tabIndex","isFocusable","config","isPotentiallyFocusable","InteractivityChecker_Factory","window","_a","offsetWidth","offsetHeight","getClientRects","isNativeFormElement","isHiddenInput","isInputElement","isAnchorWithHref","isAnchorElement","hasValidTabIndex","isNaN","parseInt","inputType","node","ownerDocument","defaultView","FocusTrap","_element","_checker","_ngZone","deferAnchors","_hasAttached","startAnchorListener","focusLastTabbableElement","endAnchorListener","focusFirstTabbableElement","_enabled","attachAnchors","value","_startAnchor","_endAnchor","_toggleAnchorTabIndex","destroy","startAnchor","endAnchor","removeEventListener","runOutsideAngular","_createAnchor","addEventListener","insertBefore","nextSibling","focusInitialElementWhenReady","options","Promise","resolve","_executeOnStable","focusInitialElement","focusFirstTabbableElementWhenReady","focusLastTabbableElementWhenReady","_getRegionBoundary","bound","markers","console","warn","_getFirstTabbableElement","_getLastTabbableElement","redirectToElement","querySelector","focusableChild","hasAttached","root","children","tabbableChild","anchor","isEnabled","toggleAnchors","fn","isStable","onStable","FocusTrapFactory","create","deferCaptureElements","FocusTrapFactory_Factory","CdkTrapFocus","_elementRef","_focusTrapFactory","_previouslyFocusedElement","focusTrap","nativeElement","autoCapture","_autoCapture","ngAfterContentInit","_captureFocus","ngDoCheck","ngOnChanges","autoCaptureChange","firstChange","CdkTrapFocus_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","inputs","exportAs","features","ɵɵNgOnChangesFeature","propDecorators","selector","ConfigurableFocusTrap","_focusTrapManager","_inertStrategy","defer","register","deregister","_enable","preventFocus","_disable","allowFocus","FOCUS_TRAP_INERT_STRATEGY","closest","Node","curr","Element","hasNativeClosest","polyfillClosest","matches","prototype","EventListenerFocusTrapInertStrategy","_listener","e","_trapFocus","target","focusTrapRoot","contains","setTimeout","activeElement","FocusTrapManager","_focusTrapStack","ft","stack","splice","FocusTrapManager_Factory","ConfigurableFocusTrapFactory","configObject","ConfigurableFocusTrapFactory_Factory","isFakeMousedownFromScreenReader","offsetX","offsetY","isFakeTouchstartFromScreenReader","touch","touches","changedTouches","identifier","radiusX","radiusY","INPUT_MODALITY_DETECTOR_OPTIONS","INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS","ignoreKeys","TOUCH_BUFFER_MS","modalityEventListenerOptions","passive","capture","InputModalityDetector","ngZone","document","_mostRecentTarget","_modality","_lastTouchMs","_onKeydown","_b","_options","_onMousedown","Date","now","_onTouchstart","Object","assign","modalityDetected","modalityChanged","mostRecentModality","complete","InputModalityDetector_Factory","Document","LIVE_ANNOUNCER_ELEMENT_TOKEN","LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY","LIVE_ANNOUNCER_DEFAULT_OPTIONS","LiveAnnouncer","elementToken","_defaultOptions","_liveElement","_createLiveElement","announce","defaultOptions","politeness","duration","clearTimeout","_previousTimeout","elementClass","previousElements","getElementsByClassName","liveEl","LiveAnnouncer_Factory","CdkAriaLive","_liveAnnouncer","_contentObserver","_politeness","_subscription","observe","elementText","_previousAnnouncedText","CdkAriaLive_Factory","FOCUS_MONITOR_DEFAULT_OPTIONS","captureEventListenerOptions","FocusMonitor","_inputModalityDetector","_windowFocused","_originFromTouchInteraction","_elementInfo","_monitoredElementCount","_rootNodeFocusListenerCount","_windowFocusListener","_windowFocusTimeoutId","_stopInputModalityDetector","_rootNodeFocusAndBlurListener","handler","_onFocus","_onBlur","parentElement","call","_detectionMode","detectionMode","monitor","checkChildren","rootNode","_getDocument","cachedInfo","subject","info","_registerGlobalListeners","stopMonitoring","elementInfo","_setClasses","_removeGlobalListeners","focusVia","focusedElement","_getClosestElementsInfo","forEach","currentElement","_originChanged","_setOrigin","_info","_getWindow","doc","_toggleClass","className","shouldSet","remove","_getFocusOrigin","focusEventTarget","_shouldBeAttributedToTouch","_lastFocusOrigin","isFromInteraction","_originTimeoutId","ms","relatedTarget","_emitOrigin","run","rootNodeFocusListeners","modality","results","FocusMonitor_Factory","CdkMonitorFocus","_focusMonitor","cdkFocusChange","ngAfterViewInit","_monitorSubscription","emit","CdkMonitorFocus_Factory","outputs","BLACK_ON_WHITE_CSS_CLASS","WHITE_ON_BLACK_CSS_CLASS","HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS","HighContrastModeDetector","getHighContrastMode","testElement","backgroundColor","position","documentWindow","computedStyle","computedColor","replace","_applyBodyHighContrastModeCssClasses","_hasCheckedHighContrastMode","bodyClasses","mode","HighContrastModeDetector_Factory","A11yModule","highContrastModeDetector","A11yModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports","ngJitMode","ɵɵsetNgModuleScope","ɵangular_material_src_cdk_a11y_a11y_a"],"sources":["C:/Team-43-IMOS/Team-43-IMOS/Imos/node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/a11y.js"],"sourcesContent":["import * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, QueryList, NgZone, Directive, ElementRef, Input, InjectionToken, Optional, EventEmitter, Output, NgModule } from '@angular/core';\nimport { Subject, Subscription, BehaviorSubject, of } from 'rxjs';\nimport { hasModifierKey, A, Z, ZERO, NINE, END, HOME, LEFT_ARROW, RIGHT_ARROW, UP_ARROW, DOWN_ARROW, TAB, ALT, CONTROL, MAC_META, META, SHIFT } from '@angular/cdk/keycodes';\nimport { tap, debounceTime, filter, map, take, skip, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceElement } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { Platform, _getFocusedElementPierceShadowDom, normalizePassiveListenerOptions, _getEventTarget, _getShadowRoot, PlatformModule } from '@angular/cdk/platform';\nimport { ContentObserver, ObserversModule } from '@angular/cdk/observers';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** IDs are delimited by an empty space, as per the spec. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/observers';\nconst ID_DELIMITER = ' ';\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction addAriaReferencedId(el, attr, id) {\n    const ids = getAriaReferenceIds(el, attr);\n    if (ids.some(existingId => existingId.trim() == id.trim())) {\n        return;\n    }\n    ids.push(id.trim());\n    el.setAttribute(attr, ids.join(ID_DELIMITER));\n}\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction removeAriaReferencedId(el, attr, id) {\n    const ids = getAriaReferenceIds(el, attr);\n    const filteredIds = ids.filter(val => val != id.trim());\n    if (filteredIds.length) {\n        el.setAttribute(attr, filteredIds.join(ID_DELIMITER));\n    }\n    else {\n        el.removeAttribute(attr);\n    }\n}\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction getAriaReferenceIds(el, attr) {\n    // Get string array of all individual ids (whitespace delimited) in the attribute value\n    return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** ID used for the body container where all messages are appended. */\nconst MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/** ID prefix used for each created message element. */\nconst CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/** Attribute given to each host element that is described by a message element. */\nconst CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/** Global incremental identifier for each registered message element. */\nlet nextId = 0;\n/** Global map of all registered message elements that have been placed into the document. */\nconst messageRegistry = new Map();\n/** Container for all registered messages. */\nlet messagesContainer = null;\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n */\nclass AriaDescriber {\n    constructor(_document) {\n        this._document = _document;\n    }\n    describe(hostElement, message, role) {\n        if (!this._canBeDescribed(hostElement, message)) {\n            return;\n        }\n        const key = getKey(message, role);\n        if (typeof message !== 'string') {\n            // We need to ensure that the element has an ID.\n            setMessageId(message);\n            messageRegistry.set(key, { messageElement: message, referenceCount: 0 });\n        }\n        else if (!messageRegistry.has(key)) {\n            this._createMessageElement(message, role);\n        }\n        if (!this._isElementDescribedByMessage(hostElement, key)) {\n            this._addMessageReference(hostElement, key);\n        }\n    }\n    removeDescription(hostElement, message, role) {\n        if (!message || !this._isElementNode(hostElement)) {\n            return;\n        }\n        const key = getKey(message, role);\n        if (this._isElementDescribedByMessage(hostElement, key)) {\n            this._removeMessageReference(hostElement, key);\n        }\n        // If the message is a string, it means that it's one that we created for the\n        // consumer so we can remove it safely, otherwise we should leave it in place.\n        if (typeof message === 'string') {\n            const registeredMessage = messageRegistry.get(key);\n            if (registeredMessage && registeredMessage.referenceCount === 0) {\n                this._deleteMessageElement(key);\n            }\n        }\n        if (messagesContainer && messagesContainer.childNodes.length === 0) {\n            this._deleteMessagesContainer();\n        }\n    }\n    /** Unregisters all created message elements and removes the message container. */\n    ngOnDestroy() {\n        const describedElements = this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}]`);\n        for (let i = 0; i < describedElements.length; i++) {\n            this._removeCdkDescribedByReferenceIds(describedElements[i]);\n            describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n        }\n        if (messagesContainer) {\n            this._deleteMessagesContainer();\n        }\n        messageRegistry.clear();\n    }\n    /**\n     * Creates a new element in the visually hidden message container element with the message\n     * as its content and adds it to the message registry.\n     */\n    _createMessageElement(message, role) {\n        const messageElement = this._document.createElement('div');\n        setMessageId(messageElement);\n        messageElement.textContent = message;\n        if (role) {\n            messageElement.setAttribute('role', role);\n        }\n        this._createMessagesContainer();\n        messagesContainer.appendChild(messageElement);\n        messageRegistry.set(getKey(message, role), { messageElement, referenceCount: 0 });\n    }\n    /** Deletes the message element from the global messages container. */\n    _deleteMessageElement(key) {\n        const registeredMessage = messageRegistry.get(key);\n        const messageElement = registeredMessage && registeredMessage.messageElement;\n        if (messagesContainer && messageElement) {\n            messagesContainer.removeChild(messageElement);\n        }\n        messageRegistry.delete(key);\n    }\n    /** Creates the global container for all aria-describedby messages. */\n    _createMessagesContainer() {\n        if (!messagesContainer) {\n            const preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID);\n            // When going from the server to the client, we may end up in a situation where there's\n            // already a container on the page, but we don't have a reference to it. Clear the\n            // old container so we don't get duplicates. Doing this, instead of emptying the previous\n            // container, should be slightly faster.\n            if (preExistingContainer && preExistingContainer.parentNode) {\n                preExistingContainer.parentNode.removeChild(preExistingContainer);\n            }\n            messagesContainer = this._document.createElement('div');\n            messagesContainer.id = MESSAGES_CONTAINER_ID;\n            // We add `visibility: hidden` in order to prevent text in this container from\n            // being searchable by the browser's Ctrl + F functionality.\n            // Screen-readers will still read the description for elements with aria-describedby even\n            // when the description element is not visible.\n            messagesContainer.style.visibility = 'hidden';\n            // Even though we use `visibility: hidden`, we still apply `cdk-visually-hidden` so that\n            // the description element doesn't impact page layout.\n            messagesContainer.classList.add('cdk-visually-hidden');\n            this._document.body.appendChild(messagesContainer);\n        }\n    }\n    /** Deletes the global messages container. */\n    _deleteMessagesContainer() {\n        if (messagesContainer && messagesContainer.parentNode) {\n            messagesContainer.parentNode.removeChild(messagesContainer);\n            messagesContainer = null;\n        }\n    }\n    /** Removes all cdk-describedby messages that are hosted through the element. */\n    _removeCdkDescribedByReferenceIds(element) {\n        // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n        const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby')\n            .filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\n        element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n    }\n    /**\n     * Adds a message reference to the element using aria-describedby and increments the registered\n     * message's reference count.\n     */\n    _addMessageReference(element, key) {\n        const registeredMessage = messageRegistry.get(key);\n        // Add the aria-describedby reference and set the\n        // describedby_host attribute to mark the element.\n        addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n        registeredMessage.referenceCount++;\n    }\n    /**\n     * Removes a message reference from the element using aria-describedby\n     * and decrements the registered message's reference count.\n     */\n    _removeMessageReference(element, key) {\n        const registeredMessage = messageRegistry.get(key);\n        registeredMessage.referenceCount--;\n        removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n    /** Returns true if the element has been described by the provided message ID. */\n    _isElementDescribedByMessage(element, key) {\n        const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n        const registeredMessage = messageRegistry.get(key);\n        const messageId = registeredMessage && registeredMessage.messageElement.id;\n        return !!messageId && referenceIds.indexOf(messageId) != -1;\n    }\n    /** Determines whether a message can be described on a particular element. */\n    _canBeDescribed(element, message) {\n        if (!this._isElementNode(element)) {\n            return false;\n        }\n        if (message && typeof message === 'object') {\n            // We'd have to make some assumptions about the description element's text, if the consumer\n            // passed in an element. Assume that if an element is passed in, the consumer has verified\n            // that it can be used as a description.\n            return true;\n        }\n        const trimmedMessage = message == null ? '' : `${message}`.trim();\n        const ariaLabel = element.getAttribute('aria-label');\n        // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\n        // element, because screen readers will end up reading out the same text twice in a row.\n        return trimmedMessage ? (!ariaLabel || ariaLabel.trim() !== trimmedMessage) : false;\n    }\n    /** Checks whether a node is an Element node. */\n    _isElementNode(element) {\n        return element.nodeType === this._document.ELEMENT_NODE;\n    }\n}\nAriaDescriber.ɵfac = function AriaDescriber_Factory(t) { return new (t || AriaDescriber)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nAriaDescriber.ɵprov = i0.ɵɵdefineInjectable({ factory: function AriaDescriber_Factory() { return new AriaDescriber(i0.ɵɵinject(i2.DOCUMENT)); }, token: AriaDescriber, providedIn: \"root\" });\nAriaDescriber.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AriaDescriber, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/** Gets a key that can be used to look messages up in the registry. */\nfunction getKey(message, role) {\n    return typeof message === 'string' ? `${role || ''}/${message}` : message;\n}\n/** Assigns a unique ID to an element, if it doesn't have one already. */\nfunction setMessageId(element) {\n    if (!element.id) {\n        element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nclass ListKeyManager {\n    constructor(_items) {\n        this._items = _items;\n        this._activeItemIndex = -1;\n        this._activeItem = null;\n        this._wrap = false;\n        this._letterKeyStream = new Subject();\n        this._typeaheadSubscription = Subscription.EMPTY;\n        this._vertical = true;\n        this._allowedModifierKeys = [];\n        this._homeAndEnd = false;\n        /**\n         * Predicate function that can be used to check whether an item should be skipped\n         * by the key manager. By default, disabled items are skipped.\n         */\n        this._skipPredicateFn = (item) => item.disabled;\n        // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n        this._pressedLetters = [];\n        /**\n         * Stream that emits any time the TAB key is pressed, so components can react\n         * when focus is shifted off of the list.\n         */\n        this.tabOut = new Subject();\n        /** Stream that emits whenever the active item of the list manager changes. */\n        this.change = new Subject();\n        // We allow for the items to be an array because, in some cases, the consumer may\n        // not have access to a QueryList of the items they want to manage (e.g. when the\n        // items aren't being collected via `ViewChildren` or `ContentChildren`).\n        if (_items instanceof QueryList) {\n            _items.changes.subscribe((newItems) => {\n                if (this._activeItem) {\n                    const itemArray = newItems.toArray();\n                    const newIndex = itemArray.indexOf(this._activeItem);\n                    if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n                        this._activeItemIndex = newIndex;\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Sets the predicate function that determines which items should be skipped by the\n     * list key manager.\n     * @param predicate Function that determines whether the given item should be skipped.\n     */\n    skipPredicate(predicate) {\n        this._skipPredicateFn = predicate;\n        return this;\n    }\n    /**\n     * Configures wrapping mode, which determines whether the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     * @param shouldWrap Whether the list should wrap when reaching the end.\n     */\n    withWrap(shouldWrap = true) {\n        this._wrap = shouldWrap;\n        return this;\n    }\n    /**\n     * Configures whether the key manager should be able to move the selection vertically.\n     * @param enabled Whether vertical selection should be enabled.\n     */\n    withVerticalOrientation(enabled = true) {\n        this._vertical = enabled;\n        return this;\n    }\n    /**\n     * Configures the key manager to move the selection horizontally.\n     * Passing in `null` will disable horizontal movement.\n     * @param direction Direction in which the selection can be moved.\n     */\n    withHorizontalOrientation(direction) {\n        this._horizontal = direction;\n        return this;\n    }\n    /**\n     * Modifier keys which are allowed to be held down and whose default actions will be prevented\n     * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n     */\n    withAllowedModifierKeys(keys) {\n        this._allowedModifierKeys = keys;\n        return this;\n    }\n    /**\n     * Turns on typeahead mode which allows users to set the active item by typing.\n     * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n     */\n    withTypeAhead(debounceInterval = 200) {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && (this._items.length &&\n            this._items.some(item => typeof item.getLabel !== 'function'))) {\n            throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n        }\n        this._typeaheadSubscription.unsubscribe();\n        // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n        // and convert those letters back into a string. Afterwards find the first item that starts\n        // with that string and select it.\n        this._typeaheadSubscription = this._letterKeyStream.pipe(tap(letter => this._pressedLetters.push(letter)), debounceTime(debounceInterval), filter(() => this._pressedLetters.length > 0), map(() => this._pressedLetters.join(''))).subscribe(inputString => {\n            const items = this._getItemsArray();\n            // Start at 1 because we want to start searching at the item immediately\n            // following the current active item.\n            for (let i = 1; i < items.length + 1; i++) {\n                const index = (this._activeItemIndex + i) % items.length;\n                const item = items[index];\n                if (!this._skipPredicateFn(item) &&\n                    item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {\n                    this.setActiveItem(index);\n                    break;\n                }\n            }\n            this._pressedLetters = [];\n        });\n        return this;\n    }\n    /**\n     * Configures the key manager to activate the first and last items\n     * respectively when the Home or End key is pressed.\n     * @param enabled Whether pressing the Home or End key activates the first/last item.\n     */\n    withHomeAndEnd(enabled = true) {\n        this._homeAndEnd = enabled;\n        return this;\n    }\n    setActiveItem(item) {\n        const previousActiveItem = this._activeItem;\n        this.updateActiveItem(item);\n        if (this._activeItem !== previousActiveItem) {\n            this.change.next(this._activeItemIndex);\n        }\n    }\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param event Keyboard event to be used for determining which element should be active.\n     */\n    onKeydown(event) {\n        const keyCode = event.keyCode;\n        const modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n        const isModifierAllowed = modifiers.every(modifier => {\n            return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n        });\n        switch (keyCode) {\n            case TAB:\n                this.tabOut.next();\n                return;\n            case DOWN_ARROW:\n                if (this._vertical && isModifierAllowed) {\n                    this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case UP_ARROW:\n                if (this._vertical && isModifierAllowed) {\n                    this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case RIGHT_ARROW:\n                if (this._horizontal && isModifierAllowed) {\n                    this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case LEFT_ARROW:\n                if (this._horizontal && isModifierAllowed) {\n                    this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case HOME:\n                if (this._homeAndEnd && isModifierAllowed) {\n                    this.setFirstItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case END:\n                if (this._homeAndEnd && isModifierAllowed) {\n                    this.setLastItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            default:\n                if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n                    // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n                    // otherwise fall back to resolving alphanumeric characters via the keyCode.\n                    if (event.key && event.key.length === 1) {\n                        this._letterKeyStream.next(event.key.toLocaleUpperCase());\n                    }\n                    else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n                        this._letterKeyStream.next(String.fromCharCode(keyCode));\n                    }\n                }\n                // Note that we return here, in order to avoid preventing\n                // the default action of non-navigational keys.\n                return;\n        }\n        this._pressedLetters = [];\n        event.preventDefault();\n    }\n    /** Index of the currently active item. */\n    get activeItemIndex() {\n        return this._activeItemIndex;\n    }\n    /** The active item. */\n    get activeItem() {\n        return this._activeItem;\n    }\n    /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n    isTyping() {\n        return this._pressedLetters.length > 0;\n    }\n    /** Sets the active item to the first enabled item in the list. */\n    setFirstItemActive() {\n        this._setActiveItemByIndex(0, 1);\n    }\n    /** Sets the active item to the last enabled item in the list. */\n    setLastItemActive() {\n        this._setActiveItemByIndex(this._items.length - 1, -1);\n    }\n    /** Sets the active item to the next enabled item in the list. */\n    setNextItemActive() {\n        this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n    }\n    /** Sets the active item to a previous enabled item in the list. */\n    setPreviousItemActive() {\n        this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive()\n            : this._setActiveItemByDelta(-1);\n    }\n    updateActiveItem(item) {\n        const itemArray = this._getItemsArray();\n        const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n        const activeItem = itemArray[index];\n        // Explicitly check for `null` and `undefined` because other falsy values are valid.\n        this._activeItem = activeItem == null ? null : activeItem;\n        this._activeItemIndex = index;\n    }\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     */\n    _setActiveItemByDelta(delta) {\n        this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n    }\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     */\n    _setActiveInWrapMode(delta) {\n        const items = this._getItemsArray();\n        for (let i = 1; i <= items.length; i++) {\n            const index = (this._activeItemIndex + (delta * i) + items.length) % items.length;\n            const item = items[index];\n            if (!this._skipPredicateFn(item)) {\n                this.setActiveItem(index);\n                return;\n            }\n        }\n    }\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     */\n    _setActiveInDefaultMode(delta) {\n        this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n    }\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     */\n    _setActiveItemByIndex(index, fallbackDelta) {\n        const items = this._getItemsArray();\n        if (!items[index]) {\n            return;\n        }\n        while (this._skipPredicateFn(items[index])) {\n            index += fallbackDelta;\n            if (!items[index]) {\n                return;\n            }\n        }\n        this.setActiveItem(index);\n    }\n    /** Returns the items as an array. */\n    _getItemsArray() {\n        return this._items instanceof QueryList ? this._items.toArray() : this._items;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ActiveDescendantKeyManager extends ListKeyManager {\n    setActiveItem(index) {\n        if (this.activeItem) {\n            this.activeItem.setInactiveStyles();\n        }\n        super.setActiveItem(index);\n        if (this.activeItem) {\n            this.activeItem.setActiveStyles();\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass FocusKeyManager extends ListKeyManager {\n    constructor() {\n        super(...arguments);\n        this._origin = 'program';\n    }\n    /**\n     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n     * @param origin Focus origin to be used when focusing items.\n     */\n    setFocusOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    setActiveItem(item) {\n        super.setActiveItem(item);\n        if (this.activeItem) {\n            this.activeItem.focus(this._origin);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Configuration for the isFocusable method.\n */\nclass IsFocusableConfig {\n    constructor() {\n        /**\n         * Whether to count an element as focusable even if it is not currently visible.\n         */\n        this.ignoreVisibility = false;\n    }\n}\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\nclass InteractivityChecker {\n    constructor(_platform) {\n        this._platform = _platform;\n    }\n    /**\n     * Gets whether an element is disabled.\n     *\n     * @param element Element to be checked.\n     * @returns Whether the element is disabled.\n     */\n    isDisabled(element) {\n        // This does not capture some cases, such as a non-form control with a disabled attribute or\n        // a form control inside of a disabled form, but should capture the most common cases.\n        return element.hasAttribute('disabled');\n    }\n    /**\n     * Gets whether an element is visible for the purposes of interactivity.\n     *\n     * This will capture states like `display: none` and `visibility: hidden`, but not things like\n     * being clipped by an `overflow: hidden` parent or being outside the viewport.\n     *\n     * @returns Whether the element is visible.\n     */\n    isVisible(element) {\n        return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n    }\n    /**\n     * Gets whether an element can be reached via Tab key.\n     * Assumes that the element has already been checked with isFocusable.\n     *\n     * @param element Element to be checked.\n     * @returns Whether the element is tabbable.\n     */\n    isTabbable(element) {\n        // Nothing is tabbable on the server 😎\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n        const frameElement = getFrameElement(getWindow(element));\n        if (frameElement) {\n            // Frame elements inherit their tabindex onto all child elements.\n            if (getTabIndexValue(frameElement) === -1) {\n                return false;\n            }\n            // Browsers disable tabbing to an element inside of an invisible frame.\n            if (!this.isVisible(frameElement)) {\n                return false;\n            }\n        }\n        let nodeName = element.nodeName.toLowerCase();\n        let tabIndexValue = getTabIndexValue(element);\n        if (element.hasAttribute('contenteditable')) {\n            return tabIndexValue !== -1;\n        }\n        if (nodeName === 'iframe' || nodeName === 'object') {\n            // The frame or object's content may be tabbable depending on the content, but it's\n            // not possibly to reliably detect the content of the frames. We always consider such\n            // elements as non-tabbable.\n            return false;\n        }\n        // In iOS, the browser only considers some specific elements as tabbable.\n        if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n            return false;\n        }\n        if (nodeName === 'audio') {\n            // Audio elements without controls enabled are never tabbable, regardless\n            // of the tabindex attribute explicitly being set.\n            if (!element.hasAttribute('controls')) {\n                return false;\n            }\n            // Audio elements with controls are by default tabbable unless the\n            // tabindex attribute is set to `-1` explicitly.\n            return tabIndexValue !== -1;\n        }\n        if (nodeName === 'video') {\n            // For all video elements, if the tabindex attribute is set to `-1`, the video\n            // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`\n            // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The\n            // tabindex attribute is the source of truth here.\n            if (tabIndexValue === -1) {\n                return false;\n            }\n            // If the tabindex is explicitly set, and not `-1` (as per check before), the\n            // video element is always tabbable (regardless of whether it has controls or not).\n            if (tabIndexValue !== null) {\n                return true;\n            }\n            // Otherwise (when no explicit tabindex is set), a video is only tabbable if it\n            // has controls enabled. Firefox is special as videos are always tabbable regardless\n            // of whether there are controls or not.\n            return this._platform.FIREFOX || element.hasAttribute('controls');\n        }\n        return element.tabIndex >= 0;\n    }\n    /**\n     * Gets whether an element can be focused by the user.\n     *\n     * @param element Element to be checked.\n     * @param config The config object with options to customize this method's behavior\n     * @returns Whether the element is focusable.\n     */\n    isFocusable(element, config) {\n        // Perform checks in order of left to most expensive.\n        // Again, naive approach that does not capture many edge cases and browser quirks.\n        return isPotentiallyFocusable(element) && !this.isDisabled(element) &&\n            ((config === null || config === void 0 ? void 0 : config.ignoreVisibility) || this.isVisible(element));\n    }\n}\nInteractivityChecker.ɵfac = function InteractivityChecker_Factory(t) { return new (t || InteractivityChecker)(ɵngcc0.ɵɵinject(ɵngcc1.Platform)); };\nInteractivityChecker.ɵprov = i0.ɵɵdefineInjectable({ factory: function InteractivityChecker_Factory() { return new InteractivityChecker(i0.ɵɵinject(i1.Platform)); }, token: InteractivityChecker, providedIn: \"root\" });\nInteractivityChecker.ctorParameters = () => [\n    { type: Platform }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InteractivityChecker, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }]; }, null); })();\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n */\nfunction getFrameElement(window) {\n    try {\n        return window.frameElement;\n    }\n    catch (_a) {\n        return null;\n    }\n}\n/** Checks whether the specified element has any geometry / rectangles. */\nfunction hasGeometry(element) {\n    // Use logic from jQuery to check for an invisible element.\n    // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n    return !!(element.offsetWidth || element.offsetHeight ||\n        (typeof element.getClientRects === 'function' && element.getClientRects().length));\n}\n/** Gets whether an element's  */\nfunction isNativeFormElement(element) {\n    let nodeName = element.nodeName.toLowerCase();\n    return nodeName === 'input' ||\n        nodeName === 'select' ||\n        nodeName === 'button' ||\n        nodeName === 'textarea';\n}\n/** Gets whether an element is an `<input type=\"hidden\">`. */\nfunction isHiddenInput(element) {\n    return isInputElement(element) && element.type == 'hidden';\n}\n/** Gets whether an element is an anchor that has an href attribute. */\nfunction isAnchorWithHref(element) {\n    return isAnchorElement(element) && element.hasAttribute('href');\n}\n/** Gets whether an element is an input element. */\nfunction isInputElement(element) {\n    return element.nodeName.toLowerCase() == 'input';\n}\n/** Gets whether an element is an anchor element. */\nfunction isAnchorElement(element) {\n    return element.nodeName.toLowerCase() == 'a';\n}\n/** Gets whether an element has a valid tabindex. */\nfunction hasValidTabIndex(element) {\n    if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n        return false;\n    }\n    let tabIndex = element.getAttribute('tabindex');\n    // IE11 parses tabindex=\"\" as the value \"-32768\"\n    if (tabIndex == '-32768') {\n        return false;\n    }\n    return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n */\nfunction getTabIndexValue(element) {\n    if (!hasValidTabIndex(element)) {\n        return null;\n    }\n    // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n    const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n    return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/** Checks whether the specified element is potentially tabbable on iOS */\nfunction isPotentiallyTabbableIOS(element) {\n    let nodeName = element.nodeName.toLowerCase();\n    let inputType = nodeName === 'input' && element.type;\n    return inputType === 'text'\n        || inputType === 'password'\n        || nodeName === 'select'\n        || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n */\nfunction isPotentiallyFocusable(element) {\n    // Inputs are potentially focusable *unless* they're type=\"hidden\".\n    if (isHiddenInput(element)) {\n        return false;\n    }\n    return isNativeFormElement(element) ||\n        isAnchorWithHref(element) ||\n        element.hasAttribute('contenteditable') ||\n        hasValidTabIndex(element);\n}\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\nfunction getWindow(node) {\n    // ownerDocument is null if `node` itself *is* a document.\n    return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to be misaligned.\n *\n * @deprecated Use `ConfigurableFocusTrap` instead.\n * @breaking-change 11.0.0\n */\nclass FocusTrap {\n    constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {\n        this._element = _element;\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._hasAttached = false;\n        // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n        this.startAnchorListener = () => this.focusLastTabbableElement();\n        this.endAnchorListener = () => this.focusFirstTabbableElement();\n        this._enabled = true;\n        if (!deferAnchors) {\n            this.attachAnchors();\n        }\n    }\n    /** Whether the focus trap is active. */\n    get enabled() { return this._enabled; }\n    set enabled(value) {\n        this._enabled = value;\n        if (this._startAnchor && this._endAnchor) {\n            this._toggleAnchorTabIndex(value, this._startAnchor);\n            this._toggleAnchorTabIndex(value, this._endAnchor);\n        }\n    }\n    /** Destroys the focus trap by cleaning up the anchors. */\n    destroy() {\n        const startAnchor = this._startAnchor;\n        const endAnchor = this._endAnchor;\n        if (startAnchor) {\n            startAnchor.removeEventListener('focus', this.startAnchorListener);\n            if (startAnchor.parentNode) {\n                startAnchor.parentNode.removeChild(startAnchor);\n            }\n        }\n        if (endAnchor) {\n            endAnchor.removeEventListener('focus', this.endAnchorListener);\n            if (endAnchor.parentNode) {\n                endAnchor.parentNode.removeChild(endAnchor);\n            }\n        }\n        this._startAnchor = this._endAnchor = null;\n        this._hasAttached = false;\n    }\n    /**\n     * Inserts the anchors into the DOM. This is usually done automatically\n     * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n     * @returns Whether the focus trap managed to attach successfully. This may not be the case\n     * if the target element isn't currently in the DOM.\n     */\n    attachAnchors() {\n        // If we're not on the browser, there can be no focus to trap.\n        if (this._hasAttached) {\n            return true;\n        }\n        this._ngZone.runOutsideAngular(() => {\n            if (!this._startAnchor) {\n                this._startAnchor = this._createAnchor();\n                this._startAnchor.addEventListener('focus', this.startAnchorListener);\n            }\n            if (!this._endAnchor) {\n                this._endAnchor = this._createAnchor();\n                this._endAnchor.addEventListener('focus', this.endAnchorListener);\n            }\n        });\n        if (this._element.parentNode) {\n            this._element.parentNode.insertBefore(this._startAnchor, this._element);\n            this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);\n            this._hasAttached = true;\n        }\n        return this._hasAttached;\n    }\n    /**\n     * Waits for the zone to stabilize, then either focuses the first element that the\n     * user specified, or the first tabbable element.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n    focusInitialElementWhenReady(options) {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusInitialElement(options)));\n        });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the first tabbable element within the focus trap region.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n    focusFirstTabbableElementWhenReady(options) {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusFirstTabbableElement(options)));\n        });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the last tabbable element within the focus trap region.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n    focusLastTabbableElementWhenReady(options) {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusLastTabbableElement(options)));\n        });\n    }\n    /**\n     * Get the specified boundary element of the trapped region.\n     * @param bound The boundary to get (start or end of trapped region).\n     * @returns The boundary element.\n     */\n    _getRegionBoundary(bound) {\n        // Contains the deprecated version of selector, for temporary backwards comparability.\n        let markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` +\n            `[cdkFocusRegion${bound}], ` +\n            `[cdk-focus-${bound}]`);\n        for (let i = 0; i < markers.length; i++) {\n            // @breaking-change 8.0.0\n            if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` +\n                    `use 'cdkFocusRegion${bound}' instead. The deprecated ` +\n                    `attribute will be removed in 8.0.0.`, markers[i]);\n            }\n            else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` +\n                    `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` +\n                    `will be removed in 8.0.0.`, markers[i]);\n            }\n        }\n        if (bound == 'start') {\n            return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n        }\n        return markers.length ?\n            markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n    }\n    /**\n     * Focuses the element that should be focused when the focus trap is initialized.\n     * @returns Whether focus was moved successfully.\n     */\n    focusInitialElement(options) {\n        // Contains the deprecated version of selector, for temporary backwards comparability.\n        const redirectToElement = this._element.querySelector(`[cdk-focus-initial], ` +\n            `[cdkFocusInitial]`);\n        if (redirectToElement) {\n            // @breaking-change 8.0.0\n            if (redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` +\n                    `use 'cdkFocusInitial' instead. The deprecated attribute ` +\n                    `will be removed in 8.0.0`, redirectToElement);\n            }\n            // Warn the consumer if the element they've pointed to\n            // isn't focusable, when not in production mode.\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n                !this._checker.isFocusable(redirectToElement)) {\n                console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\n            }\n            if (!this._checker.isFocusable(redirectToElement)) {\n                const focusableChild = this._getFirstTabbableElement(redirectToElement);\n                focusableChild === null || focusableChild === void 0 ? void 0 : focusableChild.focus(options);\n                return !!focusableChild;\n            }\n            redirectToElement.focus(options);\n            return true;\n        }\n        return this.focusFirstTabbableElement(options);\n    }\n    /**\n     * Focuses the first tabbable element within the focus trap region.\n     * @returns Whether focus was moved successfully.\n     */\n    focusFirstTabbableElement(options) {\n        const redirectToElement = this._getRegionBoundary('start');\n        if (redirectToElement) {\n            redirectToElement.focus(options);\n        }\n        return !!redirectToElement;\n    }\n    /**\n     * Focuses the last tabbable element within the focus trap region.\n     * @returns Whether focus was moved successfully.\n     */\n    focusLastTabbableElement(options) {\n        const redirectToElement = this._getRegionBoundary('end');\n        if (redirectToElement) {\n            redirectToElement.focus(options);\n        }\n        return !!redirectToElement;\n    }\n    /**\n     * Checks whether the focus trap has successfully been attached.\n     */\n    hasAttached() {\n        return this._hasAttached;\n    }\n    /** Get the first tabbable element from a DOM subtree (inclusive). */\n    _getFirstTabbableElement(root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\n        // back to `childNodes` which includes text nodes, comments etc.\n        let children = root.children || root.childNodes;\n        for (let i = 0; i < children.length; i++) {\n            let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\n                this._getFirstTabbableElement(children[i]) :\n                null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    }\n    /** Get the last tabbable element from a DOM subtree (inclusive). */\n    _getLastTabbableElement(root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        // Iterate in reverse DOM order.\n        let children = root.children || root.childNodes;\n        for (let i = children.length - 1; i >= 0; i--) {\n            let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\n                this._getLastTabbableElement(children[i]) :\n                null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    }\n    /** Creates an anchor element. */\n    _createAnchor() {\n        const anchor = this._document.createElement('div');\n        this._toggleAnchorTabIndex(this._enabled, anchor);\n        anchor.classList.add('cdk-visually-hidden');\n        anchor.classList.add('cdk-focus-trap-anchor');\n        anchor.setAttribute('aria-hidden', 'true');\n        return anchor;\n    }\n    /**\n     * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n     * @param isEnabled Whether the focus trap is enabled.\n     * @param anchor Anchor on which to toggle the tabindex.\n     */\n    _toggleAnchorTabIndex(isEnabled, anchor) {\n        // Remove the tabindex completely, rather than setting it to -1, because if the\n        // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n        isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n    }\n    /**\n     * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\n     * @param enabled: Whether the anchors should trap Tab.\n     */\n    toggleAnchors(enabled) {\n        if (this._startAnchor && this._endAnchor) {\n            this._toggleAnchorTabIndex(enabled, this._startAnchor);\n            this._toggleAnchorTabIndex(enabled, this._endAnchor);\n        }\n    }\n    /** Executes a function when the zone is stable. */\n    _executeOnStable(fn) {\n        if (this._ngZone.isStable) {\n            fn();\n        }\n        else {\n            this._ngZone.onStable.pipe(take(1)).subscribe(fn);\n        }\n    }\n}\n/**\n * Factory that allows easy instantiation of focus traps.\n * @deprecated Use `ConfigurableFocusTrapFactory` instead.\n * @breaking-change 11.0.0\n */\nclass FocusTrapFactory {\n    constructor(_checker, _ngZone, _document) {\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._document = _document;\n    }\n    /**\n     * Creates a focus-trapped region around the given element.\n     * @param element The element around which focus will be trapped.\n     * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\n     *     manually by the user.\n     * @returns The created focus trap instance.\n     */\n    create(element, deferCaptureElements = false) {\n        return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n    }\n}\nFocusTrapFactory.ɵfac = function FocusTrapFactory_Factory(t) { return new (t || FocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nFocusTrapFactory.ɵprov = i0.ɵɵdefineInjectable({ factory: function FocusTrapFactory_Factory() { return new FocusTrapFactory(i0.ɵɵinject(InteractivityChecker), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.DOCUMENT)); }, token: FocusTrapFactory, providedIn: \"root\" });\nFocusTrapFactory.ctorParameters = () => [\n    { type: InteractivityChecker },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusTrapFactory, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: InteractivityChecker }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/** Directive for trapping focus within a region. */\nclass CdkTrapFocus {\n    constructor(_elementRef, _focusTrapFactory, \n    /**\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 13.0.0\n     */\n    _document) {\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n        this._previouslyFocusedElement = null;\n        this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n    }\n    /** Whether the focus trap is active. */\n    get enabled() { return this.focusTrap.enabled; }\n    set enabled(value) { this.focusTrap.enabled = coerceBooleanProperty(value); }\n    /**\n     * Whether the directive should automatically move focus into the trapped region upon\n     * initialization and return focus to the previous activeElement upon destruction.\n     */\n    get autoCapture() { return this._autoCapture; }\n    set autoCapture(value) { this._autoCapture = coerceBooleanProperty(value); }\n    ngOnDestroy() {\n        this.focusTrap.destroy();\n        // If we stored a previously focused element when using autoCapture, return focus to that\n        // element now that the trapped region is being destroyed.\n        if (this._previouslyFocusedElement) {\n            this._previouslyFocusedElement.focus();\n            this._previouslyFocusedElement = null;\n        }\n    }\n    ngAfterContentInit() {\n        this.focusTrap.attachAnchors();\n        if (this.autoCapture) {\n            this._captureFocus();\n        }\n    }\n    ngDoCheck() {\n        if (!this.focusTrap.hasAttached()) {\n            this.focusTrap.attachAnchors();\n        }\n    }\n    ngOnChanges(changes) {\n        const autoCaptureChange = changes['autoCapture'];\n        if (autoCaptureChange && !autoCaptureChange.firstChange && this.autoCapture &&\n            this.focusTrap.hasAttached()) {\n            this._captureFocus();\n        }\n    }\n    _captureFocus() {\n        this._previouslyFocusedElement = _getFocusedElementPierceShadowDom();\n        this.focusTrap.focusInitialElementWhenReady();\n    }\n}\nCdkTrapFocus.ɵfac = function CdkTrapFocus_Factory(t) { return new (t || CdkTrapFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nCdkTrapFocus.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTrapFocus, selectors: [[\"\", \"cdkTrapFocus\", \"\"]], inputs: { enabled: [\"cdkTrapFocus\", \"enabled\"], autoCapture: [\"cdkTrapFocusAutoCapture\", \"autoCapture\"] }, exportAs: [\"cdkTrapFocus\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkTrapFocus.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusTrapFactory },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nCdkTrapFocus.propDecorators = {\n    enabled: [{ type: Input, args: ['cdkTrapFocus',] }],\n    autoCapture: [{ type: Input, args: ['cdkTrapFocusAutoCapture',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTrapFocus, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTrapFocus]',\n                exportAs: 'cdkTrapFocus'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: FocusTrapFactory }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { enabled: [{\n            type: Input,\n            args: ['cdkTrapFocus']\n        }], autoCapture: [{\n            type: Input,\n            args: ['cdkTrapFocusAutoCapture']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class uses a strategy pattern that determines how it traps focus.\n * See FocusTrapInertStrategy.\n */\nclass ConfigurableFocusTrap extends FocusTrap {\n    constructor(_element, _checker, _ngZone, _document, _focusTrapManager, _inertStrategy, config) {\n        super(_element, _checker, _ngZone, _document, config.defer);\n        this._focusTrapManager = _focusTrapManager;\n        this._inertStrategy = _inertStrategy;\n        this._focusTrapManager.register(this);\n    }\n    /** Whether the FocusTrap is enabled. */\n    get enabled() { return this._enabled; }\n    set enabled(value) {\n        this._enabled = value;\n        if (this._enabled) {\n            this._focusTrapManager.register(this);\n        }\n        else {\n            this._focusTrapManager.deregister(this);\n        }\n    }\n    /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */\n    destroy() {\n        this._focusTrapManager.deregister(this);\n        super.destroy();\n    }\n    /** @docs-private Implemented as part of ManagedFocusTrap. */\n    _enable() {\n        this._inertStrategy.preventFocus(this);\n        this.toggleAnchors(true);\n    }\n    /** @docs-private Implemented as part of ManagedFocusTrap. */\n    _disable() {\n        this._inertStrategy.allowFocus(this);\n        this.toggleAnchors(false);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the inert strategy. */\nconst FOCUS_TRAP_INERT_STRATEGY = new InjectionToken('FOCUS_TRAP_INERT_STRATEGY');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** IE 11 compatible closest implementation that is able to start from non-Element Nodes. */\nfunction closest(element, selector) {\n    if (!(element instanceof Node)) {\n        return null;\n    }\n    let curr = element;\n    while (curr != null && !(curr instanceof Element)) {\n        curr = curr.parentNode;\n    }\n    return curr && (hasNativeClosest ?\n        curr.closest(selector) : polyfillClosest(curr, selector));\n}\n/** Polyfill for browsers without Element.closest. */\nfunction polyfillClosest(element, selector) {\n    let curr = element;\n    while (curr != null && !(curr instanceof Element && matches(curr, selector))) {\n        curr = curr.parentNode;\n    }\n    return (curr || null);\n}\nconst hasNativeClosest = typeof Element != 'undefined' && !!Element.prototype.closest;\n/** IE 11 compatible matches implementation. */\nfunction matches(element, selector) {\n    return element.matches ?\n        element.matches(selector) :\n        element['msMatchesSelector'](selector);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Lightweight FocusTrapInertStrategy that adds a document focus event\n * listener to redirect focus back inside the FocusTrap.\n */\nclass EventListenerFocusTrapInertStrategy {\n    constructor() {\n        /** Focus event handler. */\n        this._listener = null;\n    }\n    /** Adds a document event listener that keeps focus inside the FocusTrap. */\n    preventFocus(focusTrap) {\n        // Ensure there's only one listener per document\n        if (this._listener) {\n            focusTrap._document.removeEventListener('focus', this._listener, true);\n        }\n        this._listener = (e) => this._trapFocus(focusTrap, e);\n        focusTrap._ngZone.runOutsideAngular(() => {\n            focusTrap._document.addEventListener('focus', this._listener, true);\n        });\n    }\n    /** Removes the event listener added in preventFocus. */\n    allowFocus(focusTrap) {\n        if (!this._listener) {\n            return;\n        }\n        focusTrap._document.removeEventListener('focus', this._listener, true);\n        this._listener = null;\n    }\n    /**\n     * Refocuses the first element in the FocusTrap if the focus event target was outside\n     * the FocusTrap.\n     *\n     * This is an event listener callback. The event listener is added in runOutsideAngular,\n     * so all this code runs outside Angular as well.\n     */\n    _trapFocus(focusTrap, event) {\n        const target = event.target;\n        const focusTrapRoot = focusTrap._element;\n        // Don't refocus if target was in an overlay, because the overlay might be associated\n        // with an element inside the FocusTrap, ex. mat-select.\n        if (!focusTrapRoot.contains(target) && closest(target, 'div.cdk-overlay-pane') === null) {\n            // Some legacy FocusTrap usages have logic that focuses some element on the page\n            // just before FocusTrap is destroyed. For backwards compatibility, wait\n            // to be sure FocusTrap is still enabled before refocusing.\n            setTimeout(() => {\n                // Check whether focus wasn't put back into the focus trap while the timeout was pending.\n                if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {\n                    focusTrap.focusFirstTabbableElement();\n                }\n            });\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injectable that ensures only the most recently enabled FocusTrap is active. */\nclass FocusTrapManager {\n    constructor() {\n        // A stack of the FocusTraps on the page. Only the FocusTrap at the\n        // top of the stack is active.\n        this._focusTrapStack = [];\n    }\n    /**\n     * Disables the FocusTrap at the top of the stack, and then pushes\n     * the new FocusTrap onto the stack.\n     */\n    register(focusTrap) {\n        // Dedupe focusTraps that register multiple times.\n        this._focusTrapStack = this._focusTrapStack.filter((ft) => ft !== focusTrap);\n        let stack = this._focusTrapStack;\n        if (stack.length) {\n            stack[stack.length - 1]._disable();\n        }\n        stack.push(focusTrap);\n        focusTrap._enable();\n    }\n    /**\n     * Removes the FocusTrap from the stack, and activates the\n     * FocusTrap that is the new top of the stack.\n     */\n    deregister(focusTrap) {\n        focusTrap._disable();\n        const stack = this._focusTrapStack;\n        const i = stack.indexOf(focusTrap);\n        if (i !== -1) {\n            stack.splice(i, 1);\n            if (stack.length) {\n                stack[stack.length - 1]._enable();\n            }\n        }\n    }\n}\nFocusTrapManager.ɵfac = function FocusTrapManager_Factory(t) { return new (t || FocusTrapManager)(); };\nFocusTrapManager.ɵprov = i0.ɵɵdefineInjectable({ factory: function FocusTrapManager_Factory() { return new FocusTrapManager(); }, token: FocusTrapManager, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusTrapManager, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return []; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Factory that allows easy instantiation of configurable focus traps. */\nclass ConfigurableFocusTrapFactory {\n    constructor(_checker, _ngZone, _focusTrapManager, _document, _inertStrategy) {\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._focusTrapManager = _focusTrapManager;\n        this._document = _document;\n        // TODO split up the strategies into different modules, similar to DateAdapter.\n        this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();\n    }\n    create(element, config = { defer: false }) {\n        let configObject;\n        if (typeof config === 'boolean') {\n            configObject = { defer: config };\n        }\n        else {\n            configObject = config;\n        }\n        return new ConfigurableFocusTrap(element, this._checker, this._ngZone, this._document, this._focusTrapManager, this._inertStrategy, configObject);\n    }\n}\nConfigurableFocusTrapFactory.ɵfac = function ConfigurableFocusTrapFactory_Factory(t) { return new (t || ConfigurableFocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(FocusTrapManager), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(FOCUS_TRAP_INERT_STRATEGY, 8)); };\nConfigurableFocusTrapFactory.ɵprov = i0.ɵɵdefineInjectable({ factory: function ConfigurableFocusTrapFactory_Factory() { return new ConfigurableFocusTrapFactory(i0.ɵɵinject(InteractivityChecker), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(FocusTrapManager), i0.ɵɵinject(i2.DOCUMENT), i0.ɵɵinject(FOCUS_TRAP_INERT_STRATEGY, 8)); }, token: ConfigurableFocusTrapFactory, providedIn: \"root\" });\nConfigurableFocusTrapFactory.ctorParameters = () => [\n    { type: InteractivityChecker },\n    { type: NgZone },\n    { type: FocusTrapManager },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [FOCUS_TRAP_INERT_STRATEGY,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ConfigurableFocusTrapFactory, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: InteractivityChecker }, { type: ɵngcc0.NgZone }, { type: FocusTrapManager }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [FOCUS_TRAP_INERT_STRATEGY]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Gets whether an event could be a faked `mousedown` event dispatched by a screen reader. */\nfunction isFakeMousedownFromScreenReader(event) {\n    // Some screen readers will dispatch a fake `mousedown` event when pressing enter or space on\n    // a clickable element. We can distinguish these events when both `offsetX` and `offsetY` are\n    // zero. Note that there's an edge case where the user could click the 0x0 spot of the screen\n    // themselves, but that is unlikely to contain interaction elements. Historially we used to check\n    // `event.buttons === 0`, however that no longer works on recent versions of NVDA.\n    return event.offsetX === 0 && event.offsetY === 0;\n}\n/** Gets whether an event could be a faked `touchstart` event dispatched by a screen reader. */\nfunction isFakeTouchstartFromScreenReader(event) {\n    const touch = (event.touches && event.touches[0]) ||\n        (event.changedTouches && event.changedTouches[0]);\n    // A fake `touchstart` can be distinguished from a real one by looking at the `identifier`\n    // which is typically >= 0 on a real device versus -1 from a screen reader. Just to be safe,\n    // we can also look at `radiusX` and `radiusY`. This behavior was observed against a Windows 10\n    // device with a touch screen running NVDA v2020.4 and Firefox 85 or Chrome 88.\n    return !!touch && touch.identifier === -1 && (touch.radiusX == null || touch.radiusX === 1) &&\n        (touch.radiusY == null || touch.radiusY === 1);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injectable options for the InputModalityDetector. These are shallowly merged with the default\n * options.\n */\nconst INPUT_MODALITY_DETECTOR_OPTIONS = new InjectionToken('cdk-input-modality-detector-options');\n/**\n * Default options for the InputModalityDetector.\n *\n * Modifier keys are ignored by default (i.e. when pressed won't cause the service to detect\n * keyboard input modality) for two reasons:\n *\n * 1. Modifier keys are commonly used with mouse to perform actions such as 'right click' or 'open\n *    in new tab', and are thus less representative of actual keyboard interaction.\n * 2. VoiceOver triggers some keyboard events when linearly navigating with Control + Option (but\n *    confusingly not with Caps Lock). Thus, to have parity with other screen readers, we ignore\n *    these keys so as to not update the input modality.\n *\n * Note that we do not by default ignore the right Meta key on Safari because it has the same key\n * code as the ContextMenu key on other browsers. When we switch to using event.key, we can\n * distinguish between the two.\n */\nconst INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS = {\n    ignoreKeys: [ALT, CONTROL, MAC_META, META, SHIFT],\n};\n/**\n * The amount of time needed to pass after a touchstart event in order for a subsequent mousedown\n * event to be attributed as mouse and not touch.\n *\n * This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n * that a value of around 650ms seems appropriate.\n */\nconst TOUCH_BUFFER_MS = 650;\n/**\n * Event listener options that enable capturing and also mark the listener as passive if the browser\n * supports it.\n */\nconst modalityEventListenerOptions = normalizePassiveListenerOptions({\n    passive: true,\n    capture: true,\n});\n/**\n * Service that detects the user's input modality.\n *\n * This service does not update the input modality when a user navigates with a screen reader\n * (e.g. linear navigation with VoiceOver, object navigation / browse mode with NVDA, virtual PC\n * cursor mode with JAWS). This is in part due to technical limitations (i.e. keyboard events do not\n * fire as expected in these modes) but is also arguably the correct behavior. Navigating with a\n * screen reader is akin to visually scanning a page, and should not be interpreted as actual user\n * input interaction.\n *\n * When a user is not navigating but *interacting* with a screen reader, this service attempts to\n * update the input modality to keyboard, but in general this service's behavior is largely\n * undefined.\n */\nclass InputModalityDetector {\n    constructor(_platform, ngZone, document, options) {\n        this._platform = _platform;\n        /**\n         * The most recently detected input modality event target. Is null if no input modality has been\n         * detected or if the associated event target is null for some unknown reason.\n         */\n        this._mostRecentTarget = null;\n        /** The underlying BehaviorSubject that emits whenever an input modality is detected. */\n        this._modality = new BehaviorSubject(null);\n        /**\n         * The timestamp of the last touch input modality. Used to determine whether mousedown events\n         * should be attributed to mouse or touch.\n         */\n        this._lastTouchMs = 0;\n        /**\n         * Handles keydown events. Must be an arrow function in order to preserve the context when it gets\n         * bound.\n         */\n        this._onKeydown = (event) => {\n            var _a, _b;\n            // If this is one of the keys we should ignore, then ignore it and don't update the input\n            // modality to keyboard.\n            if ((_b = (_a = this._options) === null || _a === void 0 ? void 0 : _a.ignoreKeys) === null || _b === void 0 ? void 0 : _b.some(keyCode => keyCode === event.keyCode)) {\n                return;\n            }\n            this._modality.next('keyboard');\n            this._mostRecentTarget = _getEventTarget(event);\n        };\n        /**\n         * Handles mousedown events. Must be an arrow function in order to preserve the context when it\n         * gets bound.\n         */\n        this._onMousedown = (event) => {\n            // Touches trigger both touch and mouse events, so we need to distinguish between mouse events\n            // that were triggered via mouse vs touch. To do so, check if the mouse event occurs closely\n            // after the previous touch event.\n            if (Date.now() - this._lastTouchMs < TOUCH_BUFFER_MS) {\n                return;\n            }\n            // Fake mousedown events are fired by some screen readers when controls are activated by the\n            // screen reader. Attribute them to keyboard input modality.\n            this._modality.next(isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse');\n            this._mostRecentTarget = _getEventTarget(event);\n        };\n        /**\n         * Handles touchstart events. Must be an arrow function in order to preserve the context when it\n         * gets bound.\n         */\n        this._onTouchstart = (event) => {\n            // Same scenario as mentioned in _onMousedown, but on touch screen devices, fake touchstart\n            // events are fired. Again, attribute to keyboard input modality.\n            if (isFakeTouchstartFromScreenReader(event)) {\n                this._modality.next('keyboard');\n                return;\n            }\n            // Store the timestamp of this touch event, as it's used to distinguish between mouse events\n            // triggered via mouse vs touch.\n            this._lastTouchMs = Date.now();\n            this._modality.next('touch');\n            this._mostRecentTarget = _getEventTarget(event);\n        };\n        this._options = Object.assign(Object.assign({}, INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS), options);\n        // Skip the first emission as it's null.\n        this.modalityDetected = this._modality.pipe(skip(1));\n        this.modalityChanged = this.modalityDetected.pipe(distinctUntilChanged());\n        // If we're not in a browser, this service should do nothing, as there's no relevant input\n        // modality to detect.\n        if (_platform.isBrowser) {\n            ngZone.runOutsideAngular(() => {\n                document.addEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\n                document.addEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\n                document.addEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\n            });\n        }\n    }\n    /** The most recently detected input modality. */\n    get mostRecentModality() {\n        return this._modality.value;\n    }\n    ngOnDestroy() {\n        this._modality.complete();\n        if (this._platform.isBrowser) {\n            document.removeEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\n            document.removeEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\n            document.removeEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\n        }\n    }\n}\nInputModalityDetector.ɵfac = function InputModalityDetector_Factory(t) { return new (t || InputModalityDetector)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(INPUT_MODALITY_DETECTOR_OPTIONS, 8)); };\nInputModalityDetector.ɵprov = i0.ɵɵdefineInjectable({ factory: function InputModalityDetector_Factory() { return new InputModalityDetector(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.DOCUMENT), i0.ɵɵinject(INPUT_MODALITY_DETECTOR_OPTIONS, 8)); }, token: InputModalityDetector, providedIn: \"root\" });\nInputModalityDetector.ctorParameters = () => [\n    { type: Platform },\n    { type: NgZone },\n    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [INPUT_MODALITY_DETECTOR_OPTIONS,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InputModalityDetector, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }, { type: Document, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [INPUT_MODALITY_DETECTOR_OPTIONS]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken('liveAnnouncerElement', {\n    providedIn: 'root',\n    factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY,\n});\n/** @docs-private */\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n    return null;\n}\n/** Injection token that can be used to configure the default options for the LiveAnnouncer. */\nconst LIVE_ANNOUNCER_DEFAULT_OPTIONS = new InjectionToken('LIVE_ANNOUNCER_DEFAULT_OPTIONS');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass LiveAnnouncer {\n    constructor(elementToken, _ngZone, _document, _defaultOptions) {\n        this._ngZone = _ngZone;\n        this._defaultOptions = _defaultOptions;\n        // We inject the live element and document as `any` because the constructor signature cannot\n        // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n        // a class decorator causes TypeScript to preserve the constructor signature types.\n        this._document = _document;\n        this._liveElement = elementToken || this._createLiveElement();\n    }\n    announce(message, ...args) {\n        const defaultOptions = this._defaultOptions;\n        let politeness;\n        let duration;\n        if (args.length === 1 && typeof args[0] === 'number') {\n            duration = args[0];\n        }\n        else {\n            [politeness, duration] = args;\n        }\n        this.clear();\n        clearTimeout(this._previousTimeout);\n        if (!politeness) {\n            politeness =\n                (defaultOptions && defaultOptions.politeness) ? defaultOptions.politeness : 'polite';\n        }\n        if (duration == null && defaultOptions) {\n            duration = defaultOptions.duration;\n        }\n        // TODO: ensure changing the politeness works on all environments we support.\n        this._liveElement.setAttribute('aria-live', politeness);\n        // This 100ms timeout is necessary for some browser + screen-reader combinations:\n        // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n        // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n        //   second time without clearing and then using a non-zero delay.\n        // (using JAWS 17 at time of this writing).\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                clearTimeout(this._previousTimeout);\n                this._previousTimeout = setTimeout(() => {\n                    this._liveElement.textContent = message;\n                    resolve();\n                    if (typeof duration === 'number') {\n                        this._previousTimeout = setTimeout(() => this.clear(), duration);\n                    }\n                }, 100);\n            });\n        });\n    }\n    /**\n     * Clears the current text from the announcer element. Can be used to prevent\n     * screen readers from reading the text out again while the user is going\n     * through the page landmarks.\n     */\n    clear() {\n        if (this._liveElement) {\n            this._liveElement.textContent = '';\n        }\n    }\n    ngOnDestroy() {\n        clearTimeout(this._previousTimeout);\n        if (this._liveElement && this._liveElement.parentNode) {\n            this._liveElement.parentNode.removeChild(this._liveElement);\n            this._liveElement = null;\n        }\n    }\n    _createLiveElement() {\n        const elementClass = 'cdk-live-announcer-element';\n        const previousElements = this._document.getElementsByClassName(elementClass);\n        const liveEl = this._document.createElement('div');\n        // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n        for (let i = 0; i < previousElements.length; i++) {\n            previousElements[i].parentNode.removeChild(previousElements[i]);\n        }\n        liveEl.classList.add(elementClass);\n        liveEl.classList.add('cdk-visually-hidden');\n        liveEl.setAttribute('aria-atomic', 'true');\n        liveEl.setAttribute('aria-live', 'polite');\n        this._document.body.appendChild(liveEl);\n        return liveEl;\n    }\n}\nLiveAnnouncer.ɵfac = function LiveAnnouncer_Factory(t) { return new (t || LiveAnnouncer)(ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8)); };\nLiveAnnouncer.ɵprov = i0.ɵɵdefineInjectable({ factory: function LiveAnnouncer_Factory() { return new LiveAnnouncer(i0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.DOCUMENT), i0.ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8)); }, token: LiveAnnouncer, providedIn: \"root\" });\nLiveAnnouncer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIVE_ANNOUNCER_ELEMENT_TOKEN,] }] },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LiveAnnouncer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\nclass CdkAriaLive {\n    constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n        this._elementRef = _elementRef;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._contentObserver = _contentObserver;\n        this._ngZone = _ngZone;\n        this._politeness = 'polite';\n    }\n    /** The aria-live politeness level to use when announcing messages. */\n    get politeness() { return this._politeness; }\n    set politeness(value) {\n        this._politeness = value === 'off' || value === 'assertive' ? value : 'polite';\n        if (this._politeness === 'off') {\n            if (this._subscription) {\n                this._subscription.unsubscribe();\n                this._subscription = null;\n            }\n        }\n        else if (!this._subscription) {\n            this._subscription = this._ngZone.runOutsideAngular(() => {\n                return this._contentObserver\n                    .observe(this._elementRef)\n                    .subscribe(() => {\n                    // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n                    const elementText = this._elementRef.nativeElement.textContent;\n                    // The `MutationObserver` fires also for attribute\n                    // changes which we don't want to announce.\n                    if (elementText !== this._previousAnnouncedText) {\n                        this._liveAnnouncer.announce(elementText, this._politeness);\n                        this._previousAnnouncedText = elementText;\n                    }\n                });\n            });\n        }\n    }\n    ngOnDestroy() {\n        if (this._subscription) {\n            this._subscription.unsubscribe();\n        }\n    }\n}\nCdkAriaLive.ɵfac = function CdkAriaLive_Factory(t) { return new (t || CdkAriaLive)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nCdkAriaLive.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkAriaLive, selectors: [[\"\", \"cdkAriaLive\", \"\"]], inputs: { politeness: [\"cdkAriaLive\", \"politeness\"] }, exportAs: [\"cdkAriaLive\"] });\nCdkAriaLive.ctorParameters = () => [\n    { type: ElementRef },\n    { type: LiveAnnouncer },\n    { type: ContentObserver },\n    { type: NgZone }\n];\nCdkAriaLive.propDecorators = {\n    politeness: [{ type: Input, args: ['cdkAriaLive',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAriaLive, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkAriaLive]',\n                exportAs: 'cdkAriaLive'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: LiveAnnouncer }, { type: ɵngcc2.ContentObserver }, { type: ɵngcc0.NgZone }]; }, { politeness: [{\n            type: Input,\n            args: ['cdkAriaLive']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** InjectionToken for FocusMonitorOptions. */\nconst FOCUS_MONITOR_DEFAULT_OPTIONS = new InjectionToken('cdk-focus-monitor-default-options');\n/**\n * Event listener options that enable capturing and also\n * mark the listener as passive if the browser supports it.\n */\nconst captureEventListenerOptions = normalizePassiveListenerOptions({\n    passive: true,\n    capture: true\n});\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\nclass FocusMonitor {\n    constructor(_ngZone, _platform, _inputModalityDetector, \n    /** @breaking-change 11.0.0 make document required */\n    document, options) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._inputModalityDetector = _inputModalityDetector;\n        /** The focus origin that the next focus event is a result of. */\n        this._origin = null;\n        /** Whether the window has just been focused. */\n        this._windowFocused = false;\n        /**\n         * Whether the origin was determined via a touch interaction. Necessary as properly attributing\n         * focus events to touch interactions requires special logic.\n         */\n        this._originFromTouchInteraction = false;\n        /** Map of elements being monitored to their info. */\n        this._elementInfo = new Map();\n        /** The number of elements currently being monitored. */\n        this._monitoredElementCount = 0;\n        /**\n         * Keeps track of the root nodes to which we've currently bound a focus/blur handler,\n         * as well as the number of monitored elements that they contain. We have to treat focus/blur\n         * handlers differently from the rest of the events, because the browser won't emit events\n         * to the document when focus moves inside of a shadow root.\n         */\n        this._rootNodeFocusListenerCount = new Map();\n        /**\n         * Event listener for `focus` events on the window.\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\n         */\n        this._windowFocusListener = () => {\n            // Make a note of when the window regains focus, so we can\n            // restore the origin info for the focused element.\n            this._windowFocused = true;\n            this._windowFocusTimeoutId = setTimeout(() => this._windowFocused = false);\n        };\n        /** Subject for stopping our InputModalityDetector subscription. */\n        this._stopInputModalityDetector = new Subject();\n        /**\n         * Event listener for `focus` and 'blur' events on the document.\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\n         */\n        this._rootNodeFocusAndBlurListener = (event) => {\n            const target = _getEventTarget(event);\n            const handler = event.type === 'focus' ? this._onFocus : this._onBlur;\n            // We need to walk up the ancestor chain in order to support `checkChildren`.\n            for (let element = target; element; element = element.parentElement) {\n                handler.call(this, event, element);\n            }\n        };\n        this._document = document;\n        this._detectionMode = (options === null || options === void 0 ? void 0 : options.detectionMode) || 0 /* IMMEDIATE */;\n    }\n    monitor(element, checkChildren = false) {\n        const nativeElement = coerceElement(element);\n        // Do nothing if we're not on the browser platform or the passed in node isn't an element.\n        if (!this._platform.isBrowser || nativeElement.nodeType !== 1) {\n            return of(null);\n        }\n        // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to\n        // the shadow root, rather than the `document`, because the browser won't emit focus events\n        // to the `document`, if focus is moving within the same shadow root.\n        const rootNode = _getShadowRoot(nativeElement) || this._getDocument();\n        const cachedInfo = this._elementInfo.get(nativeElement);\n        // Check if we're already monitoring this element.\n        if (cachedInfo) {\n            if (checkChildren) {\n                // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren\n                // observers into ones that behave as if `checkChildren` was turned on. We need a more\n                // robust solution.\n                cachedInfo.checkChildren = true;\n            }\n            return cachedInfo.subject;\n        }\n        // Create monitored element info.\n        const info = {\n            checkChildren: checkChildren,\n            subject: new Subject(),\n            rootNode\n        };\n        this._elementInfo.set(nativeElement, info);\n        this._registerGlobalListeners(info);\n        return info.subject;\n    }\n    stopMonitoring(element) {\n        const nativeElement = coerceElement(element);\n        const elementInfo = this._elementInfo.get(nativeElement);\n        if (elementInfo) {\n            elementInfo.subject.complete();\n            this._setClasses(nativeElement);\n            this._elementInfo.delete(nativeElement);\n            this._removeGlobalListeners(elementInfo);\n        }\n    }\n    focusVia(element, origin, options) {\n        const nativeElement = coerceElement(element);\n        const focusedElement = this._getDocument().activeElement;\n        // If the element is focused already, calling `focus` again won't trigger the event listener\n        // which means that the focus classes won't be updated. If that's the case, update the classes\n        // directly without waiting for an event.\n        if (nativeElement === focusedElement) {\n            this._getClosestElementsInfo(nativeElement)\n                .forEach(([currentElement, info]) => this._originChanged(currentElement, origin, info));\n        }\n        else {\n            this._setOrigin(origin);\n            // `focus` isn't available on the server\n            if (typeof nativeElement.focus === 'function') {\n                nativeElement.focus(options);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    _toggleClass(element, className, shouldSet) {\n        if (shouldSet) {\n            element.classList.add(className);\n        }\n        else {\n            element.classList.remove(className);\n        }\n    }\n    _getFocusOrigin(focusEventTarget) {\n        if (this._origin) {\n            // If the origin was realized via a touch interaction, we need to perform additional checks\n            // to determine whether the focus origin should be attributed to touch or program.\n            if (this._originFromTouchInteraction) {\n                return this._shouldBeAttributedToTouch(focusEventTarget) ? 'touch' : 'program';\n            }\n            else {\n                return this._origin;\n            }\n        }\n        // If the window has just regained focus, we can restore the most recent origin from before the\n        // window blurred. Otherwise, we've reached the point where we can't identify the source of the\n        // focus. This typically means one of two things happened:\n        //\n        // 1) The element was programmatically focused, or\n        // 2) The element was focused via screen reader navigation (which generally doesn't fire\n        //    events).\n        //\n        // Because we can't distinguish between these two cases, we default to setting `program`.\n        return (this._windowFocused && this._lastFocusOrigin) ? this._lastFocusOrigin : 'program';\n    }\n    /**\n     * Returns whether the focus event should be attributed to touch. Recall that in IMMEDIATE mode, a\n     * touch origin isn't immediately reset at the next tick (see _setOrigin). This means that when we\n     * handle a focus event following a touch interaction, we need to determine whether (1) the focus\n     * event was directly caused by the touch interaction or (2) the focus event was caused by a\n     * subsequent programmatic focus call triggered by the touch interaction.\n     * @param focusEventTarget The target of the focus event under examination.\n     */\n    _shouldBeAttributedToTouch(focusEventTarget) {\n        // Please note that this check is not perfect. Consider the following edge case:\n        //\n        // <div #parent tabindex=\"0\">\n        //   <div #child tabindex=\"0\" (click)=\"#parent.focus()\"></div>\n        // </div>\n        //\n        // Suppose there is a FocusMonitor in IMMEDIATE mode attached to #parent. When the user touches\n        // #child, #parent is programmatically focused. This code will attribute the focus to touch\n        // instead of program. This is a relatively minor edge-case that can be worked around by using\n        // focusVia(parent, 'program') to focus #parent.\n        return (this._detectionMode === 1 /* EVENTUAL */) ||\n            !!(focusEventTarget === null || focusEventTarget === void 0 ? void 0 : focusEventTarget.contains(this._inputModalityDetector._mostRecentTarget));\n    }\n    /**\n     * Sets the focus classes on the element based on the given focus origin.\n     * @param element The element to update the classes on.\n     * @param origin The focus origin.\n     */\n    _setClasses(element, origin) {\n        this._toggleClass(element, 'cdk-focused', !!origin);\n        this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n        this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n        this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n        this._toggleClass(element, 'cdk-program-focused', origin === 'program');\n    }\n    /**\n     * Updates the focus origin. If we're using immediate detection mode, we schedule an async\n     * function to clear the origin at the end of a timeout. The duration of the timeout depends on\n     * the origin being set.\n     * @param origin The origin to set.\n     * @param isFromInteraction Whether we are setting the origin from an interaction event.\n     */\n    _setOrigin(origin, isFromInteraction = false) {\n        this._ngZone.runOutsideAngular(() => {\n            this._origin = origin;\n            this._originFromTouchInteraction = (origin === 'touch') && isFromInteraction;\n            // If we're in IMMEDIATE mode, reset the origin at the next tick (or in `TOUCH_BUFFER_MS` ms\n            // for a touch event). We reset the origin at the next tick because Firefox focuses one tick\n            // after the interaction event. We wait `TOUCH_BUFFER_MS` ms before resetting the origin for\n            // a touch event because when a touch event is fired, the associated focus event isn't yet in\n            // the event queue. Before doing so, clear any pending timeouts.\n            if (this._detectionMode === 0 /* IMMEDIATE */) {\n                clearTimeout(this._originTimeoutId);\n                const ms = this._originFromTouchInteraction ? TOUCH_BUFFER_MS : 1;\n                this._originTimeoutId = setTimeout(() => this._origin = null, ms);\n            }\n        });\n    }\n    /**\n     * Handles focus events on a registered element.\n     * @param event The focus event.\n     * @param element The monitored element.\n     */\n    _onFocus(event, element) {\n        // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n        // focus event affecting the monitored element. If we want to use the origin of the first event\n        // instead we should check for the cdk-focused class here and return if the element already has\n        // it. (This only matters for elements that have includesChildren = true).\n        // If we are not counting child-element-focus as focused, make sure that the event target is the\n        // monitored element itself.\n        const elementInfo = this._elementInfo.get(element);\n        const focusEventTarget = _getEventTarget(event);\n        if (!elementInfo || (!elementInfo.checkChildren && element !== focusEventTarget)) {\n            return;\n        }\n        this._originChanged(element, this._getFocusOrigin(focusEventTarget), elementInfo);\n    }\n    /**\n     * Handles blur events on a registered element.\n     * @param event The blur event.\n     * @param element The monitored element.\n     */\n    _onBlur(event, element) {\n        // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n        // order to focus another child of the monitored element.\n        const elementInfo = this._elementInfo.get(element);\n        if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&\n            element.contains(event.relatedTarget))) {\n            return;\n        }\n        this._setClasses(element);\n        this._emitOrigin(elementInfo.subject, null);\n    }\n    _emitOrigin(subject, origin) {\n        this._ngZone.run(() => subject.next(origin));\n    }\n    _registerGlobalListeners(elementInfo) {\n        if (!this._platform.isBrowser) {\n            return;\n        }\n        const rootNode = elementInfo.rootNode;\n        const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;\n        if (!rootNodeFocusListeners) {\n            this._ngZone.runOutsideAngular(() => {\n                rootNode.addEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n                rootNode.addEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n            });\n        }\n        this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1);\n        // Register global listeners when first element is monitored.\n        if (++this._monitoredElementCount === 1) {\n            // Note: we listen to events in the capture phase so we\n            // can detect them even if the user stops propagation.\n            this._ngZone.runOutsideAngular(() => {\n                const window = this._getWindow();\n                window.addEventListener('focus', this._windowFocusListener);\n            });\n            // The InputModalityDetector is also just a collection of global listeners.\n            this._inputModalityDetector.modalityDetected\n                .pipe(takeUntil(this._stopInputModalityDetector))\n                .subscribe(modality => { this._setOrigin(modality, true /* isFromInteraction */); });\n        }\n    }\n    _removeGlobalListeners(elementInfo) {\n        const rootNode = elementInfo.rootNode;\n        if (this._rootNodeFocusListenerCount.has(rootNode)) {\n            const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode);\n            if (rootNodeFocusListeners > 1) {\n                this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);\n            }\n            else {\n                rootNode.removeEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n                rootNode.removeEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n                this._rootNodeFocusListenerCount.delete(rootNode);\n            }\n        }\n        // Unregister global listeners when last element is unmonitored.\n        if (!--this._monitoredElementCount) {\n            const window = this._getWindow();\n            window.removeEventListener('focus', this._windowFocusListener);\n            // Equivalently, stop our InputModalityDetector subscription.\n            this._stopInputModalityDetector.next();\n            // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n            clearTimeout(this._windowFocusTimeoutId);\n            clearTimeout(this._originTimeoutId);\n        }\n    }\n    /** Updates all the state on an element once its focus origin has changed. */\n    _originChanged(element, origin, elementInfo) {\n        this._setClasses(element, origin);\n        this._emitOrigin(elementInfo.subject, origin);\n        this._lastFocusOrigin = origin;\n    }\n    /**\n     * Collects the `MonitoredElementInfo` of a particular element and\n     * all of its ancestors that have enabled `checkChildren`.\n     * @param element Element from which to start the search.\n     */\n    _getClosestElementsInfo(element) {\n        const results = [];\n        this._elementInfo.forEach((info, currentElement) => {\n            if (currentElement === element || (info.checkChildren && currentElement.contains(element))) {\n                results.push([currentElement, info]);\n            }\n        });\n        return results;\n    }\n}\nFocusMonitor.ɵfac = function FocusMonitor_Factory(t) { return new (t || FocusMonitor)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(InputModalityDetector), ɵngcc0.ɵɵinject(DOCUMENT, 8), ɵngcc0.ɵɵinject(FOCUS_MONITOR_DEFAULT_OPTIONS, 8)); };\nFocusMonitor.ɵprov = i0.ɵɵdefineInjectable({ factory: function FocusMonitor_Factory() { return new FocusMonitor(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.Platform), i0.ɵɵinject(InputModalityDetector), i0.ɵɵinject(i2.DOCUMENT, 8), i0.ɵɵinject(FOCUS_MONITOR_DEFAULT_OPTIONS, 8)); }, token: FocusMonitor, providedIn: \"root\" });\nFocusMonitor.ctorParameters = () => [\n    { type: NgZone },\n    { type: Platform },\n    { type: InputModalityDetector },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [FOCUS_MONITOR_DEFAULT_OPTIONS,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusMonitor, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }, { type: InputModalityDetector }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [FOCUS_MONITOR_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nclass CdkMonitorFocus {\n    constructor(_elementRef, _focusMonitor) {\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this.cdkFocusChange = new EventEmitter();\n    }\n    ngAfterViewInit() {\n        const element = this._elementRef.nativeElement;\n        this._monitorSubscription = this._focusMonitor.monitor(element, element.nodeType === 1 && element.hasAttribute('cdkMonitorSubtreeFocus'))\n            .subscribe(origin => this.cdkFocusChange.emit(origin));\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        if (this._monitorSubscription) {\n            this._monitorSubscription.unsubscribe();\n        }\n    }\n}\nCdkMonitorFocus.ɵfac = function CdkMonitorFocus_Factory(t) { return new (t || CdkMonitorFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusMonitor)); };\nCdkMonitorFocus.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkMonitorFocus, selectors: [[\"\", \"cdkMonitorElementFocus\", \"\"], [\"\", \"cdkMonitorSubtreeFocus\", \"\"]], outputs: { cdkFocusChange: \"cdkFocusChange\" } });\nCdkMonitorFocus.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor }\n];\nCdkMonitorFocus.propDecorators = {\n    cdkFocusChange: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkMonitorFocus, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: FocusMonitor }]; }, { cdkFocusChange: [{\n            type: Output\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** CSS class applied to the document body when in black-on-white high-contrast mode. */\nconst BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';\n/** CSS class applied to the document body when in white-on-black high-contrast mode. */\nconst WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';\n/** CSS class applied to the document body when in high-contrast mode. */\nconst HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';\n/**\n * Service to determine whether the browser is currently in a high-contrast-mode environment.\n *\n * Microsoft Windows supports an accessibility feature called \"High Contrast Mode\". This mode\n * changes the appearance of all applications, including web applications, to dramatically increase\n * contrast.\n *\n * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast\n * Mode. This service does not detect high-contrast mode as added by the Chrome \"High Contrast\"\n * browser extension.\n */\nclass HighContrastModeDetector {\n    constructor(_platform, document) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    /** Gets the current high-contrast-mode for the page. */\n    getHighContrastMode() {\n        if (!this._platform.isBrowser) {\n            return 0 /* NONE */;\n        }\n        // Create a test element with an arbitrary background-color that is neither black nor\n        // white; high-contrast mode will coerce the color to either black or white. Also ensure that\n        // appending the test element to the DOM does not affect layout by absolutely positioning it\n        const testElement = this._document.createElement('div');\n        testElement.style.backgroundColor = 'rgb(1,2,3)';\n        testElement.style.position = 'absolute';\n        this._document.body.appendChild(testElement);\n        // Get the computed style for the background color, collapsing spaces to normalize between\n        // browsers. Once we get this color, we no longer need the test element. Access the `window`\n        // via the document so we can fake it in tests. Note that we have extra null checks, because\n        // this logic will likely run during app bootstrap and throwing can break the entire app.\n        const documentWindow = this._document.defaultView || window;\n        const computedStyle = (documentWindow && documentWindow.getComputedStyle) ?\n            documentWindow.getComputedStyle(testElement) : null;\n        const computedColor = (computedStyle && computedStyle.backgroundColor || '').replace(/ /g, '');\n        this._document.body.removeChild(testElement);\n        switch (computedColor) {\n            case 'rgb(0,0,0)': return 2 /* WHITE_ON_BLACK */;\n            case 'rgb(255,255,255)': return 1 /* BLACK_ON_WHITE */;\n        }\n        return 0 /* NONE */;\n    }\n    /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */\n    _applyBodyHighContrastModeCssClasses() {\n        if (!this._hasCheckedHighContrastMode && this._platform.isBrowser && this._document.body) {\n            const bodyClasses = this._document.body.classList;\n            // IE11 doesn't support `classList` operations with multiple arguments\n            bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n            bodyClasses.remove(BLACK_ON_WHITE_CSS_CLASS);\n            bodyClasses.remove(WHITE_ON_BLACK_CSS_CLASS);\n            this._hasCheckedHighContrastMode = true;\n            const mode = this.getHighContrastMode();\n            if (mode === 1 /* BLACK_ON_WHITE */) {\n                bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n                bodyClasses.add(BLACK_ON_WHITE_CSS_CLASS);\n            }\n            else if (mode === 2 /* WHITE_ON_BLACK */) {\n                bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n                bodyClasses.add(WHITE_ON_BLACK_CSS_CLASS);\n            }\n        }\n    }\n}\nHighContrastModeDetector.ɵfac = function HighContrastModeDetector_Factory(t) { return new (t || HighContrastModeDetector)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(DOCUMENT)); };\nHighContrastModeDetector.ɵprov = i0.ɵɵdefineInjectable({ factory: function HighContrastModeDetector_Factory() { return new HighContrastModeDetector(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i2.DOCUMENT)); }, token: HighContrastModeDetector, providedIn: \"root\" });\nHighContrastModeDetector.ctorParameters = () => [\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HighContrastModeDetector, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass A11yModule {\n    constructor(highContrastModeDetector) {\n        highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n    }\n}\nA11yModule.ɵfac = function A11yModule_Factory(t) { return new (t || A11yModule)(ɵngcc0.ɵɵinject(HighContrastModeDetector)); };\nA11yModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: A11yModule });\nA11yModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [PlatformModule, ObserversModule] });\nA11yModule.ctorParameters = () => [\n    { type: HighContrastModeDetector }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(A11yModule, [{\n        type: NgModule,\n        args: [{\n                imports: [PlatformModule, ObserversModule],\n                declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n                exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]\n            }]\n    }], function () { return [{ type: HighContrastModeDetector }]; }, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(A11yModule, { declarations: function () { return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]; }, imports: function () { return [PlatformModule, ObserversModule]; }, exports: function () { return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { A11yModule, ActiveDescendantKeyManager, AriaDescriber, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, CDK_DESCRIBEDBY_ID_PREFIX, CdkAriaLive, CdkMonitorFocus, CdkTrapFocus, ConfigurableFocusTrap, ConfigurableFocusTrapFactory, EventListenerFocusTrapInertStrategy, FOCUS_MONITOR_DEFAULT_OPTIONS, FOCUS_TRAP_INERT_STRATEGY, FocusKeyManager, FocusMonitor, FocusTrap, FocusTrapFactory, HighContrastModeDetector, INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS, INPUT_MODALITY_DETECTOR_OPTIONS, InputModalityDetector, InteractivityChecker, IsFocusableConfig, LIVE_ANNOUNCER_DEFAULT_OPTIONS, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, ListKeyManager, LiveAnnouncer, MESSAGES_CONTAINER_ID, isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader, FocusTrapManager as ɵangular_material_src_cdk_a11y_a11y_a };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}