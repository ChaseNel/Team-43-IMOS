{"ast":null,"code":"import { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { EventEmitter, Directive, ElementRef, ChangeDetectorRef, Optional, Inject, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, Injector, TemplateRef, InjectFlags, Type, Injectable, SkipSelf, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { FocusTrapFactory, FocusMonitor } from '@angular/cdk/a11y';\nimport { _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/common';\n\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) {}\n\nclass MatDialogConfig {\n  constructor() {\n    /** The ARIA role of the dialog element. */\n    this.role = 'dialog';\n    /** Custom class for the overlay pane. */\n\n    this.panelClass = '';\n    /** Whether the dialog has a backdrop. */\n\n    this.hasBackdrop = true;\n    /** Custom class for the backdrop. */\n\n    this.backdropClass = '';\n    /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n\n    this.disableClose = false;\n    /** Width of the dialog. */\n\n    this.width = '';\n    /** Height of the dialog. */\n\n    this.height = '';\n    /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n\n    this.maxWidth = '80vw';\n    /** Data being injected into the child component. */\n\n    this.data = null;\n    /** ID of the element that describes the dialog. */\n\n    this.ariaDescribedBy = null;\n    /** ID of the element that labels the dialog. */\n\n    this.ariaLabelledBy = null;\n    /** Aria label to assign to the dialog element. */\n\n    this.ariaLabel = null;\n    /** Whether the dialog should focus the first focusable element on open. */\n\n    this.autoFocus = true;\n    /**\n     * Whether the dialog should restore focus to the\n     * previously-focused element, after it's closed.\n     */\n\n    this.restoreFocus = true;\n    /**\n     * Whether the dialog should close when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n\n    this.closeOnNavigation = true; // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\n\n\nconst matDialogAnimations = {\n  /** Animation that is applied on the dialog container by default. */\n  dialogContainer: trigger('dialogContainer', [// Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({\n    opacity: 0,\n    transform: 'scale(0.7)'\n  })), state('enter', style({\n    transform: 'none'\n  })), transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({\n    transform: 'none',\n    opacity: 1\n  }))), transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({\n    opacity: 0\n  })))])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\n\nfunction throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Base class for the `MatDialogContainer`. The base class does not implement\n * animations as these are left to implementers of the dialog container.\n */\n\n\nclass _MatDialogContainerBase extends BasePortalOutlet {\n  constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document,\n  /** The dialog configuration. */\n  _config, _focusMonitor) {\n    super();\n    this._elementRef = _elementRef;\n    this._focusTrapFactory = _focusTrapFactory;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._config = _config;\n    this._focusMonitor = _focusMonitor;\n    /** Emits when an animation state changes. */\n\n    this._animationStateChanged = new EventEmitter();\n    /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n\n    this._elementFocusedBeforeDialogWasOpened = null;\n    /**\n     * Type of interaction that led to the dialog being closed. This is used to determine\n     * whether the focus style will be applied when returning focus to its original location\n     * after the dialog is closed.\n     */\n\n    this._closeInteractionType = null;\n    /**\n     * Attaches a DOM portal to the dialog container.\n     * @param portal Portal to be attached.\n     * @deprecated To be turned into a method.\n     * @breaking-change 10.0.0\n     */\n\n    this.attachDomPortal = portal => {\n      if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwMatDialogContentAlreadyAttachedError();\n      }\n\n      return this._portalOutlet.attachDomPortal(portal);\n    };\n\n    this._ariaLabelledBy = _config.ariaLabelledBy || null;\n    this._document = _document;\n  }\n  /** Initializes the dialog container with the attached content. */\n\n\n  _initializeWithAttachedContent() {\n    this._setupFocusTrap(); // Save the previously focused element. This element will be re-focused\n    // when the dialog closes.\n\n\n    this._capturePreviouslyFocusedElement(); // Move focus onto the dialog immediately in order to prevent the user\n    // from accidentally opening multiple dialogs at the same time.\n\n\n    this._focusDialogContainer();\n  }\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n\n\n  attachComponentPortal(portal) {\n    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n\n\n  attachTemplatePortal(portal) {\n    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n  /** Moves focus back into the dialog if it was moved out. */\n\n\n  _recaptureFocus() {\n    if (!this._containsFocus()) {\n      const focusContainer = !this._config.autoFocus || !this._focusTrap.focusInitialElement();\n\n      if (focusContainer) {\n        this._elementRef.nativeElement.focus();\n      }\n    }\n  }\n  /** Moves the focus inside the focus trap. */\n\n\n  _trapFocus() {\n    // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    } else if (!this._containsFocus()) {\n      // Otherwise ensure that focus is on the dialog container. It's possible that a different\n      // component tried to move focus while the open animation was running. See:\n      // https://github.com/angular/components/issues/16215. Note that we only want to do this\n      // if the focus isn't inside the dialog already, because it's possible that the consumer\n      // turned off `autoFocus` in order to move focus themselves.\n      this._elementRef.nativeElement.focus();\n    }\n  }\n  /** Restores focus to the element that was focused before the dialog opened. */\n\n\n  _restoreFocus() {\n    const previousElement = this._elementFocusedBeforeDialogWasOpened; // We need the extra check, because IE can set the `activeElement` to null in some cases.\n\n    if (this._config.restoreFocus && previousElement && typeof previousElement.focus === 'function') {\n      const activeElement = _getFocusedElementPierceShadowDom();\n\n      const element = this._elementRef.nativeElement; // Make sure that focus is still inside the dialog or is on the body (usually because a\n      // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n      // the consumer moved it themselves before the animation was done, in which case we shouldn't\n      // do anything.\n\n      if (!activeElement || activeElement === this._document.body || activeElement === element || element.contains(activeElement)) {\n        if (this._focusMonitor) {\n          this._focusMonitor.focusVia(previousElement, this._closeInteractionType);\n\n          this._closeInteractionType = null;\n        } else {\n          previousElement.focus();\n        }\n      }\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n  /** Sets up the focus trap. */\n\n\n  _setupFocusTrap() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n  }\n  /** Captures the element that was focused before the dialog was opened. */\n\n\n  _capturePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();\n    }\n  }\n  /** Focuses the dialog container. */\n\n\n  _focusDialogContainer() {\n    // Note that there is no focus method when rendering on the server.\n    if (this._elementRef.nativeElement.focus) {\n      this._elementRef.nativeElement.focus();\n    }\n  }\n  /** Returns whether focus is inside the dialog. */\n\n\n  _containsFocus() {\n    const element = this._elementRef.nativeElement;\n\n    const activeElement = _getFocusedElementPierceShadowDom();\n\n    return element === activeElement || element.contains(activeElement);\n  }\n\n}\n\n_MatDialogContainerBase.ɵfac = function _MatDialogContainerBase_Factory(t) {\n  return new (t || _MatDialogContainerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatDialogConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor));\n};\n\n_MatDialogContainerBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: _MatDialogContainerBase,\n  viewQuery: function _MatDialogContainerBase_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    }\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\n_MatDialogContainerBase.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: FocusTrapFactory\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: MatDialogConfig\n}, {\n  type: FocusMonitor\n}];\n\n_MatDialogContainerBase.propDecorators = {\n  _portalOutlet: [{\n    type: ViewChild,\n    args: [CdkPortalOutlet, {\n      static: true\n    }]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatDialogContainerBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.FocusTrapFactory\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: MatDialogConfig\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }];\n  }, {\n    _portalOutlet: [{\n      type: ViewChild,\n      args: [CdkPortalOutlet, {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n\n\nclass MatDialogContainer extends _MatDialogContainerBase {\n  constructor() {\n    super(...arguments);\n    /** State of the dialog animation. */\n\n    this._state = 'enter';\n  }\n  /** Callback, invoked whenever an animation on the host completes. */\n\n\n  _onAnimationDone({\n    toState,\n    totalTime\n  }) {\n    if (toState === 'enter') {\n      this._trapFocus();\n\n      this._animationStateChanged.next({\n        state: 'opened',\n        totalTime\n      });\n    } else if (toState === 'exit') {\n      this._restoreFocus();\n\n      this._animationStateChanged.next({\n        state: 'closed',\n        totalTime\n      });\n    }\n  }\n  /** Callback, invoked when an animation on the host starts. */\n\n\n  _onAnimationStart({\n    toState,\n    totalTime\n  }) {\n    if (toState === 'enter') {\n      this._animationStateChanged.next({\n        state: 'opening',\n        totalTime\n      });\n    } else if (toState === 'exit' || toState === 'void') {\n      this._animationStateChanged.next({\n        state: 'closing',\n        totalTime\n      });\n    }\n  }\n  /** Starts the dialog exit animation. */\n\n\n  _startExitAnimation() {\n    this._state = 'exit'; // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n}\n\nMatDialogContainer.ɵfac = /*@__PURE__*/function () {\n  let ɵMatDialogContainer_BaseFactory;\n  return function MatDialogContainer_Factory(t) {\n    return (ɵMatDialogContainer_BaseFactory || (ɵMatDialogContainer_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatDialogContainer)))(t || MatDialogContainer);\n  };\n}();\n\nMatDialogContainer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatDialogContainer,\n  selectors: [[\"mat-dialog-container\"]],\n  hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\", 1, \"mat-dialog-container\"],\n  hostVars: 6,\n  hostBindings: function MatDialogContainer_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵsyntheticHostListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) {\n        return ctx._onAnimationStart($event);\n      })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) {\n        return ctx._onAnimationDone($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx._id);\n      ɵngcc0.ɵɵattribute(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n      ɵngcc0.ɵɵsyntheticHostProperty(\"@dialogContainer\", ctx._state);\n    }\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkPortalOutlet\", \"\"]],\n  template: function MatDialogContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    }\n  },\n  dependencies: [ɵngcc2.CdkPortalOutlet],\n  styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matDialogAnimations.dialogContainer]\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogContainer, [{\n    type: Component,\n    args: [{\n      selector: 'mat-dialog-container',\n      template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      animations: [matDialogAnimations.dialogContainer],\n      host: {\n        'class': 'mat-dialog-container',\n        'tabindex': '-1',\n        'aria-modal': 'true',\n        '[id]': '_id',\n        '[attr.role]': '_config.role',\n        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n        '[attr.aria-label]': '_config.ariaLabel',\n        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n        '[@dialogContainer]': '_state',\n        '(@dialogContainer.start)': '_onAnimationStart($event)',\n        '(@dialogContainer.done)': '_onAnimationDone($event)'\n      },\n      styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\n\n\nlet uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\n\nclass MatDialogRef {\n  constructor(_overlayRef, _containerInstance,\n  /** Id of the dialog. */\n  id = `mat-dialog-${uniqueId++}`) {\n    this._overlayRef = _overlayRef;\n    this._containerInstance = _containerInstance;\n    this.id = id;\n    /** Whether the user is allowed to close the dialog. */\n\n    this.disableClose = this._containerInstance._config.disableClose;\n    /** Subject for notifying the user that the dialog has finished opening. */\n\n    this._afterOpened = new Subject();\n    /** Subject for notifying the user that the dialog has finished closing. */\n\n    this._afterClosed = new Subject();\n    /** Subject for notifying the user that the dialog has started closing. */\n\n    this._beforeClosed = new Subject();\n    /** Current state of the dialog. */\n\n    this._state = 0\n    /* OPEN */\n    ; // Pass the id along to the container.\n\n    _containerInstance._id = id; // Emit when opening animation completes\n\n    _containerInstance._animationStateChanged.pipe(filter(event => event.state === 'opened'), take(1)).subscribe(() => {\n      this._afterOpened.next();\n\n      this._afterOpened.complete();\n    }); // Dispose overlay when closing animation is complete\n\n\n    _containerInstance._animationStateChanged.pipe(filter(event => event.state === 'closed'), take(1)).subscribe(() => {\n      clearTimeout(this._closeFallbackTimeout);\n\n      this._finishDialogClose();\n    });\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n\n      this._beforeClosed.complete();\n\n      this._afterClosed.next(this._result);\n\n      this._afterClosed.complete();\n\n      this.componentInstance = null;\n\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents().pipe(filter(event => {\n      return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n    })).subscribe(event => {\n      event.preventDefault();\n\n      _closeDialogVia(this, 'keyboard');\n    });\n\n    _overlayRef.backdropClick().subscribe(() => {\n      if (this.disableClose) {\n        this._containerInstance._recaptureFocus();\n      } else {\n        _closeDialogVia(this, 'mouse');\n      }\n    });\n  }\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n\n\n  close(dialogResult) {\n    this._result = dialogResult; // Transition the backdrop in parallel to the dialog.\n\n    this._containerInstance._animationStateChanged.pipe(filter(event => event.state === 'closing'), take(1)).subscribe(event => {\n      this._beforeClosed.next(dialogResult);\n\n      this._beforeClosed.complete();\n\n      this._overlayRef.detachBackdrop(); // The logic that disposes of the overlay depends on the exit animation completing, however\n      // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n      // timeout which will clean everything up if the animation hasn't fired within the specified\n      // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n      // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n\n\n      this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n    });\n\n    this._state = 1\n    /* CLOSING */\n    ;\n\n    this._containerInstance._startExitAnimation();\n  }\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n\n\n  afterOpened() {\n    return this._afterOpened;\n  }\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n\n\n  afterClosed() {\n    return this._afterClosed;\n  }\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n\n\n  beforeClosed() {\n    return this._beforeClosed;\n  }\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n\n\n  backdropClick() {\n    return this._overlayRef.backdropClick();\n  }\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n\n\n  keydownEvents() {\n    return this._overlayRef.keydownEvents();\n  }\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n\n\n  updatePosition(position) {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n\n\n  updateSize(width = '', height = '') {\n    this._overlayRef.updateSize({\n      width,\n      height\n    });\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n  /** Add a CSS class or an array of classes to the overlay pane. */\n\n\n  addPanelClass(classes) {\n    this._overlayRef.addPanelClass(classes);\n\n    return this;\n  }\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n\n\n  removePanelClass(classes) {\n    this._overlayRef.removePanelClass(classes);\n\n    return this;\n  }\n  /** Gets the current state of the dialog's lifecycle. */\n\n\n  getState() {\n    return this._state;\n  }\n  /**\n   * Finishes the dialog close by updating the state of the dialog\n   * and disposing the overlay.\n   */\n\n\n  _finishDialogClose() {\n    this._state = 2\n    /* CLOSED */\n    ;\n\n    this._overlayRef.dispose();\n  }\n  /** Fetches the position strategy object from the overlay ref. */\n\n\n  _getPositionStrategy() {\n    return this._overlayRef.getConfig().positionStrategy;\n  }\n\n}\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\n\n\nfunction _closeDialogVia(ref, interactionType, result) {\n  // Some mock dialog ref instances in tests do not have the `_containerInstance` property.\n  // For those, we keep the behavior as is and do not deal with the interaction type.\n  if (ref._containerInstance !== undefined) {\n    ref._containerInstance._closeInteractionType = interactionType;\n  }\n\n  return ref.close(result);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\n\n\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/** Injection token that can be used to specify default dialog options. */\n\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\n\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\n\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\n\n\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Base class for dialog services. The base dialog service allows\n * for arbitrary dialog refs and dialog container components.\n */\n\nclass _MatDialogBase {\n  constructor(_overlay, _injector, _defaultOptions, _parentDialog, _overlayContainer, scrollStrategy, _dialogRefConstructor, _dialogContainerType, _dialogDataToken) {\n    this._overlay = _overlay;\n    this._injector = _injector;\n    this._defaultOptions = _defaultOptions;\n    this._parentDialog = _parentDialog;\n    this._overlayContainer = _overlayContainer;\n    this._dialogRefConstructor = _dialogRefConstructor;\n    this._dialogContainerType = _dialogContainerType;\n    this._dialogDataToken = _dialogDataToken;\n    this._openDialogsAtThisLevel = [];\n    this._afterAllClosedAtThisLevel = new Subject();\n    this._afterOpenedAtThisLevel = new Subject();\n    this._ariaHiddenElements = new Map(); // TODO (jelbourn): tighten the typing right-hand side of this expression.\n\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     */\n\n    this.afterAllClosed = defer(() => this.openDialogs.length ? this._getAfterAllClosed() : this._getAfterAllClosed().pipe(startWith(undefined)));\n    this._scrollStrategy = scrollStrategy;\n  }\n  /** Keeps track of the currently-open dialogs. */\n\n\n  get openDialogs() {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n  /** Stream that emits when a dialog has been opened. */\n\n\n  get afterOpened() {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  _getAfterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n  }\n\n  open(componentOrTemplateRef, config) {\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n\n    const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config); // If this is the first dialog that we're opening, hide all the non-overlay content.\n\n\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef); // Notify the dialog container that the content has been attached.\n\n    dialogContainer._initializeWithAttachedContent();\n\n    return dialogRef;\n  }\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n\n\n  closeAll() {\n    this._closeDialogs(this.openDialogs);\n  }\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n\n\n  getDialogById(id) {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n\n    this._afterAllClosedAtThisLevel.complete();\n\n    this._afterOpenedAtThisLevel.complete();\n  }\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n\n\n  _createOverlay(config) {\n    const overlayConfig = this._getOverlayConfig(config);\n\n    return this._overlay.create(overlayConfig);\n  }\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n\n\n  _getOverlayConfig(dialogConfig) {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n  /**\n   * Attaches a dialog container to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n\n\n  _attachDialogContainer(overlay, config) {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = Injector.create({\n      parent: userInjector || this._injector,\n      providers: [{\n        provide: MatDialogConfig,\n        useValue: config\n      }]\n    });\n    const containerPortal = new ComponentPortal(this._dialogContainerType, config.viewContainerRef, injector, config.componentFactoryResolver);\n    const containerRef = overlay.attach(containerPortal);\n    return containerRef.instance;\n  }\n  /**\n   * Attaches the user-provided component to the already-created dialog container.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping dialog container.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n\n\n  _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new this._dialogRefConstructor(overlayRef, dialogContainer, config.id);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, {\n        $implicit: config.data,\n        dialogRef\n      }));\n    } else {\n      const injector = this._createInjector(config, dialogRef, dialogContainer);\n\n      const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef.updateSize(config.width, config.height).updatePosition(config.position);\n    return dialogRef;\n  }\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param dialogContainer Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n\n\n  _createInjector(config, dialogRef, dialogContainer) {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector; // The dialog container should be provided as the dialog container and the dialog's\n    // content are created out of the same `ViewContainerRef` and as such, are siblings\n    // for injector purposes. To allow the hierarchy that is expected, the dialog\n    // container is explicitly provided in the injector.\n\n    const providers = [{\n      provide: this._dialogContainerType,\n      useValue: dialogContainer\n    }, {\n      provide: this._dialogDataToken,\n      useValue: config.data\n    }, {\n      provide: this._dialogRefConstructor,\n      useValue: dialogRef\n    }];\n\n    if (config.direction && (!userInjector || !userInjector.get(Directionality, null, InjectFlags.Optional))) {\n      providers.push({\n        provide: Directionality,\n        useValue: {\n          value: config.direction,\n          change: of()\n        }\n      });\n    }\n\n    return Injector.create({\n      parent: userInjector || this._injector,\n      providers\n    });\n  }\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n\n\n  _removeOpenDialog(dialogRef) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1); // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n\n        this._getAfterAllClosed().next();\n      }\n    }\n  }\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n\n\n  _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement(); // Ensure that the overlay container is attached to the DOM.\n\n\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer && sibling.nodeName !== 'SCRIPT' && sibling.nodeName !== 'STYLE' && !sibling.hasAttribute('aria-live')) {\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n  /** Closes all of the dialogs in an array. */\n\n\n  _closeDialogs(dialogs) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n_MatDialogBase.ɵfac = function _MatDialogBase_Factory(t) {\n  return new (t || _MatDialogBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.OverlayContainer), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Type), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Type), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.InjectionToken));\n};\n\n_MatDialogBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: _MatDialogBase\n});\n\n_MatDialogBase.ctorParameters = () => [{\n  type: Overlay\n}, {\n  type: Injector\n}, {\n  type: undefined\n}, {\n  type: undefined\n}, {\n  type: OverlayContainer\n}, {\n  type: undefined\n}, {\n  type: Type\n}, {\n  type: Type\n}, {\n  type: InjectionToken\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatDialogBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc3.Overlay\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: undefined\n    }, {\n      type: undefined\n    }, {\n      type: ɵngcc3.OverlayContainer\n    }, {\n      type: undefined\n    }, {\n      type: ɵngcc0.Type\n    }, {\n      type: ɵngcc0.Type\n    }, {\n      type: ɵngcc0.InjectionToken\n    }];\n  }, null);\n})();\n/**\n * Service to open Material Design modal dialogs.\n */\n\n\nclass MatDialog extends _MatDialogBase {\n  constructor(overlay, injector,\n  /**\n   * @deprecated `_location` parameter to be removed.\n   * @breaking-change 10.0.0\n   */\n  location, defaultOptions, scrollStrategy, parentDialog, overlayContainer) {\n    super(overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy, MatDialogRef, MatDialogContainer, MAT_DIALOG_DATA);\n  }\n\n}\n\nMatDialog.ɵfac = function MatDialog_Factory(t) {\n  return new (t || MatDialog)(ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), ɵngcc0.ɵɵinject(MatDialog, 12), ɵngcc0.ɵɵinject(ɵngcc3.OverlayContainer));\n};\n\nMatDialog.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: MatDialog,\n  factory: MatDialog.ɵfac\n});\n\nMatDialog.ctorParameters = () => [{\n  type: Overlay\n}, {\n  type: Injector\n}, {\n  type: Location,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: MatDialogConfig,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_DIALOG_DEFAULT_OPTIONS]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_DIALOG_SCROLL_STRATEGY]\n  }]\n}, {\n  type: MatDialog,\n  decorators: [{\n    type: Optional\n  }, {\n    type: SkipSelf\n  }]\n}, {\n  type: OverlayContainer\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialog, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ɵngcc3.Overlay\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc4.Location,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: MatDialogConfig,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DIALOG_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_DIALOG_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: MatDialog,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: ɵngcc3.OverlayContainer\n    }];\n  }, null);\n})();\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\n\n\nfunction _applyConfigDefaults(config, defaultOptions) {\n  return Object.assign(Object.assign({}, defaultOptions), config);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Counter used to generate unique IDs for dialog elements. */\n\n\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\n\nclass MatDialogClose {\n  constructor(\n  /**\n   * Reference to the containing dialog.\n   * @deprecated `dialogRef` property to become private.\n   * @breaking-change 13.0.0\n   */\n  // The dialog title directive is always used in combination with a `MatDialogRef`.\n  // tslint:disable-next-line: lightweight-tokens\n  dialogRef, _elementRef, _dialog) {\n    this.dialogRef = dialogRef;\n    this._elementRef = _elementRef;\n    this._dialog = _dialog;\n    /** Default to \"button\" to prevents accidental form submits. */\n\n    this.type = 'button';\n  }\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n    }\n  }\n\n  ngOnChanges(changes) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n\n  _onButtonClick(event) {\n    // Determinate the focus origin using the click event, because using the FocusMonitor will\n    // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n    // dialog, and therefore clicking the button won't result in a focus change. This means that\n    // the FocusMonitor won't detect any origin change, and will always output `program`.\n    _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n  }\n\n}\n\nMatDialogClose.ɵfac = function MatDialogClose_Factory(t) {\n  return new (t || MatDialogClose)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog));\n};\n\nMatDialogClose.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatDialogClose,\n  selectors: [[\"\", \"mat-dialog-close\", \"\"], [\"\", \"matDialogClose\", \"\"]],\n  hostVars: 2,\n  hostBindings: function MatDialogClose_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler($event) {\n        return ctx._onButtonClick($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null)(\"type\", ctx.type);\n    }\n  },\n  inputs: {\n    type: \"type\",\n    dialogResult: [\"mat-dialog-close\", \"dialogResult\"],\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"]\n  },\n  exportAs: [\"matDialogClose\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nMatDialogClose.ctorParameters = () => [{\n  type: MatDialogRef,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: ElementRef\n}, {\n  type: MatDialog\n}];\n\nMatDialogClose.propDecorators = {\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  type: [{\n    type: Input\n  }],\n  dialogResult: [{\n    type: Input,\n    args: ['mat-dialog-close']\n  }],\n  _matDialogClose: [{\n    type: Input,\n    args: ['matDialogClose']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogClose, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-dialog-close], [matDialogClose]',\n      exportAs: 'matDialogClose',\n      host: {\n        '(click)': '_onButtonClick($event)',\n        '[attr.aria-label]': 'ariaLabel || null',\n        '[attr.type]': 'type'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatDialogRef,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: MatDialog\n    }];\n  }, {\n    type: [{\n      type: Input\n    }],\n    dialogResult: [{\n      type: Input,\n      args: ['mat-dialog-close']\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    _matDialogClose: [{\n      type: Input,\n      args: ['matDialogClose']\n    }]\n  });\n})();\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n\n\nclass MatDialogTitle {\n  constructor( // The dialog title directive is always used in combination with a `MatDialogRef`.\n  // tslint:disable-next-line: lightweight-tokens\n  _dialogRef, _elementRef, _dialog) {\n    this._dialogRef = _dialogRef;\n    this._elementRef = _elementRef;\n    this._dialog = _dialog;\n    /** Unique id for the dialog title. If none is supplied, it will be auto-generated. */\n\n    this.id = `mat-dialog-title-${dialogElementUid++}`;\n  }\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n\n}\n\nMatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) {\n  return new (t || MatDialogTitle)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog));\n};\n\nMatDialogTitle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatDialogTitle,\n  selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-title\"],\n  hostVars: 1,\n  hostBindings: function MatDialogTitle_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n    }\n  },\n  inputs: {\n    id: \"id\"\n  },\n  exportAs: [\"matDialogTitle\"]\n});\n\nMatDialogTitle.ctorParameters = () => [{\n  type: MatDialogRef,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: ElementRef\n}, {\n  type: MatDialog\n}];\n\nMatDialogTitle.propDecorators = {\n  id: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogTitle, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-dialog-title], [matDialogTitle]',\n      exportAs: 'matDialogTitle',\n      host: {\n        'class': 'mat-dialog-title',\n        '[id]': 'id'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatDialogRef,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: MatDialog\n    }];\n  }, {\n    id: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Scrollable content container of a dialog.\n */\n\n\nclass MatDialogContent {}\n\nMatDialogContent.ɵfac = function MatDialogContent_Factory(t) {\n  return new (t || MatDialogContent)();\n};\n\nMatDialogContent.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatDialogContent,\n  selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-content\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogContent, [{\n    type: Directive,\n    args: [{\n      selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n      host: {\n        'class': 'mat-dialog-content'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n\n\nclass MatDialogActions {}\n\nMatDialogActions.ɵfac = function MatDialogActions_Factory(t) {\n  return new (t || MatDialogActions)();\n};\n\nMatDialogActions.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatDialogActions,\n  selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-actions\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogActions, [{\n    type: Directive,\n    args: [{\n      selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n      host: {\n        'class': 'mat-dialog-actions'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\n\n\nfunction getClosestDialog(element, openDialogs) {\n  let parent = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatDialogModule {}\n\nMatDialogModule.ɵfac = function MatDialogModule_Factory(t) {\n  return new (t || MatDialogModule)();\n};\n\nMatDialogModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatDialogModule\n});\nMatDialogModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n  imports: [OverlayModule, PortalModule, MatCommonModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogModule, [{\n    type: NgModule,\n    args: [{\n      imports: [OverlayModule, PortalModule, MatCommonModule],\n      exports: [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule],\n      declarations: [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent],\n      providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n      entryComponents: [MatDialogContainer]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDialogModule, {\n    declarations: function () {\n      return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent];\n    },\n    imports: function () {\n      return [OverlayModule, PortalModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, _MatDialogBase, _MatDialogContainerBase, _closeDialogVia, matDialogAnimations, throwMatDialogContentAlreadyAttachedError };","map":{"version":3,"names":["Overlay","OverlayConfig","OverlayContainer","OverlayModule","BasePortalOutlet","CdkPortalOutlet","ComponentPortal","TemplatePortal","PortalModule","EventEmitter","Directive","ElementRef","ChangeDetectorRef","Optional","Inject","ViewChild","Component","ViewEncapsulation","ChangeDetectionStrategy","InjectionToken","Injector","TemplateRef","InjectFlags","Type","Injectable","SkipSelf","Input","NgModule","MatCommonModule","Directionality","DOCUMENT","Location","Subject","defer","of","filter","take","startWith","FocusTrapFactory","FocusMonitor","_getFocusedElementPierceShadowDom","trigger","state","style","transition","animate","ESCAPE","hasModifierKey","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","MatDialogContainer_ng_template_0_Template","rf","ctx","MatDialogConfig","constructor","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","maxWidth","data","ariaDescribedBy","ariaLabelledBy","ariaLabel","autoFocus","restoreFocus","closeOnNavigation","matDialogAnimations","dialogContainer","opacity","transform","throwMatDialogContentAlreadyAttachedError","Error","_MatDialogContainerBase","_elementRef","_focusTrapFactory","_changeDetectorRef","_document","_config","_focusMonitor","_animationStateChanged","_elementFocusedBeforeDialogWasOpened","_closeInteractionType","attachDomPortal","portal","_portalOutlet","hasAttached","ngDevMode","_ariaLabelledBy","_initializeWithAttachedContent","_setupFocusTrap","_capturePreviouslyFocusedElement","_focusDialogContainer","attachComponentPortal","attachTemplatePortal","_recaptureFocus","_containsFocus","focusContainer","_focusTrap","focusInitialElement","nativeElement","focus","_trapFocus","focusInitialElementWhenReady","_restoreFocus","previousElement","activeElement","element","body","contains","focusVia","destroy","create","ɵfac","_MatDialogContainerBase_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","viewQuery","_MatDialogContainerBase_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","features","ɵɵInheritDefinitionFeature","ctorParameters","undefined","decorators","args","propDecorators","static","ɵsetClassMetadata","MatDialogContainer","arguments","_state","_onAnimationDone","toState","totalTime","next","_onAnimationStart","_startExitAnimation","markForCheck","ɵMatDialogContainer_BaseFactory","MatDialogContainer_Factory","ɵɵgetInheritedFactory","ɵcmp","ɵɵdefineComponent","selectors","hostAttrs","hostVars","hostBindings","MatDialogContainer_HostBindings","ɵɵsyntheticHostListener","MatDialogContainer_animation_dialogContainer_start_HostBindingHandler","$event","MatDialogContainer_animation_dialogContainer_done_HostBindingHandler","ɵɵhostProperty","_id","ɵɵattribute","ɵɵsyntheticHostProperty","decls","vars","consts","template","MatDialogContainer_Template","ɵɵtemplate","dependencies","styles","encapsulation","animation","selector","None","changeDetection","Default","animations","host","uniqueId","MatDialogRef","_overlayRef","_containerInstance","id","_afterOpened","_afterClosed","_beforeClosed","pipe","event","subscribe","complete","clearTimeout","_closeFallbackTimeout","_finishDialogClose","detachments","_result","componentInstance","dispose","keydownEvents","keyCode","preventDefault","_closeDialogVia","backdropClick","close","dialogResult","detachBackdrop","setTimeout","afterOpened","afterClosed","beforeClosed","updatePosition","position","strategy","_getPositionStrategy","left","right","centerHorizontally","top","bottom","centerVertically","updateSize","addPanelClass","classes","removePanelClass","getState","getConfig","positionStrategy","ref","interactionType","result","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","_MatDialogBase","_overlay","_injector","_defaultOptions","_parentDialog","_overlayContainer","scrollStrategy","_dialogRefConstructor","_dialogContainerType","_dialogDataToken","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","Map","afterAllClosed","openDialogs","length","_getAfterAllClosed","_scrollStrategy","parent","open","componentOrTemplateRef","config","_applyConfigDefaults","getDialogById","overlayRef","_createOverlay","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","push","_removeOpenDialog","closeAll","_closeDialogs","find","dialog","ngOnDestroy","overlayConfig","_getOverlayConfig","dialogConfig","global","direction","minWidth","minHeight","maxHeight","disposeOnNavigation","userInjector","viewContainerRef","injector","providers","useValue","containerPortal","componentFactoryResolver","containerRef","attach","instance","$implicit","_createInjector","contentRef","get","value","change","index","indexOf","splice","forEach","previousValue","setAttribute","removeAttribute","clear","overlayContainer","getContainerElement","parentElement","siblings","children","i","sibling","nodeName","hasAttribute","set","getAttribute","dialogs","_MatDialogBase_Factory","MatDialog","location","defaultOptions","parentDialog","MatDialog_Factory","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","Object","assign","dialogElementUid","MatDialogClose","_dialog","ngOnInit","getClosestDialog","ngOnChanges","changes","proxiedChange","currentValue","_onButtonClick","screenX","screenY","MatDialogClose_Factory","MatDialogClose_HostBindings","ɵɵlistener","MatDialogClose_click_HostBindingHandler","inputs","_matDialogClose","exportAs","ɵɵNgOnChangesFeature","MatDialogTitle","_dialogRef","Promise","resolve","then","container","MatDialogTitle_Factory","MatDialogTitle_HostBindings","MatDialogContent","MatDialogContent_Factory","MatDialogActions","MatDialogActions_Factory","classList","MatDialogModule","MatDialogModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","entryComponents","ngJitMode","ɵɵsetNgModuleScope"],"sources":["C:/Team-43-IMOS/Team-43-IMOS/Imos/node_modules/@angular/material/__ivy_ngcc__/fesm2015/dialog.js"],"sourcesContent":["import { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { EventEmitter, Directive, ElementRef, ChangeDetectorRef, Optional, Inject, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, Injector, TemplateRef, InjectFlags, Type, Injectable, SkipSelf, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { FocusTrapFactory, FocusMonitor } from '@angular/cdk/a11y';\nimport { _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/common';\n\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) { }\nclass MatDialogConfig {\n    constructor() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Custom class for the overlay pane. */\n        this.panelClass = '';\n        /** Whether the dialog has a backdrop. */\n        this.hasBackdrop = true;\n        /** Custom class for the backdrop. */\n        this.backdropClass = '';\n        /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n        this.maxWidth = '80vw';\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** ID of the element that describes the dialog. */\n        this.ariaDescribedBy = null;\n        /** ID of the element that labels the dialog. */\n        this.ariaLabelledBy = null;\n        /** Aria label to assign to the dialog element. */\n        this.ariaLabel = null;\n        /** Whether the dialog should focus the first focusable element on open. */\n        this.autoFocus = true;\n        /**\n         * Whether the dialog should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n        /**\n         * Whether the dialog should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nconst matDialogAnimations = {\n    /** Animation that is applied on the dialog container by default. */\n    dialogContainer: trigger('dialogContainer', [\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\n        // specifying the transform explicitly, causes IE both to blur the dialog content and\n        // decimate the animation performance. Leaving it as `none` solves both issues.\n        state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n        state('enter', style({ transform: 'none' })),\n        transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 }))),\n        transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 }))),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nfunction throwMatDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Base class for the `MatDialogContainer`. The base class does not implement\n * animations as these are left to implementers of the dialog container.\n */\nclass _MatDialogContainerBase extends BasePortalOutlet {\n    constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, \n    /** The dialog configuration. */\n    _config, _focusMonitor) {\n        super();\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._config = _config;\n        this._focusMonitor = _focusMonitor;\n        /** Emits when an animation state changes. */\n        this._animationStateChanged = new EventEmitter();\n        /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n        this._elementFocusedBeforeDialogWasOpened = null;\n        /**\n         * Type of interaction that led to the dialog being closed. This is used to determine\n         * whether the focus style will be applied when returning focus to its original location\n         * after the dialog is closed.\n         */\n        this._closeInteractionType = null;\n        /**\n         * Attaches a DOM portal to the dialog container.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwMatDialogContentAlreadyAttachedError();\n            }\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        this._ariaLabelledBy = _config.ariaLabelledBy || null;\n        this._document = _document;\n    }\n    /** Initializes the dialog container with the attached content. */\n    _initializeWithAttachedContent() {\n        this._setupFocusTrap();\n        // Save the previously focused element. This element will be re-focused\n        // when the dialog closes.\n        this._capturePreviouslyFocusedElement();\n        // Move focus onto the dialog immediately in order to prevent the user\n        // from accidentally opening multiple dialogs at the same time.\n        this._focusDialogContainer();\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Moves focus back into the dialog if it was moved out. */\n    _recaptureFocus() {\n        if (!this._containsFocus()) {\n            const focusContainer = !this._config.autoFocus || !this._focusTrap.focusInitialElement();\n            if (focusContainer) {\n                this._elementRef.nativeElement.focus();\n            }\n        }\n    }\n    /** Moves the focus inside the focus trap. */\n    _trapFocus() {\n        // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty.\n        if (this._config.autoFocus) {\n            this._focusTrap.focusInitialElementWhenReady();\n        }\n        else if (!this._containsFocus()) {\n            // Otherwise ensure that focus is on the dialog container. It's possible that a different\n            // component tried to move focus while the open animation was running. See:\n            // https://github.com/angular/components/issues/16215. Note that we only want to do this\n            // if the focus isn't inside the dialog already, because it's possible that the consumer\n            // turned off `autoFocus` in order to move focus themselves.\n            this._elementRef.nativeElement.focus();\n        }\n    }\n    /** Restores focus to the element that was focused before the dialog opened. */\n    _restoreFocus() {\n        const previousElement = this._elementFocusedBeforeDialogWasOpened;\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus && previousElement &&\n            typeof previousElement.focus === 'function') {\n            const activeElement = _getFocusedElementPierceShadowDom();\n            const element = this._elementRef.nativeElement;\n            // Make sure that focus is still inside the dialog or is on the body (usually because a\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\n            // do anything.\n            if (!activeElement || activeElement === this._document.body || activeElement === element ||\n                element.contains(activeElement)) {\n                if (this._focusMonitor) {\n                    this._focusMonitor.focusVia(previousElement, this._closeInteractionType);\n                    this._closeInteractionType = null;\n                }\n                else {\n                    previousElement.focus();\n                }\n            }\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /** Sets up the focus trap. */\n    _setupFocusTrap() {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n    /** Captures the element that was focused before the dialog was opened. */\n    _capturePreviouslyFocusedElement() {\n        if (this._document) {\n            this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();\n        }\n    }\n    /** Focuses the dialog container. */\n    _focusDialogContainer() {\n        // Note that there is no focus method when rendering on the server.\n        if (this._elementRef.nativeElement.focus) {\n            this._elementRef.nativeElement.focus();\n        }\n    }\n    /** Returns whether focus is inside the dialog. */\n    _containsFocus() {\n        const element = this._elementRef.nativeElement;\n        const activeElement = _getFocusedElementPierceShadowDom();\n        return element === activeElement || element.contains(activeElement);\n    }\n}\n_MatDialogContainerBase.ɵfac = function _MatDialogContainerBase_Factory(t) { return new (t || _MatDialogContainerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatDialogConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor)); };\n_MatDialogContainerBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatDialogContainerBase, viewQuery: function _MatDialogContainerBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n_MatDialogContainerBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusTrapFactory },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: MatDialogConfig },\n    { type: FocusMonitor }\n];\n_MatDialogContainerBase.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatDialogContainerBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusTrapFactory }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: MatDialogConfig }, { type: ɵngcc1.FocusMonitor }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet, { static: true }]\n        }] }); })();\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\nclass MatDialogContainer extends _MatDialogContainerBase {\n    constructor() {\n        super(...arguments);\n        /** State of the dialog animation. */\n        this._state = 'enter';\n    }\n    /** Callback, invoked whenever an animation on the host completes. */\n    _onAnimationDone({ toState, totalTime }) {\n        if (toState === 'enter') {\n            this._trapFocus();\n            this._animationStateChanged.next({ state: 'opened', totalTime });\n        }\n        else if (toState === 'exit') {\n            this._restoreFocus();\n            this._animationStateChanged.next({ state: 'closed', totalTime });\n        }\n    }\n    /** Callback, invoked when an animation on the host starts. */\n    _onAnimationStart({ toState, totalTime }) {\n        if (toState === 'enter') {\n            this._animationStateChanged.next({ state: 'opening', totalTime });\n        }\n        else if (toState === 'exit' || toState === 'void') {\n            this._animationStateChanged.next({ state: 'closing', totalTime });\n        }\n    }\n    /** Starts the dialog exit animation. */\n    _startExitAnimation() {\n        this._state = 'exit';\n        // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatDialogContainer.ɵfac = /*@__PURE__*/ function () { let ɵMatDialogContainer_BaseFactory; return function MatDialogContainer_Factory(t) { return (ɵMatDialogContainer_BaseFactory || (ɵMatDialogContainer_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatDialogContainer)))(t || MatDialogContainer); }; }();\nMatDialogContainer.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatDialogContainer, selectors: [[\"mat-dialog-container\"]], hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\", 1, \"mat-dialog-container\"], hostVars: 6, hostBindings: function MatDialogContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) { return ctx._onAnimationStart($event); })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) { return ctx._onAnimationDone($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx._id);\n        ɵngcc0.ɵɵattribute(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@dialogContainer\", ctx._state);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkPortalOutlet\", \"\"]], template: function MatDialogContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    } }, dependencies: [ɵngcc2.CdkPortalOutlet], styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"], encapsulation: 2, data: { animation: [matDialogAnimations.dialogContainer] } });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogContainer, [{\n        type: Component,\n        args: [{ selector: 'mat-dialog-container', template: \"<ng-template cdkPortalOutlet></ng-template>\\n\", encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, animations: [matDialogAnimations.dialogContainer], host: {\n                    'class': 'mat-dialog-container',\n                    'tabindex': '-1',\n                    'aria-modal': 'true',\n                    '[id]': '_id',\n                    '[attr.role]': '_config.role',\n                    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                    '[attr.aria-label]': '_config.ariaLabel',\n                    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                    '[@dialogContainer]': '_state',\n                    '(@dialogContainer.start)': '_onAnimationStart($event)',\n                    '(@dialogContainer.done)': '_onAnimationDone($event)'\n                }, styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"] }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nclass MatDialogRef {\n    constructor(_overlayRef, _containerInstance, \n    /** Id of the dialog. */\n    id = `mat-dialog-${uniqueId++}`) {\n        this._overlayRef = _overlayRef;\n        this._containerInstance = _containerInstance;\n        this.id = id;\n        /** Whether the user is allowed to close the dialog. */\n        this.disableClose = this._containerInstance._config.disableClose;\n        /** Subject for notifying the user that the dialog has finished opening. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the dialog has finished closing. */\n        this._afterClosed = new Subject();\n        /** Subject for notifying the user that the dialog has started closing. */\n        this._beforeClosed = new Subject();\n        /** Current state of the dialog. */\n        this._state = 0 /* OPEN */;\n        // Pass the id along to the container.\n        _containerInstance._id = id;\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged.pipe(filter(event => event.state === 'opened'), take(1))\n            .subscribe(() => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        });\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged.pipe(filter(event => event.state === 'closed'), take(1)).subscribe(() => {\n            clearTimeout(this._closeFallbackTimeout);\n            this._finishDialogClose();\n        });\n        _overlayRef.detachments().subscribe(() => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._afterClosed.next(this._result);\n            this._afterClosed.complete();\n            this.componentInstance = null;\n            this._overlayRef.dispose();\n        });\n        _overlayRef.keydownEvents()\n            .pipe(filter(event => {\n            return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n        }))\n            .subscribe(event => {\n            event.preventDefault();\n            _closeDialogVia(this, 'keyboard');\n        });\n        _overlayRef.backdropClick().subscribe(() => {\n            if (this.disableClose) {\n                this._containerInstance._recaptureFocus();\n            }\n            else {\n                _closeDialogVia(this, 'mouse');\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param dialogResult Optional result to return to the dialog opener.\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged.pipe(filter(event => event.state === 'closing'), take(1))\n            .subscribe(event => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n        });\n        this._state = 1 /* CLOSING */;\n        this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n    afterOpened() {\n        return this._afterOpened;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n    afterClosed() {\n        return this._afterClosed;\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n    beforeClosed() {\n        return this._beforeClosed;\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick() {\n        return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents() {\n        return this._overlayRef.keydownEvents();\n    }\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n    updatePosition(position) {\n        let strategy = this._getPositionStrategy();\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        this._overlayRef.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this._overlayRef.updateSize({ width, height });\n        this._overlayRef.updatePosition();\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this._overlayRef.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this._overlayRef.removePanelClass(classes);\n        return this;\n    }\n    /** Gets the current state of the dialog's lifecycle. */\n    getState() {\n        return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     */\n    _finishDialogClose() {\n        this._state = 2 /* CLOSED */;\n        this._overlayRef.dispose();\n    }\n    /** Fetches the position strategy object from the overlay ref. */\n    _getPositionStrategy() {\n        return this._overlayRef.getConfig().positionStrategy;\n    }\n}\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\nfunction _closeDialogVia(ref, interactionType, result) {\n    // Some mock dialog ref instances in tests do not have the `_containerInstance` property.\n    // For those, we keep the behavior as is and do not deal with the interaction type.\n    if (ref._containerInstance !== undefined) {\n        ref._containerInstance._closeInteractionType = interactionType;\n    }\n    return ref.close(result);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/** Injection token that can be used to specify default dialog options. */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Base class for dialog services. The base dialog service allows\n * for arbitrary dialog refs and dialog container components.\n */\nclass _MatDialogBase {\n    constructor(_overlay, _injector, _defaultOptions, _parentDialog, _overlayContainer, scrollStrategy, _dialogRefConstructor, _dialogContainerType, _dialogDataToken) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._overlayContainer = _overlayContainer;\n        this._dialogRefConstructor = _dialogRefConstructor;\n        this._dialogContainerType = _dialogContainerType;\n        this._dialogDataToken = _dialogDataToken;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._ariaHiddenElements = new Map();\n        // TODO (jelbourn): tighten the typing right-hand side of this expression.\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(() => this.openDialogs.length ?\n            this._getAfterAllClosed() :\n            this._getAfterAllClosed().pipe(startWith(undefined)));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n    open(componentOrTemplateRef, config) {\n        config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n        if (config.id && this.getDialogById(config.id) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        const overlayRef = this._createOverlay(config);\n        const dialogContainer = this._attachDialogContainer(overlayRef, config);\n        const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n        this.afterOpened.next(dialogRef);\n        // Notify the dialog container that the content has been attached.\n        dialogContainer._initializeWithAttachedContent();\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n    }\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the OverlayRef for the created overlay.\n     */\n    _createOverlay(config) {\n        const overlayConfig = this._getOverlayConfig(config);\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param dialogConfig The dialog configuration.\n     * @returns The overlay configuration.\n     */\n    _getOverlayConfig(dialogConfig) {\n        const state = new OverlayConfig({\n            positionStrategy: this._overlay.position().global(),\n            scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n            panelClass: dialogConfig.panelClass,\n            hasBackdrop: dialogConfig.hasBackdrop,\n            direction: dialogConfig.direction,\n            minWidth: dialogConfig.minWidth,\n            minHeight: dialogConfig.minHeight,\n            maxWidth: dialogConfig.maxWidth,\n            maxHeight: dialogConfig.maxHeight,\n            disposeOnNavigation: dialogConfig.closeOnNavigation\n        });\n        if (dialogConfig.backdropClass) {\n            state.backdropClass = dialogConfig.backdropClass;\n        }\n        return state;\n    }\n    /**\n     * Attaches a dialog container to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachDialogContainer(overlay, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatDialogConfig, useValue: config }]\n        });\n        const containerPortal = new ComponentPortal(this._dialogContainerType, config.viewContainerRef, injector, config.componentFactoryResolver);\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created dialog container.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogContainer Reference to the wrapping dialog container.\n     * @param overlayRef Reference to the overlay in which the dialog resides.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n        // Create a reference to the dialog we're creating in order to give the user a handle\n        // to modify and close it.\n        const dialogRef = new this._dialogRefConstructor(overlayRef, dialogContainer, config.id);\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, { $implicit: config.data, dialogRef }));\n        }\n        else {\n            const injector = this._createInjector(config, dialogRef, dialogContainer);\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n            dialogRef.componentInstance = contentRef.instance;\n        }\n        dialogRef\n            .updateSize(config.width, config.height)\n            .updatePosition(config.position);\n        return dialogRef;\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog.\n     * @param dialogContainer Dialog container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        // The dialog container should be provided as the dialog container and the dialog's\n        // content are created out of the same `ViewContainerRef` and as such, are siblings\n        // for injector purposes. To allow the hierarchy that is expected, the dialog\n        // container is explicitly provided in the injector.\n        const providers = [\n            { provide: this._dialogContainerType, useValue: dialogContainer },\n            { provide: this._dialogDataToken, useValue: config.data },\n            { provide: this._dialogRefConstructor, useValue: dialogRef }\n        ];\n        if (config.direction && (!userInjector ||\n            !userInjector.get(Directionality, null, InjectFlags.Optional))) {\n            providers.push({\n                provide: Directionality,\n                useValue: { value: config.direction, change: of() }\n            });\n        }\n        return Injector.create({ parent: userInjector || this._injector, providers });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     */\n    _removeOpenDialog(dialogRef) {\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                });\n                this._ariaHiddenElements.clear();\n                this._getAfterAllClosed().next();\n            }\n        }\n    }\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     */\n    _hideNonDialogContentFromAssistiveTechnology() {\n        const overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                let sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    /** Closes all of the dialogs in an array. */\n    _closeDialogs(dialogs) {\n        let i = dialogs.length;\n        while (i--) {\n            // The `_openDialogs` property isn't updated after close until the rxjs subscription\n            // runs on the next microtask, in addition to modifying the array as we're going\n            // through it. We loop through all of them and call close without assuming that\n            // they'll be removed from the list instantaneously.\n            dialogs[i].close();\n        }\n    }\n}\n_MatDialogBase.ɵfac = function _MatDialogBase_Factory(t) { return new (t || _MatDialogBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.OverlayContainer), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Type), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Type), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.InjectionToken)); };\n_MatDialogBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatDialogBase });\n_MatDialogBase.ctorParameters = () => [\n    { type: Overlay },\n    { type: Injector },\n    { type: undefined },\n    { type: undefined },\n    { type: OverlayContainer },\n    { type: undefined },\n    { type: Type },\n    { type: Type },\n    { type: InjectionToken }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatDialogBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc3.Overlay }, { type: ɵngcc0.Injector }, { type: undefined }, { type: undefined }, { type: ɵngcc3.OverlayContainer }, { type: undefined }, { type: ɵngcc0.Type }, { type: ɵngcc0.Type }, { type: ɵngcc0.InjectionToken }]; }, null); })();\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog extends _MatDialogBase {\n    constructor(overlay, injector, \n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    location, defaultOptions, scrollStrategy, parentDialog, overlayContainer) {\n        super(overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy, MatDialogRef, MatDialogContainer, MAT_DIALOG_DATA);\n    }\n}\nMatDialog.ɵfac = function MatDialog_Factory(t) { return new (t || MatDialog)(ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), ɵngcc0.ɵɵinject(MatDialog, 12), ɵngcc0.ɵɵinject(ɵngcc3.OverlayContainer)); };\nMatDialog.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MatDialog, factory: MatDialog.ɵfac });\nMatDialog.ctorParameters = () => [\n    { type: Overlay },\n    { type: Injector },\n    { type: Location, decorators: [{ type: Optional }] },\n    { type: MatDialogConfig, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DEFAULT_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_SCROLL_STRATEGY,] }] },\n    { type: MatDialog, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: OverlayContainer }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialog, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc3.Overlay }, { type: ɵngcc0.Injector }, { type: ɵngcc4.Location, decorators: [{\n                type: Optional\n            }] }, { type: MatDialogConfig, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DIALOG_DEFAULT_OPTIONS]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_DIALOG_SCROLL_STRATEGY]\n            }] }, { type: MatDialog, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc3.OverlayContainer }]; }, null); })();\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(config, defaultOptions) {\n    return Object.assign(Object.assign({}, defaultOptions), config);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    constructor(\n    /**\n     * Reference to the containing dialog.\n     * @deprecated `dialogRef` property to become private.\n     * @breaking-change 13.0.0\n     */\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Default to \"button\" to prevents accidental form submits. */\n        this.type = 'button';\n    }\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n    }\n    ngOnChanges(changes) {\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n    _onButtonClick(event) {\n        // Determinate the focus origin using the click event, because using the FocusMonitor will\n        // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n        // dialog, and therefore clicking the button won't result in a focus change. This means that\n        // the FocusMonitor won't detect any origin change, and will always output `program`.\n        _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n    }\n}\nMatDialogClose.ɵfac = function MatDialogClose_Factory(t) { return new (t || MatDialogClose)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\nMatDialogClose.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatDialogClose, selectors: [[\"\", \"mat-dialog-close\", \"\"], [\"\", \"matDialogClose\", \"\"]], hostVars: 2, hostBindings: function MatDialogClose_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler($event) { return ctx._onButtonClick($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null)(\"type\", ctx.type);\n    } }, inputs: { type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], ariaLabel: [\"aria-label\", \"ariaLabel\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, exportAs: [\"matDialogClose\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nMatDialogClose.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogClose.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    type: [{ type: Input }],\n    dialogResult: [{ type: Input, args: ['mat-dialog-close',] }],\n    _matDialogClose: [{ type: Input, args: ['matDialogClose',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogClose, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-dialog-close], [matDialogClose]',\n                exportAs: 'matDialogClose',\n                host: {\n                    '(click)': '_onButtonClick($event)',\n                    '[attr.aria-label]': 'ariaLabel || null',\n                    '[attr.type]': 'type'\n                }\n            }]\n    }], function () { return [{ type: MatDialogRef, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { type: [{\n            type: Input\n        }], dialogResult: [{\n            type: Input,\n            args: ['mat-dialog-close']\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], _matDialogClose: [{\n            type: Input,\n            args: ['matDialogClose']\n        }] }); })();\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle {\n    constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    _dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Unique id for the dialog title. If none is supplied, it will be auto-generated. */\n        this.id = `mat-dialog-title-${dialogElementUid++}`;\n    }\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then(() => {\n                const container = this._dialogRef._containerInstance;\n                if (container && !container._ariaLabelledBy) {\n                    container._ariaLabelledBy = this.id;\n                }\n            });\n        }\n    }\n}\nMatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) { return new (t || MatDialogTitle)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\nMatDialogTitle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatDialogTitle, selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]], hostAttrs: [1, \"mat-dialog-title\"], hostVars: 1, hostBindings: function MatDialogTitle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n    } }, inputs: { id: \"id\" }, exportAs: [\"matDialogTitle\"] });\nMatDialogTitle.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogTitle.propDecorators = {\n    id: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogTitle, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-dialog-title], [matDialogTitle]',\n                exportAs: 'matDialogTitle',\n                host: {\n                    'class': 'mat-dialog-title',\n                    '[id]': 'id'\n                }\n            }]\n    }], function () { return [{ type: MatDialogRef, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { id: [{\n            type: Input\n        }] }); })();\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n}\nMatDialogContent.ɵfac = function MatDialogContent_Factory(t) { return new (t || MatDialogContent)(); };\nMatDialogContent.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatDialogContent, selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]], hostAttrs: [1, \"mat-dialog-content\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogContent, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                host: { 'class': 'mat-dialog-content' }\n            }]\n    }], null, null); })();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions {\n}\nMatDialogActions.ɵfac = function MatDialogActions_Factory(t) { return new (t || MatDialogActions)(); };\nMatDialogActions.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatDialogActions, selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]], hostAttrs: [1, \"mat-dialog-actions\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogActions, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                host: { 'class': 'mat-dialog-actions' }\n            }]\n    }], null, null); })();\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element, openDialogs) {\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatDialogModule {\n}\nMatDialogModule.ɵfac = function MatDialogModule_Factory(t) { return new (t || MatDialogModule)(); };\nMatDialogModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatDialogModule });\nMatDialogModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        MatDialog,\n        MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [OverlayModule,\n        PortalModule,\n        MatCommonModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogContent,\n                    MatDialogActions,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogActions,\n                    MatDialogContent,\n                ],\n                providers: [\n                    MatDialog,\n                    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n                ],\n                entryComponents: [MatDialogContainer]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDialogModule, { declarations: function () { return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent]; }, imports: function () { return [OverlayModule,\n        PortalModule,\n        MatCommonModule]; }, exports: function () { return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, _MatDialogBase, _MatDialogContainerBase, _closeDialogVia, matDialogAnimations, throwMatDialogContentAlreadyAttachedError };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}